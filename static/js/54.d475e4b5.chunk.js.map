{"version":3,"sources":["views/MyGladiators/index.tsx"],"names":["StyledMain","styled","div","theme","colors","textSubtle","StyledPage","StaticsPane","isStaticsPaneOpen","MyGladiators","gladiatorNftContract","useGladiatorNft","id","useParams","account","useWeb3React","useTranslation","t","useState","localStorage","getItem","curColor","setCurColor","curName","setCurName","curSpeed","setColors","showStatics","useStore","state","setCurrentName","name","setItem","nftHashes","settingNFTHashes","userNftHashes","settingUserNFTHashes","schoolNftHashes","settingSchoolNFTHashes","myGladiators","setMyGladiators","usersGladiators","setUsersGladiators","schoolGladiators","setSchoolGladiators","getNftHash","a","length","newNftHashes","newUserNftHashes","newSchoolNftHashes","getUserGladiator","data","i","userInfo","_hex","toString","push","parseInt","getAllGladiators","response","finalizedData","userFinalizedData","schoolFinalizedData","gladiator","find","item","tokenId","finalizedNFT","ipfsJson","nft","console","log","useEffect","setColor","col","temp","JSON","stringify","setCurrentColor","curBack","nftHash"],"mappings":"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","file":"static/js/54.d475e4b5.chunk.js","sourcesContent":["import React, { useState, useEffect, useLayoutEffect } from 'react'\nimport styled from 'styled-components'\nimport { useParams } from 'react-router-dom'\nimport { useTranslation } from 'contexts/Localization'\nimport Viewer from './components/Viewer'\nimport Statics from '../PoolTour3D/components/UI/Statics'\nimport useStore from '../PoolTour3D/store'\nimport { useGladiatorNft } from 'hooks/useContract'\nimport { useWeb3React } from '@web3-react/core'\nimport { getAllGladiators } from '../../state/nftMarket/helpers'\n\nconst StyledHero = styled.div`\n  border-bottom: 2px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst StyledMain = styled.div`\n  display: flex;\n  align-items: center;\n  overflow: hidden;\n`\n\nconst StyledPage = styled.div`\n  text-align: center;\n`\n\nconst StaticsPane = styled.div<{ isStaticsPaneOpen: boolean }>`\n  flex: none;\n  overflow: hidden;\n  transition: width 200ms ease-in-out;\n  width: ${({ isStaticsPaneOpen }) => (isStaticsPaneOpen ? '384px' : 0)};\n  position: absolute;\n  right: 0;\n`\n\nconst MyGladiators = () => {\n  const gladiatorNftContract = useGladiatorNft()\n  const { id }: { id: string } = useParams()\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const [curColor, setCurColor] = useState(\n    localStorage.getItem('con_curColor') ? localStorage.getItem('con_curColor') : '#ffffff',\n  )\n  const [curName, setCurName] = useState(\n    localStorage.getItem('con_curName') ? localStorage.getItem('con_curName') : 'None selected.',\n  )\n  const [curSpeed, setCurSpeed] = useState(\n    localStorage.getItem('con_curSpeed') ? localStorage.getItem('con_curSpeed') : 1,\n  )\n  const [curBack, setCurBack] = useState(localStorage.getItem('con_curBack') ? localStorage.getItem('con_curBack') : 0)\n  const [colors, setColors] = useState({})\n\n  const showStatics = useStore((state) => state.showStatics)\n\n  const setCurrentColor = (col) => {\n    setCurColor(col)\n    localStorage.setItem('con_curColor', col)\n\n    const temp = { ...colors }\n    temp[curName] = col\n    setColors(temp)\n    localStorage.setItem('con_colors', JSON.stringify(colors))\n  }\n\n  const setCurrentSpeed = (speed) => {\n    setCurSpeed(speed)\n    localStorage.setItem('con_curSpeed', speed)\n  }\n\n  const setCurrentName = (name) => {\n    setCurName(name)\n    setCurColor(colors[name] ? colors[name] : '#ffffff')\n\n    localStorage.setItem('con_curName', name)\n  }\n\n  const setCurrentBack = (back) => {\n    setCurBack(back)\n    localStorage.setItem('con_curBack', back)\n  }\n\n  const resetSetting = () => {\n    setCurColor('#ffffff')\n    setColors({})\n    setCurSpeed(1)\n    setCurName('None selected.')\n    setCurBack(0)\n\n    localStorage.setItem('con_curColor', '#ffffff')\n    localStorage.setItem('con_colors', JSON.stringify({}))\n    localStorage.setItem('con_curSpeed', '1')\n    localStorage.setItem('con_curName', 'None selected.')\n    localStorage.setItem('con_curBack', '0')\n  }\n  const {\n    nftHashes,\n    settingNFTHashes,\n    userNftHashes,\n    settingUserNFTHashes,\n    schoolNftHashes,\n    settingSchoolNFTHashes,\n    myGladiators,\n    setMyGladiators,\n    usersGladiators,\n    setUsersGladiators,\n    schoolGladiators,\n    setSchoolGladiators,\n  } = useStore((state) => state)\n  const getNftHash = async () => {\n    try {\n      if (!nftHashes.length || !userNftHashes.length || !schoolNftHashes.length) {\n          // console.log(\"nothing found\")\n          const newNftHashes = []\n        const newUserNftHashes = []\n        const newSchoolNftHashes = []\n        const data = await gladiatorNftContract.getUserGladiator(account)\n        //  console.log(\"data<><><><><><>\", data)\n        for (let i = 0; i < data.length; i++) {\n          // console.log(\"newNftHashes\", i)\n          const userInfo = await gladiatorNftContract.userInfo(account, data[i]._hex.toString())\n          newNftHashes.push(parseInt(data[i]._hex, 16))\n          if (userInfo['spot'] === 'user') {\n            // console.log(\"newUserNftHashes\" , i)\n            newUserNftHashes.push(parseInt(data[i]._hex, 16))\n          }\n          if (userInfo['spot'] === 'school') {\n            // console.log(\"newSchoolNftHashes\" , i)\n            newSchoolNftHashes.push(parseInt(data[i]._hex, 16))\n          }\n        }\n        const response = await getAllGladiators()\n        // console.log(\"response\", response);\n        // console.log(\"response.length\", response.length);\n\n        const finalizedData = []\n        const userFinalizedData = []\n        const schoolFinalizedData = []\n\n        if (response && response.length !== 0) {\n          if (!myGladiators) {\n            for (let i = 0; i < newNftHashes.length; i++) {\n              let gladiator = null\n              gladiator = response.find((item) => item.tokenId == newNftHashes[i])\n              // console.log(\"iiiiiiiiiiiiiii\", i);\n              if (gladiator) {\n                // console.log(\"gladiator mygladiator\", gladiator)\n                const finalizedNFT = gladiator.ipfsJson.nft\n                // console.log(\"inside gladiatorrrrrrrrrr\", gladiator);\n                finalizedData.push({ ...finalizedNFT, tokenId: gladiator.tokenId })\n              }\n            }\n            // console.log(\"setMyGladiators\", finalizedData);\n            setMyGladiators(finalizedData)\n          }\n          if (!usersGladiators) {\n            // console.log(\"no usersGladiators\");\n            for (let i = 0; i < newUserNftHashes.length; i++) {\n              let gladiator = null\n              gladiator = response.find((item) => item.tokenId == newUserNftHashes[i])\n              // console.log(\"iiiiiiiiiiiiiii\", i);\n              if (gladiator) {\n                // console.log(\"gladiator mygladiator\", gladiator)\n                const finalizedNFT = gladiator.ipfsJson.nft\n                // console.log(\"inside gladiatorrrrrrrrrr\", gladiator);\n                userFinalizedData.push({ ...finalizedNFT, tokenId: gladiator.tokenId })\n              }\n            }\n            // console.log(\"setUsersGladiators\", userFinalizedData);\n            setUsersGladiators(userFinalizedData)\n          }\n          if (!schoolGladiators) {\n            // console.log(\"no schoolGladiators\");\n            for (let i = 0; i < newSchoolNftHashes.length; i++) {\n              let gladiator = null\n              gladiator = response.find((item) => item.tokenId == newSchoolNftHashes[i])\n              // console.log(\"iiiiiiiiiiiiiii\", i);\n              if (gladiator) {\n                // console.log(\"gladiator mygladiator\", gladiator)\n                const finalizedNFT = gladiator.ipfsJson.nft\n                // console.log(\"inside gladiatorrrrrrrrrr\", gladiator);\n                schoolFinalizedData.push({ ...finalizedNFT, tokenId: gladiator.tokenId })\n              }\n            }\n            // console.log(\"setSchoolGladiators\", schoolFinalizedData);\n          setSchoolGladiators(schoolFinalizedData)\n          }\n        }\n\n        setSchoolGladiators()\n        settingNFTHashes(newNftHashes)\n        settingUserNFTHashes(newUserNftHashes)\n        settingSchoolNFTHashes(newSchoolNftHashes)\n      }\n    } catch (error) {\n      console.log('errrrrrrrrrrrrrooooooooooooorrrrrrrrrrrrrrrr', error)\n    }\n  }\n  useEffect(() => {\n    getNftHash()\n  }, [])\n  return (\n    <StyledPage>\n      <StyledMain>\n        <Viewer\n          curColor={curColor}\n          setColor={(col) => setCurrentColor(col)}\n          curName={curName}\n          setCurName={(name) => setCurrentName(name)}\n          curSpeed={curSpeed}\n          curBack={id}\n          colors={colors}\n          nftHash={nftHashes || []}\n        />\n\n        <StaticsPane isStaticsPaneOpen={showStatics}>\n          {/* <Statics /> */}\n        </StaticsPane>\n      </StyledMain>\n    </StyledPage>\n  )\n}\n\nexport default MyGladiators\n"],"sourceRoot":""}