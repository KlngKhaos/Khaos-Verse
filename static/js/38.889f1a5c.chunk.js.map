{"version":3,"sources":["components/AddressInputSelect/index.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toArray.js","views/Predictions/Leaderboard/components/Crumbs.tsx","views/Predictions/Leaderboard/components/Hero.tsx","views/Predictions/Leaderboard/components/Results/styles.tsx","views/Predictions/Leaderboard/components/PositionLabel.tsx","views/Predictions/Leaderboard/components/PreviousBetsTable.tsx","views/Predictions/Leaderboard/components/MobileBetsTable.tsx","views/Predictions/Leaderboard/components/Results/DesktopBetsTable.tsx","views/Predictions/Leaderboard/components/WalletStatsModal.tsx","views/Predictions/Leaderboard/components/Results/ResultAvatar.tsx","views/Predictions/Leaderboard/components/Results/DesktopRow.tsx","views/Predictions/Leaderboard/components/Results/DesktopResults.tsx","views/Predictions/Leaderboard/components/Results/MobileRow.tsx","views/Predictions/Leaderboard/components/Results/MobileResults.tsx","views/Predictions/Leaderboard/components/Results/RankingCard.tsx","views/Predictions/Leaderboard/components/Results/index.tsx","views/Predictions/Leaderboard/components/Results/ConnectedWalletResult.tsx","views/Predictions/Leaderboard/components/AddressSearch.tsx","views/Predictions/Leaderboard/components/Filters/index.tsx","views/Predictions/Leaderboard/index.tsx","state/predictions/hooks.ts"],"names":["ResultStatus","SubMenu","styled","div","theme","colors","input","inputSecondary","radii","default","isOpen","AddressLink","Text","initialState","isFetching","resultFound","NOT_VALID","value","defaultValidAddressHandler","Promise","resolve","AddressInputSelect","onValidAddress","onAddressClick","props","useState","state","setState","t","useTranslation","useEffect","isAddress","a","prevState","hasResults","FOUND","NOT_FOUND","validAddressHandler","position","placeholder","subject","toLowerCase","onChange","evt","newValue","target","style","zIndex","paddingRight","top","right","onClick","px","fontWeight","_toArray","arr","Crumbs","mb","to","Hero","PageHeader","as","scale","color","Row","children","alignItems","justifyContent","NetWinnings","amount","textPrefix","textColor","bnbBusdPrice","useBNBBusdPrice","multiplyPriceByAmount","Math","abs","flexDirection","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","fontSize","lineHeight","NetWinningsRow","StyledPositionLabel","bgColor","Label","mediaQueries","lg","PositionLabel","isBull","BetPosition","BULL","icon","width","PreviousBetsTable","numberOfBets","account","setIsFetching","bets","setBets","orderedBets","orderBy","getBetHistory","user","response","map","transformBetResponse","fetchBetHistory","textAlign","times","num","height","bet","isWinner","round","epoch","claimedNetBNB","id","MobileBetsTable","setIsOpen","py","borderBottom","borderColor","cursor","textTransform","DesktopBetsTable","p","ExternalLink","LinkExternal","text","WalletStatsModal","onDismiss","onBeforeDismiss","useTheme","selectedAddress","useGetSelectedAddress","address","result","useGetOrFetchLeaderboardAddressResult","profileAvatar","useGetProfileAvatar","isLoading","useGetLeaderboardLoadingState","FetchStatus","Fetching","isDesktop","useMatchBreakpoints","minWidth","background","gradients","bubblegum","flex","mr","src","nft","image","thumbnail","username","href","getBscScanLink","truncateHash","variant","maxHeight","overflowY","gridTemplateColumns","gridGap","netBNB","winRate","totalBetsClaimed","totalBets","AvatarWrapper","Box","UsernameWrapper","ResultAvatar","useModal","onPresentWalletStatsModal","component","options","placement","Link","bold","external","DesktopRow","rank","DesktopResults","results","Container","index","StyledMobileRow","card","cardBorder","MobileRow","MobileResults","RotatedLaurelLeftIcon","LaurelLeftIcon","RotatedLaurelRightIcon","LaurelRightIcon","RankingCard","rankColor","getRankingColor","ribbon","variantColor","ribbonPosition","Results","useGetLeaderboardResults","first","second","third","rest","currentSkip","useGetLeaderboardSkip","hasMoreResults","useGetLeaderboardHasMoreResults","dispatch","useAppDispatch","endIcon","spin","filterNextPageLeaderboard","LEADERBOARD_RESULTS_PER_PAGE","ConnectedWalletResult","useWeb3React","accountResult","fetchProfileAvatar","fetchAddressResult","isActive","AddressSearch","setSelectedAddress","handleValidAddress","useCallback","payload","data","handleAddressClick","SearchWrapper","FilterWrapper","Filters","orderByOptions","label","Select","onOptionChange","option","setLeaderboardFilter","Leaderboard","leaderboardLoadingState","filters","useGetLeaderboardFilters","filterLeaderboard","Idle","PageLoader","Page","useGetRounds","rounds","useSelector","predictions","Object","keys","reduce","accum","parseBigNumberObj","useGetSortedRounds","roundData","values","useGetIsClaimable","claimableStatuses","useGetEarliestEpoch","earliestRound","minBy","useIsHistoryPaneOpen","isHistoryPaneOpen","useIsChartPaneOpen","isChartPaneOpen","useGetCurrentEpoch","currentEpoch","useGetPredictionsStatus","status","useGetHistoryFilter","historyFilter","useGetHasHistoryLoaded","hasHistoryLoaded","useGetCurrentHistoryPage","currentHistoryPage","useGetIsFetchingHistory","isFetchingHistory","useGetHistory","history","useGetLastOraclePrice","lastOraclePrice","useMemo","ethers","BigNumber","from","leaderboard","loadingState","skip","addressResult","addressResults","useGetAddressResult"],"mappings":"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","file":"static/js/38.889f1a5c.chunk.js","sourcesContent":["import React, { ChangeEvent, useState, useEffect } from 'react'\nimport { Box, BoxProps, Text, Input } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { isAddress } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport CircleLoader from 'components/Loader/CircleLoader'\n\nenum ResultStatus {\n  NOT_VALID,\n  FOUND,\n  NOT_FOUND,\n}\n\ninterface AddressInputSelectProps extends BoxProps {\n  onValidAddress?: (value: string) => Promise<boolean>\n  onAddressClick: (value: string) => void\n}\n\nconst SubMenu = styled.div<{ isOpen: boolean }>`\n  align-items: center;\n  background: ${({ theme }) => theme.colors.input};\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n  border-radius: 0 0 ${({ theme }) => theme.radii.default} ${({ theme }) => theme.radii.default};\n  left: 0;\n  padding-bottom: 8px;\n  padding-top: 16px;\n  position: absolute;\n  top: calc(100% - 12px);\n  transition: transform 0.15s, opacity 0.15s;\n  transform: scaleY(0);\n  transform-origin: top;\n  width: 100%;\n  z-index: 15;\n\n  ${({ isOpen }) =>\n    isOpen &&\n    `\n    height: auto;\n    opacity: 1;\n    transform: scaleY(1);\n  `}\n`\n\nconst AddressLink = styled(Text)`\n  cursor: pointer;\n  overflow-wrap: break-word;\n  font-weight: bold;\n  padding-left: 16px;\n  padding-right: 16px;\n`\n\nconst initialState = {\n  isFetching: false,\n  resultFound: ResultStatus.NOT_VALID,\n  value: '',\n}\n\nconst defaultValidAddressHandler = () => Promise.resolve(true)\n\nconst AddressInputSelect: React.FC<AddressInputSelectProps> = ({\n  onValidAddress = defaultValidAddressHandler,\n  onAddressClick,\n  ...props\n}) => {\n  const [state, setState] = useState(initialState)\n  const { t } = useTranslation()\n  const { isFetching, resultFound, value } = state\n\n  const handleChange = (evt: ChangeEvent<HTMLInputElement>) => {\n    const { value: newValue } = evt.target\n    setState((prevState) => ({\n      ...prevState,\n      value: newValue,\n    }))\n  }\n\n  const handleClick = () => {\n    setState(initialState)\n    onAddressClick(state.value)\n  }\n\n  // When we have a valid address fetch the data\n  useEffect(() => {\n    const isValidAddress = isAddress(value) !== false\n\n    const validAddressHandler = async () => {\n      try {\n        setState((prevState) => ({ ...prevState, isFetching: true }))\n        const hasResults = await onValidAddress(value)\n\n        setState((prevState) => ({\n          ...prevState,\n          isFetching: false,\n          resultFound: hasResults ? ResultStatus.FOUND : ResultStatus.NOT_FOUND,\n        }))\n      } catch {\n        setState((prevState) => ({ ...prevState, isFetching: false }))\n      }\n    }\n\n    if (isValidAddress) {\n      validAddressHandler()\n    } else {\n      setState((prevState) => ({ ...prevState, resultFound: ResultStatus.NOT_VALID }))\n    }\n  }, [value, onValidAddress, setState])\n\n  return (\n    <Box position=\"relative\" {...props}>\n      <Input\n        placeholder={t('Search %subject%', { subject: t('Address').toLowerCase() })}\n        value={state.value}\n        onChange={handleChange}\n        style={{ position: 'relative', zIndex: 16, paddingRight: '40px' }}\n      />\n      {isFetching && (\n        <Box position=\"absolute\" top=\"12px\" right=\"16px\" style={{ zIndex: 17 }}>\n          <CircleLoader />\n        </Box>\n      )}\n      <SubMenu isOpen={resultFound !== ResultStatus.NOT_VALID}>\n        {resultFound === ResultStatus.FOUND ? (\n          <AddressLink onClick={handleClick}>{state.value}</AddressLink>\n        ) : (\n          <Text px=\"16px\" fontWeight=\"bold\">\n            {t('No results found.')}\n          </Text>\n        )}\n      </SubMenu>\n    </Box>\n  )\n}\n\nexport default AddressInputSelect\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Box, Breadcrumbs, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst Crumbs = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Box mb=\"24px\">\n      <Breadcrumbs>\n        <Link to=\"/\">{t('Home')}</Link>\n        <Link to=\"/prediction\">{t('Prediction')}</Link>\n        <Text>{t('Leaderboard')}</Text>\n      </Breadcrumbs>\n    </Box>\n  )\n}\n\nexport default Crumbs\n","import React from 'react'\nimport { Heading } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport PageHeader from 'components/PageHeader'\nimport Crumbs from './Crumbs'\n\nconst Hero = () => {\n  const { t } = useTranslation()\n\n  return (\n    <PageHeader>\n      <Crumbs />\n      <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\">\n        {t('Leaderboard')}\n      </Heading>\n    </PageHeader>\n  )\n}\n\nexport default Hero\n","import React from 'react'\nimport { Flex, FlexProps, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport { multiplyPriceByAmount } from 'utils/prices'\n\nexport const Row: React.FC<FlexProps> = ({ children, ...props }) => {\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\n      {children}\n    </Flex>\n  )\n}\n\ninterface NetWinningsProps extends FlexProps {\n  amount: number\n  textPrefix?: string\n  textColor?: string\n}\n\nexport const NetWinnings: React.FC<NetWinningsProps> = ({ amount, textPrefix = '', textColor = 'text', ...props }) => {\n  const bnbBusdPrice = useBNBBusdPrice()\n  const value = multiplyPriceByAmount(bnbBusdPrice, Math.abs(amount))\n\n  if (!amount) {\n    return null\n  }\n\n  return (\n    <Flex flexDirection=\"column\" alignItems=\"flex-end\" {...props}>\n      <Text fontWeight=\"bold\" color={textColor}>\n        {`${textPrefix}${amount.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 6 })}`}\n      </Text>\n      <Text fontSize=\"12px\" color=\"textSubtle\" lineHeight={1}>\n        {`~$${value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`}\n      </Text>\n    </Flex>\n  )\n}\n\nexport const NetWinningsRow: React.FC<{ amount: number }> = ({ amount }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row mb=\"4px\">\n      <Text fontSize=\"12px\" color=\"textSubtle\">\n        {t('Net Winnings (BNB)')}\n      </Text>\n      <NetWinnings amount={amount} textPrefix={amount > 0 ? '+' : ''} textColor={amount > 0 ? 'success' : 'failure'} />\n    </Row>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ArrowDownIcon, ArrowUpIcon } from '@pancakeswap/uikit'\nimport { BetPosition } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface PositionLabelProps {\n  position: BetPosition\n}\n\nconst StyledPositionLabel = styled.div<{ bgColor: string }>`\n  align-items: center;\n  background-color: ${({ theme, bgColor }) => theme.colors[bgColor]};\n  border-radius: 4px;\n  display: inline-flex;\n  justify-content: center;\n  height: 32px;\n  min-width: 16px;\n  padding-left: 8px;\n  padding-right: 8px;\n`\n\nconst Label = styled.div`\n  color: #fff;\n  display: none;\n  text-transform: uppercase;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: block;\n    margin-left: 4px;\n  }\n`\n\nconst PositionLabel: React.FC<PositionLabelProps> = ({ position }) => {\n  const { t } = useTranslation()\n  const isBull = position === BetPosition.BULL\n  const bgColor = isBull ? 'success' : 'failure'\n  const icon = isBull ? <ArrowUpIcon width=\"24px\" color=\"white\" /> : <ArrowDownIcon width=\"24px\" color=\"white\" />\n\n  return (\n    <StyledPositionLabel bgColor={bgColor}>\n      {icon}\n      <Label>{isBull ? t('Up') : t('Down')}</Label>\n    </StyledPositionLabel>\n  )\n}\n\nexport default PositionLabel\n","import React, { useEffect, useState } from 'react'\nimport times from 'lodash/times'\nimport orderBy from 'lodash/orderBy'\nimport { Skeleton, Table, Td, Th } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBetHistory, transformBetResponse } from 'state/predictions/helpers'\nimport { Bet } from 'state/types'\nimport PositionLabel from './PositionLabel'\nimport { NetWinnings } from './Results/styles'\n\ninterface PreviousBetsTableProps {\n  numberOfBets?: number\n  account: string\n}\n\nconst PreviousBetsTable: React.FC<PreviousBetsTableProps> = ({ numberOfBets = 5, account }) => {\n  const [isFetching, setIsFetching] = useState(false)\n  const [bets, setBets] = useState<Bet[]>([])\n  const { t } = useTranslation()\n  const orderedBets = orderBy(bets, ['round.epoch'], ['desc'])\n\n  useEffect(() => {\n    const fetchBetHistory = async () => {\n      setIsFetching(true)\n      try {\n        const response = await getBetHistory(\n          {\n            user: account.toLowerCase(),\n          },\n          numberOfBets,\n        )\n\n        setBets(response.map(transformBetResponse))\n      } finally {\n        setIsFetching(false)\n      }\n    }\n\n    fetchBetHistory()\n  }, [account, numberOfBets, setIsFetching, setBets])\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <Th>{t('Round')}</Th>\n          <Th>{t('Direction')}</Th>\n          <Th textAlign=\"right\">{t('Winnings (BNB)')}</Th>\n        </tr>\n      </thead>\n      <tbody>\n        {isFetching\n          ? times(numberOfBets).map((num) => (\n              <tr key={num}>\n                <Td>\n                  <Skeleton width=\"80px\" />\n                </Td>\n                <Td>\n                  <Skeleton width=\"60px\" height=\"32px\" />\n                </Td>\n                <Td>\n                  <Skeleton width=\"80px\" />\n                </Td>\n              </tr>\n            ))\n          : orderedBets.map((bet) => {\n              const isWinner = bet.position === bet.round.position\n\n              return (\n                <tr key={bet.id}>\n                  <Td textAlign=\"center\" fontWeight=\"bold\">\n                    {bet.round.epoch.toLocaleString()}\n                  </Td>\n                  <Td textAlign=\"center\">\n                    <PositionLabel position={bet.position} />\n                  </Td>\n                  <Td textAlign=\"right\">\n                    <NetWinnings\n                      amount={isWinner ? bet.claimedNetBNB : bet.amount}\n                      textPrefix={isWinner ? '+' : '-'}\n                      textColor={isWinner ? 'success' : 'failure'}\n                    />\n                  </Td>\n                </tr>\n              )\n            })}\n      </tbody>\n    </Table>\n  )\n}\n\nexport default PreviousBetsTable\n","import React, { useState } from 'react'\nimport { Flex, Text, ChevronUpIcon, ChevronDownIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport PreviousBetsTable from './PreviousBetsTable'\n\ninterface MobileBetsTableProps {\n  account: string\n}\n\nconst MobileBetsTable: React.FC<MobileBetsTableProps> = ({ account }) => {\n  const { t } = useTranslation()\n  const [isOpen, setIsOpen] = useState(false)\n\n  const handleToggle = () => setIsOpen(!isOpen)\n\n  return (\n    <>\n      <Flex\n        alignItems=\"center\"\n        justifyContent=\"space-between\"\n        px=\"24px\"\n        py=\"32px\"\n        borderBottom=\"1px solid\"\n        borderColor=\"cardBorder\"\n        style={{ cursor: 'pointer' }}\n        onClick={handleToggle}\n      >\n        <Text as=\"h5\" color=\"secondary\" fontWeight=\"bold\" textTransform=\"uppercase\" fontSize=\"12px\">\n          {t('Last %num% Bets', { num: 5 })}\n        </Text>\n        {isOpen ? <ChevronDownIcon /> : <ChevronUpIcon />}\n      </Flex>\n      {isOpen && <PreviousBetsTable account={account} />}\n    </>\n  )\n}\n\nexport default MobileBetsTable\n","import React from 'react'\nimport { Box, Card, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport PreviousBetsTable from '../PreviousBetsTable'\n\ninterface DesktopBetsTableProps {\n  account: string\n}\n\nconst DesktopBetsTable: React.FC<DesktopBetsTableProps> = ({ account }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Box p=\"24px\">\n      <Text as=\"h5\" color=\"secondary\" fontWeight=\"bold\" textTransform=\"uppercase\" fontSize=\"12px\" mb=\"16px\">\n        {t('Last %num% Bets', { num: 5 })}\n      </Text>\n      <Card>\n        <PreviousBetsTable account={account} />\n      </Card>\n    </Box>\n  )\n}\n\nexport default DesktopBetsTable\n","import React from 'react'\nimport {\n  Box,\n  CloseIcon,\n  Flex,\n  Grid,\n  Text,\n  IconButton,\n  InjectedModalProps,\n  LinkExternal,\n  ModalContainer,\n  ModalHeader,\n  ProfileAvatar,\n  useMatchBreakpoints,\n  Skeleton,\n  Heading,\n} from '@pancakeswap/uikit'\nimport { useGetProfileAvatar } from 'state/profile/hooks'\nimport useTheme from 'hooks/useTheme'\nimport styled from 'styled-components'\nimport { getBscScanLink } from 'utils'\nimport truncateHash from 'utils/truncateHash'\nimport {\n  useGetOrFetchLeaderboardAddressResult,\n  useGetLeaderboardLoadingState,\n  useGetSelectedAddress,\n} from 'state/predictions/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { FetchStatus } from 'config/constants/types'\nimport { NetWinnings } from './Results/styles'\nimport MobileBetsTable from './MobileBetsTable'\nimport DesktopBetsTable from './Results/DesktopBetsTable'\n\ninterface WalletStatsModalProps extends InjectedModalProps {\n  account?: string\n  onBeforeDismiss?: () => void\n}\n\nconst ExternalLink = styled(LinkExternal)`\n  color: ${({ theme }) => theme.colors.text};\n\n  svg {\n    fill: ${({ theme }) => theme.colors.text};\n  }\n`\n\nconst WalletStatsModal: React.FC<WalletStatsModalProps> = ({ account, onDismiss, onBeforeDismiss }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const selectedAddress = useGetSelectedAddress()\n  const address = account || selectedAddress\n  const result = useGetOrFetchLeaderboardAddressResult(address)\n  const profileAvatar = useGetProfileAvatar(address)\n  const leaderboardLoadingState = useGetLeaderboardLoadingState()\n  const isLoading = leaderboardLoadingState === FetchStatus.Fetching\n  const { isDesktop } = useMatchBreakpoints()\n\n  const handleDismiss = () => {\n    if (onBeforeDismiss) {\n      onBeforeDismiss()\n    }\n\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer minWidth=\"320px\">\n      <ModalHeader background={theme.colors.gradients.bubblegum}>\n        <Flex alignItems=\"center\" style={{ flex: 1 }}>\n          <Box width={['64px', null, null, null, null, null, '96px']} mr=\"16px\">\n            <ProfileAvatar src={profileAvatar.nft?.image?.thumbnail} height={96} width={96} />\n          </Box>\n          <Box>\n            {profileAvatar.username && (\n              <Heading scale=\"lg\" mb=\"8px\">\n                {profileAvatar.username}\n              </Heading>\n            )}\n            <ExternalLink href={getBscScanLink(address, 'address')}>{truncateHash(address)}</ExternalLink>\n          </Box>\n        </Flex>\n        <IconButton variant=\"text\" onClick={handleDismiss} aria-label=\"Close the dialog\">\n          <CloseIcon color=\"text\" width=\"24px\" />\n        </IconButton>\n      </ModalHeader>\n      {result === null ? (\n        <Text p=\"32px\" textAlign=\"center\" fontWeight=\"bold\">\n          {t('No results found.')}\n        </Text>\n      ) : (\n        <Box maxHeight={['500px', null, null, null, null, null, 'none']} overflowY=\"auto\">\n          <Grid\n            gridTemplateColumns={['1fr', null, null, null, null, null, 'repeat(4, 1fr)']}\n            gridGap=\"16px\"\n            p=\"24px\"\n            borderBottom=\"1px solid\"\n            borderColor=\"cardBorder\"\n          >\n            <Box>\n              <Text as=\"h6\" fontSize=\"12px\" textTransform=\"uppercase\" color=\"textSubtle\" fontWeight=\"bold\" mb=\"8px\">\n                {t('Net Winnings')}\n              </Text>\n              {isLoading ? (\n                <Skeleton />\n              ) : (\n                <NetWinnings\n                  amount={result?.netBNB}\n                  textPrefix={result?.netBNB > 0 ? '+' : ''}\n                  textColor={result?.netBNB > 0 ? 'success' : 'failure'}\n                  alignItems=\"flex-end\"\n                />\n              )}\n            </Box>\n            <Box>\n              <Text as=\"h6\" fontSize=\"12px\" textTransform=\"uppercase\" color=\"textSubtle\" fontWeight=\"bold\" mb=\"8px\">\n                {t('Win Rate')}\n              </Text>\n              {isLoading ? (\n                <Skeleton />\n              ) : (\n                <Text fontWeight=\"bold\">{`${result?.winRate?.toLocaleString(undefined, {\n                  minimumFractionDigits: 0,\n                  maximumFractionDigits: 2,\n                })}%`}</Text>\n              )}\n            </Box>\n            <Box>\n              <Text as=\"h6\" fontSize=\"12px\" textTransform=\"uppercase\" color=\"textSubtle\" fontWeight=\"bold\" mb=\"8px\">\n                {t('Rounds Won')}\n              </Text>\n              {isLoading ? <Skeleton /> : <Text fontWeight=\"bold\">{result?.totalBetsClaimed?.toLocaleString()}</Text>}\n            </Box>\n            <Box>\n              <Text as=\"h6\" fontSize=\"12px\" textTransform=\"uppercase\" color=\"textSubtle\" fontWeight=\"bold\" mb=\"8px\">\n                {t('Rounds Played')}\n              </Text>\n              {isLoading ? <Skeleton /> : <Text fontWeight=\"bold\">{result?.totalBets?.toLocaleString()}</Text>}\n            </Box>\n          </Grid>\n          {isDesktop ? <DesktopBetsTable account={address} /> : <MobileBetsTable account={address} />}\n        </Box>\n      )}\n    </ModalContainer>\n  )\n}\n\nexport default WalletStatsModal\n","import React from 'react'\nimport { Box, Flex, FlexProps, Link, ProfileAvatar, SubMenu, SubMenuItem, useModal, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { getBscScanLink } from 'utils'\nimport { PredictionUser } from 'state/types'\nimport { useGetProfileAvatar } from 'state/profile/hooks'\nimport truncateHash from 'utils/truncateHash'\nimport { useTranslation } from 'contexts/Localization'\nimport WalletStatsModal from '../WalletStatsModal'\n\ninterface ResultAvatarProps extends FlexProps {\n  user: PredictionUser\n}\n\nconst AvatarWrapper = styled(Box)`\n  order: 2;\n  margin-left: 8px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 1;\n    margin-left: 0;\n    margin-right: 8px;\n  }\n`\n\nconst UsernameWrapper = styled(Box)`\n  order: 1;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 2;\n  }\n`\n\nconst ResultAvatar: React.FC<ResultAvatarProps> = ({ user, ...props }) => {\n  const { t } = useTranslation()\n  const profileAvatar = useGetProfileAvatar(user.id)\n  const [onPresentWalletStatsModal] = useModal(<WalletStatsModal account={user.id} />)\n\n  return (\n    <SubMenu\n      component={\n        <Flex alignItems=\"center\" {...props}>\n          <UsernameWrapper>\n            <Text color=\"primary\" fontWeight=\"bold\">\n              {profileAvatar.username || truncateHash(user.id)}\n            </Text>{' '}\n          </UsernameWrapper>\n          <AvatarWrapper\n            width={['32px', null, null, null, null, '40px']}\n            height={['32px', null, null, null, null, '40px']}\n          >\n            <ProfileAvatar src={profileAvatar.nft?.image?.thumbnail} height={40} width={40} />\n          </AvatarWrapper>\n        </Flex>\n      }\n      options={{ placement: 'bottom-start' }}\n    >\n      <SubMenuItem onClick={onPresentWalletStatsModal}>{t('View Stats')}</SubMenuItem>\n      <SubMenuItem as={Link} href={getBscScanLink(user.id, 'address')} bold={false} color=\"text\" external>\n        {t('View on Pulse chain')}\n      </SubMenuItem>\n    </SubMenu>\n  )\n}\n\nexport default ResultAvatar\n","import React from 'react'\nimport { Td, Text } from '@pancakeswap/uikit'\nimport { PredictionUser } from 'state/types'\nimport ResultAvatar from './ResultAvatar'\nimport { NetWinnings } from './styles'\n\ninterface DesktopRowProps {\n  rank?: number\n  user: PredictionUser\n}\n\nconst DesktopRow: React.FC<DesktopRowProps> = ({ rank, user, ...props }) => (\n  <tr {...props}>\n    {rank ? (\n      <Td>\n        <Text textAlign=\"center\" fontWeight=\"bold\" color=\"secondary\">{`#${rank}`}</Text>\n      </Td>\n    ) : (\n      <Td />\n    )}\n    <Td>\n      <ResultAvatar user={user} />\n    </Td>\n    <Td>\n      <NetWinnings\n        amount={user.netBNB}\n        textPrefix={user.netBNB > 0 ? '+' : ''}\n        textColor={user.netBNB > 0 ? 'success' : 'failure'}\n      />\n    </Td>\n    <Td textAlign=\"center\">\n      {`${user.winRate.toLocaleString(undefined, {\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 2,\n      })}%`}\n    </Td>\n    <Td textAlign=\"center\">\n      <strong>{user.totalBetsClaimed.toLocaleString()}</strong>\n    </Td>\n    <Td textAlign=\"center\">{user.totalBets.toLocaleString()}</Td>\n  </tr>\n)\n\nexport default DesktopRow\n","import React from 'react'\nimport { Card, Table, Th } from '@pancakeswap/uikit'\nimport { PredictionUser } from 'state/types'\nimport Container from 'components/Layout/Container'\nimport { useTranslation } from 'contexts/Localization'\nimport DesktopRow from './DesktopRow'\n\ninterface DesktopResultsProps {\n  results: PredictionUser[]\n}\n\nconst DesktopResults: React.FC<DesktopResultsProps> = ({ results }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Container mb=\"24px\">\n      <Card>\n        <Table>\n          <thead>\n            <tr>\n              <Th width=\"60px\">&nbsp;</Th>\n              <Th textAlign=\"left\">{t('User')}</Th>\n              <Th textAlign=\"right\">{t('Net Winnings (BNB)')}</Th>\n              <Th>{t('Win Rate')}</Th>\n              <Th>{t('Rounds Won')}</Th>\n              <Th>{t('Rounds Played')}</Th>\n            </tr>\n          </thead>\n          <tbody>\n            {results.map((result, index) => (\n              <DesktopRow key={result.id} rank={index + 4} user={result} />\n            ))}\n          </tbody>\n        </Table>\n      </Card>\n    </Container>\n  )\n}\n\nexport default DesktopResults\n","import React from 'react'\nimport { Box, Text } from '@pancakeswap/uikit'\nimport { PredictionUser } from 'state/types'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { NetWinningsRow, Row } from './styles'\nimport ResultAvatar from './ResultAvatar'\n\ninterface MobileRowProps {\n  rank?: number\n  user: PredictionUser\n}\n\nconst StyledMobileRow = styled(Box)`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n\n  &:first-child {\n    border-top: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  }\n`\n\nconst MobileRow: React.FC<MobileRowProps> = ({ rank, user }) => {\n  const { t } = useTranslation()\n\n  return (\n    <StyledMobileRow p=\"16px\">\n      <Row mb=\"16px\">\n        {rank ? <Text fontWeight=\"bold\" color=\"secondary\">{`#${rank}`}</Text> : <div />}\n        <ResultAvatar user={user} />\n      </Row>\n      <Row mb=\"4px\">\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {t('Win Rate')}\n        </Text>\n        <Text fontWeight=\"bold\">\n          {`${user.winRate.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 2 })}%`}\n        </Text>\n      </Row>\n      <NetWinningsRow amount={user.netBNB} />\n      <Row>\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {t('Rounds Won')}\n        </Text>\n        <Text fontWeight=\"bold\">{`${user.totalBetsClaimed.toLocaleString()}/${user.totalBets.toLocaleString()}`}</Text>\n      </Row>\n    </StyledMobileRow>\n  )\n}\n\nexport default MobileRow\n","import React from 'react'\nimport { Box } from '@pancakeswap/uikit'\nimport { PredictionUser } from 'state/types'\nimport MobileRow from './MobileRow'\n\ninterface MobileResultsProps {\n  results: PredictionUser[]\n}\n\nconst MobileResults: React.FC<MobileResultsProps> = ({ results }) => {\n  return (\n    <Box mb=\"24px\">\n      {results.map((result, index) => (\n        <MobileRow key={result.id} rank={index + 4} user={result} />\n      ))}\n    </Box>\n  )\n}\n\nexport default MobileResults\n","import React from 'react'\nimport {\n  Box,\n  Card,\n  CardBody,\n  CardRibbon,\n  Flex,\n  ProfileAvatar,\n  LaurelLeftIcon,\n  LaurelRightIcon,\n  Link,\n  Text,\n  SubMenu,\n  SubMenuItem,\n  useModal,\n} from '@pancakeswap/uikit'\nimport { PredictionUser } from 'state/types'\nimport { useGetProfileAvatar } from 'state/profile/hooks'\nimport styled from 'styled-components'\nimport { getBscScanLink } from 'utils'\nimport truncateHash from 'utils/truncateHash'\nimport { useTranslation } from 'contexts/Localization'\nimport WalletStatsModal from '../WalletStatsModal'\nimport { NetWinningsRow, Row } from './styles'\n\ninterface RankingCardProps {\n  rank: 1 | 2 | 3\n  user: PredictionUser\n}\n\nconst RotatedLaurelLeftIcon = styled(LaurelLeftIcon)`\n  transform: rotate(30deg);\n`\n\nconst RotatedLaurelRightIcon = styled(LaurelRightIcon)`\n  transform: rotate(-30deg);\n`\n\nconst getRankingColor = (rank: number) => {\n  if (rank === 3) {\n    return 'bronze'\n  }\n\n  if (rank === 2) {\n    return 'silver'\n  }\n\n  return 'gold'\n}\n\nconst RankingCard: React.FC<RankingCardProps> = ({ rank, user }) => {\n  const { t } = useTranslation()\n  const rankColor = getRankingColor(rank)\n  const profileAvatar = useGetProfileAvatar(user.id)\n  const [onPresentWalletStatsModal] = useModal(<WalletStatsModal account={user.id} />)\n\n  return (\n    <Card ribbon={<CardRibbon variantColor={rankColor} text={`#${rank}`} ribbonPosition=\"left\" />}>\n      <CardBody p=\"24px\">\n        <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\" mb=\"24px\">\n          <SubMenu\n            component={\n              <>\n                <Flex mb=\"4px\">\n                  <RotatedLaurelLeftIcon color={rankColor} width=\"32px\" />\n                  <Box width={['40px', null, null, '64px']} height={['40px', null, null, '64px']}>\n                    <ProfileAvatar src={profileAvatar.nft?.image?.thumbnail} height={64} width={64} />\n                  </Box>\n                  <RotatedLaurelRightIcon color={rankColor} width=\"32px\" />\n                </Flex>\n                <Text color=\"primary\" fontWeight=\"bold\" textAlign=\"center\">\n                  {profileAvatar.username || truncateHash(user.id)}\n                </Text>\n              </>\n            }\n            options={{ placement: 'bottom' }}\n          >\n            <SubMenuItem onClick={onPresentWalletStatsModal}>{t('View Stats')}</SubMenuItem>\n            <SubMenuItem as={Link} href={getBscScanLink(user.id, 'address')} bold={false} color=\"text\" external>\n              {t('View on Pulse chain')}\n            </SubMenuItem>\n          </SubMenu>\n        </Flex>\n        <Row mb=\"4px\">\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {t('Win Rate')}\n          </Text>\n          <Text fontWeight=\"bold\">\n            {`${user.winRate.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 2 })}%`}\n          </Text>\n        </Row>\n        <NetWinningsRow amount={user.netBNB} />\n        <Row>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {t('Rounds Won')}\n          </Text>\n          <Text fontWeight=\"bold\">{`${user.totalBetsClaimed.toLocaleString()}/${user.totalBets.toLocaleString()}`}</Text>\n        </Row>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default RankingCard\n","import React from 'react'\nimport { Box, Button, Grid, Flex, useMatchBreakpoints, AutoRenewIcon } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport {\n  useGetLeaderboardHasMoreResults,\n  useGetLeaderboardLoadingState,\n  useGetLeaderboardResults,\n  useGetLeaderboardSkip,\n} from 'state/predictions/hooks'\nimport { filterNextPageLeaderboard } from 'state/predictions'\nimport { LEADERBOARD_RESULTS_PER_PAGE } from 'state/predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\nimport Container from 'components/Layout/Container'\nimport { FetchStatus } from 'config/constants/types'\nimport DesktopResults from './DesktopResults'\nimport MobileResults from './MobileResults'\nimport RankingCard from './RankingCard'\n\nconst Results = () => {\n  const { isDesktop } = useMatchBreakpoints()\n  const { t } = useTranslation()\n  const [first, second, third, ...rest] = useGetLeaderboardResults()\n  const leaderboardLoadingState = useGetLeaderboardLoadingState()\n  const isLoading = leaderboardLoadingState === FetchStatus.Fetching\n  const currentSkip = useGetLeaderboardSkip()\n  const hasMoreResults = useGetLeaderboardHasMoreResults()\n  const dispatch = useAppDispatch()\n\n  const handleClick = () => {\n    dispatch(filterNextPageLeaderboard(currentSkip + LEADERBOARD_RESULTS_PER_PAGE))\n  }\n\n  return (\n    <Box>\n      <Container mb=\"16px\">\n        <Grid\n          gridGap={['16px', null, null, null, null, '24px']}\n          gridTemplateColumns={['1fr', null, null, null, null, 'repeat(3, 1fr)']}\n        >\n          <RankingCard rank={1} user={first} />\n          <RankingCard rank={2} user={second} />\n          <RankingCard rank={3} user={third} />\n        </Grid>\n      </Container>\n      {isDesktop ? <DesktopResults results={rest} /> : <MobileResults results={rest} />}\n      <Flex mb=\"40px\" justifyContent=\"center\">\n        {hasMoreResults && (\n          <Button\n            variant=\"secondary\"\n            isLoading={isLoading}\n            endIcon={isLoading ? <AutoRenewIcon spin color=\"currentColor\" /> : undefined}\n            onClick={handleClick}\n          >\n            {isLoading ? t('Loading...') : t('View More')}\n          </Button>\n        )}\n      </Flex>\n    </Box>\n  )\n}\n\nexport default Results\n","import React, { useEffect } from 'react'\nimport { Card, Heading, Table, Th, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport Container from 'components/Layout/Container'\nimport { useAppDispatch } from 'state'\nimport { fetchProfileAvatar } from 'state/profile'\nimport { fetchAddressResult } from 'state/predictions'\nimport { useGetOrFetchLeaderboardAddressResult } from 'state/predictions/hooks'\nimport DesktopRow from './DesktopRow'\nimport MobileRow from './MobileRow'\n\nconst ConnectedWalletResult = () => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const accountResult = useGetOrFetchLeaderboardAddressResult(account)\n  const { isDesktop } = useMatchBreakpoints()\n\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchProfileAvatar(account))\n      dispatch(fetchAddressResult(account))\n    }\n  }, [account, dispatch])\n\n  if (!account || !accountResult) {\n    return null\n  }\n\n  return (\n    <Container mb=\"48px\">\n      <Heading as=\"h2\" scale=\"md\" color=\"secondary\" mb=\"16px\">\n        {t('My Rankings')}\n      </Heading>\n      {isDesktop ? (\n        <Card isActive>\n          <Table>\n            <thead>\n              <tr>\n                <Th width=\"60px\">&nbsp;</Th>\n                <Th textAlign=\"left\">&nbsp;</Th>\n                <Th textAlign=\"right\">{t('Net Winnings (BNB)')}</Th>\n                <Th textAlign=\"center\">{t('Win Rate')}</Th>\n                <Th>{t('Rounds Won')}</Th>\n                <Th>{t('Rounds Played')}</Th>\n              </tr>\n            </thead>\n            <tbody>\n              <DesktopRow user={accountResult} />\n            </tbody>\n          </Table>\n        </Card>\n      ) : (\n        <Card isActive>\n          <MobileRow user={accountResult} />\n        </Card>\n      )}\n    </Container>\n  )\n}\n\nexport default ConnectedWalletResult\n","import React, { useCallback } from 'react'\nimport { useModal } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { fetchAddressResult, setSelectedAddress } from 'state/predictions'\nimport AddressInputSelect from 'components/AddressInputSelect'\nimport WalletStatsModal from './WalletStatsModal'\n\nconst AddressSearch = () => {\n  const dispatch = useAppDispatch()\n\n  const handleBeforeDismiss = () => {\n    dispatch(setSelectedAddress(null))\n  }\n\n  const [onPresentWalletStatsModal] = useModal(<WalletStatsModal onBeforeDismiss={handleBeforeDismiss} />)\n  const handleValidAddress = useCallback(\n    async (value: string) => {\n      const response: any = await dispatch(fetchAddressResult(value))\n      return response.payload?.data !== undefined\n    },\n    [dispatch],\n  )\n\n  const handleAddressClick = async (value: string) => {\n    await dispatch(setSelectedAddress(value))\n    onPresentWalletStatsModal()\n  }\n\n  return <AddressInputSelect onAddressClick={handleAddressClick} onValidAddress={handleValidAddress} />\n}\n\nexport default AddressSearch\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { setLeaderboardFilter } from 'state/predictions'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport Container from 'components/Layout/Container'\nimport AddressSearch from '../AddressSearch'\n\nconst SearchWrapper = styled(Box)`\n  margin-bottom: 8px;\n  order: 1;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-bottom: 0;\n    order: 2;\n    width: 320px;\n  }\n`\nconst FilterWrapper = styled(Box)`\n  order: 2;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 1;\n    width: auto;\n  }\n`\n\nconst Filters = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const orderByOptions = [\n    { label: t('Net Winnings'), value: 'netBNB' },\n    { label: t('Total BNB'), value: 'totalBNB' },\n    { label: t('Rounds Played'), value: 'totalBets' },\n    { label: t('Win Rate'), value: 'winRate' },\n  ]\n\n  const handleOrderBy = (option: OptionProps) => {\n    dispatch(setLeaderboardFilter({ orderBy: option.value }))\n  }\n\n  return (\n    <Container py=\"32px\">\n      <Text textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" fontWeight=\"bold\" mb=\"4px\">\n        {t('Rank By')}\n      </Text>\n      <Flex\n        flexDirection={['column', null, null, null, null, 'row']}\n        alignItems={['start', null, null, null, null, 'center']}\n        justifyContent={['start', null, null, null, null, 'space-between']}\n      >\n        <FilterWrapper>\n          <Select options={orderByOptions} onOptionChange={handleOrderBy} />\n        </FilterWrapper>\n        <SearchWrapper>\n          <AddressSearch />\n        </SearchWrapper>\n      </Flex>\n    </Container>\n  )\n}\n\nexport default Filters\n","import React, { useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { useGetLeaderboardFilters, useGetLeaderboardLoadingState } from 'state/predictions/hooks'\nimport { filterLeaderboard } from 'state/predictions'\nimport PageLoader from 'components/Loader/PageLoader'\nimport { PageMeta } from 'components/Layout/Page'\nimport { FetchStatus } from 'config/constants/types'\nimport Hero from './components/Hero'\nimport Results from './components/Results'\nimport ConnectedWalletResult from './components/Results/ConnectedWalletResult'\nimport Filters from './components/Filters'\n\nconst Leaderboard = () => {\n  const leaderboardLoadingState = useGetLeaderboardLoadingState()\n  const filters = useGetLeaderboardFilters()\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(filterLeaderboard({ filters }))\n  }, [account, filters, dispatch])\n\n  if (leaderboardLoadingState === FetchStatus.Idle) {\n    return <PageLoader />\n  }\n\n  return (\n    <>\n      <PageMeta />\n      <Hero />\n      <Filters />\n      <ConnectedWalletResult />\n      <Results />\n    </>\n  )\n}\n\nexport default Leaderboard\n","import { useEffect, useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { ethers } from 'ethers'\nimport { minBy, orderBy } from 'lodash'\nimport { isAddress } from 'utils'\nimport { useAppDispatch } from 'state'\nimport { State, NodeRound, ReduxNodeLedger, NodeLedger, ReduxNodeRound } from '../types'\nimport { parseBigNumberObj } from './helpers'\nimport { fetchAddressResult } from '.'\n\nexport const useGetRounds = () => {\n  const rounds = useSelector((state: State) => state.predictions.rounds)\n  // console.log(\"roundsroundsrounds11111\", rounds)\n  return Object.keys(rounds).reduce((accum, epoch) => {\n    return {\n      ...accum,\n      [epoch]: parseBigNumberObj<ReduxNodeRound, NodeRound>(rounds[epoch]),\n    }\n  }, {}) as { [key: string]: NodeRound }\n}\n\nexport const useGetRound = (epoch: number) => {\n  const round = useSelector((state: State) => state.predictions.rounds[epoch])\n  return parseBigNumberObj<ReduxNodeRound, NodeRound>(round)\n}\n\nexport const useGetSortedRounds = () => {\n  const roundData = useGetRounds()\n  // console.log(\"roundDataroundDataroundData\", roundData)\n  return orderBy(Object.values(roundData), ['epoch'], ['asc'])\n}\n\nexport const useGetBetByEpoch = (account: string, epoch: number) => {\n  const bets = useSelector((state: State) => state.predictions.ledgers)\n\n  if (!bets[account]) {\n    return null\n  }\n\n  if (!bets[account][epoch]) {\n    return null\n  }\n\n  return parseBigNumberObj<ReduxNodeLedger, NodeLedger>(bets[account][epoch])\n}\n\nexport const useGetIsClaimable = (epoch) => {\n  const claimableStatuses = useSelector((state: State) => state.predictions.claimableStatuses)\n  return claimableStatuses[epoch] || false\n}\n\n/**\n * Used to get the range of rounds to poll for\n */\nexport const useGetEarliestEpoch = () => {\n  return useSelector((state: State) => {\n    const earliestRound = minBy(Object.values(state.predictions.rounds), 'epoch')\n    return earliestRound?.epoch\n  })\n}\n\nexport const useIsHistoryPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isHistoryPaneOpen)\n}\n\nexport const useIsChartPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isChartPaneOpen)\n}\n\nexport const useGetCurrentEpoch = () => {\n  return useSelector((state: State) => state.predictions.currentEpoch)\n}\n\nexport const useGetIntervalSeconds = () => {\n  return useSelector((state: State) => state.predictions.intervalSeconds)\n}\n\nexport const useGetCurrentRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetRounds()\n  return rounds[currentEpoch]\n}\n\nexport const useGetPredictionsStatus = () => {\n  return useSelector((state: State) => state.predictions.status)\n}\n\nexport const useGetHistoryFilter = () => {\n  return useSelector((state: State) => state.predictions.historyFilter)\n}\n\nexport const useGetHasHistoryLoaded = () => {\n  return useSelector((state: State) => state.predictions.hasHistoryLoaded)\n}\n\nexport const useGetCurrentHistoryPage = () => {\n  return useSelector((state: State) => state.predictions.currentHistoryPage)\n}\n\nexport const useGetMinBetAmount = () => {\n  const minBetAmount = useSelector((state: State) => state.predictions.minBetAmount)\n  return useMemo(() => ethers.BigNumber.from(minBetAmount), [minBetAmount])\n}\n\nexport const useGetBufferSeconds = () => {\n  return useSelector((state: State) => state.predictions.bufferSeconds)\n}\n\nexport const useGetIsFetchingHistory = () => {\n  return useSelector((state: State) => state.predictions.isFetchingHistory)\n}\n\nexport const useGetHistory = () => {\n  return useSelector((state: State) => state.predictions.history)\n}\n\nexport const useGetLastOraclePrice = () => {\n  const lastOraclePrice = useSelector((state: State) => state.predictions.lastOraclePrice)\n  return useMemo(() => {\n    return ethers.BigNumber.from(lastOraclePrice)\n  }, [lastOraclePrice])\n}\n\n/**\n * The current round's lock timestamp will not be set immediately so we return an estimate until then\n */\nexport const useGetCurrentRoundLockTimestamp = () => {\n  const currentRound = useGetCurrentRound()\n  const intervalSeconds = useGetIntervalSeconds()\n\n  if (!currentRound.lockTimestamp) {\n    return currentRound.startTimestamp + intervalSeconds\n  }\n\n  return currentRound.lockTimestamp\n}\n\n// Leaderboard\nexport const useGetLeaderboardLoadingState = () => {\n  return useSelector((state: State) => state.predictions.leaderboard.loadingState)\n}\n\nexport const useGetLeaderboardResults = () => {\n  return useSelector((state: State) => state.predictions.leaderboard.results)\n}\n\nexport const useGetLeaderboardFilters = () => {\n  return useSelector((state: State) => state.predictions.leaderboard.filters)\n}\n\nexport const useGetLeaderboardSkip = () => {\n  return useSelector((state: State) => state.predictions.leaderboard.skip)\n}\n\nexport const useGetLeaderboardHasMoreResults = () => {\n  return useSelector((state: State) => state.predictions.leaderboard.hasMoreResults)\n}\n\nexport const useGetAddressResult = (account: string) => {\n  return useSelector((state: State) => state.predictions.leaderboard.addressResults[account])\n}\n\nexport const useGetOrFetchLeaderboardAddressResult = (account: string) => {\n  const addressResult = useGetAddressResult(account)\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    const address = isAddress(account)\n\n    // If address result is null it means we already tried fetching the results and none came back\n    if (!addressResult && addressResult !== null && address) {\n      dispatch(fetchAddressResult(account))\n    }\n  }, [dispatch, account, addressResult])\n\n  return addressResult\n}\n\nexport const useGetSelectedAddress = () => {\n  return useSelector((state: State) => state.predictions.leaderboard.selectedAddress)\n}\n"],"sourceRoot":""}