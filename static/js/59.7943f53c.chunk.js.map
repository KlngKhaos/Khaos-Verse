{"version":3,"sources":["views/PoolTour3D/components/THREE/Controls/index.tsx","views/PoolTour3D/components/Viewer.tsx","views/PoolTour3D/index.tsx"],"names":["extend","OrbitControls","Controls","props","useThree","camera","gl","invalidate","ref","useRef","undefined","useEffect","current","update","addEventListener","args","domElement","StyledViewer","styled","div","StyledCanvasWrapper","StyledArrowButton","button","StyledModelOptionsWrapper","StyledModelName","StyledButtonsWrapper","StyledOptionButton","Viewer","setColor","curName","setCurName","curSpeed","curBack","colors","nftHash","useState","myData","setMyData","myModels","setMyModels","currentPage","setCurrentPage","currentStatics","useStore","state","currentHoverModel","history","useHistory","usersGladiators","length","i","model","useLoader","GLTFLoader","glTFPath","Dome","texture","THREE","attach","map","side","GroundPlane","wrapS","wrapT","repeat","set","anisotropy","receiveShadow","rotation","Math","PI","position","getCurrentModels","slice","ButtonGroup","onClick","prev","ceil","style","left","right","ModelOptions","name","push","pathname","nft","fov","cameraProps","shadows","intensity","ambientLightProps","pointLightProps","castShadow","decay","shadowMapSize","maxPolarAngle","minPolarAngle","controlsProps","maxDistance","minDistance","target","enableKeys","fallback","Loader","item","index","Model","data","setModel","animations","nodes","glTFPosition","z","StyledMain","theme","textSubtle","StyledPage","StaticsPane","isStaticsPaneOpen","PoolTour3D","location","useLocation","gladiatorNftContract","useGladiatorNft","id","useParams","account","useWeb3React","useTranslation","t","localStorage","getItem","curColor","setCurColor","setColors","showStatics","setCurrentColor","col","setItem","temp","JSON","stringify","setCurrentName","nftHashes","settingNFTHashes","settingUserNFTHashes","userNftHashes","settingSchoolNFTHashes","schoolNftHashes","myGladiators","setMyGladiators","setUsersGladiators","schoolGladiators","setSchoolGladiators","getNftHash","a","newNftHashes","newUserNftHashes","newSchoolNftHashes","getUserGladiator","userInfo","_hex","toString","parseInt","getSpecificGladiators","response","newRes","gla","ipfsJson","tokenId","console","log","Statics"],"mappings":"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","file":"static/js/59.7943f53c.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { extend, useThree, ReactThreeFiber } from '@react-three/fiber';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace JSX {\n    interface IntrinsicElements {\n      orbitControls: ReactThreeFiber.Object3DNode<\n        OrbitControls,\n        typeof OrbitControls\n      >;\n    }\n  }\n}\n\nextend({ OrbitControls });\n\nconst Controls: (props: any) => JSX.Element = (props) => {\n  const { camera, gl, invalidate } = useThree();\n  const ref = useRef<OrbitControls | undefined>(undefined);\n\n  useEffect(() => {\n    ref.current?.update();\n    ref.current?.addEventListener('change', invalidate);\n  });\n\n  return <orbitControls ref={ref} args={[camera, gl.domElement]} {...props} />;\n};\n\nexport default Controls;\n","import React, { Suspense, useEffect, useState } from 'react'\nimport { Canvas, useLoader } from '@react-three/fiber'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport * as THREE from 'three'\nimport styled from 'styled-components'\nimport { ambientLightProps, cameraProps, controlsProps, pointLightProps } from 'views/Configurator/utils/constant'\nimport buttonBg from '../assets/imgs/buttons-bg.png'\n\nimport Controls from './THREE/Controls'\nimport Model from './THREE/Model'\nimport Loader from './UI/Loader'\nimport axios from 'axios'\n\nimport useStore from '../store'\nimport { useHistory } from 'react-router-dom'\nimport { getAllGladiators } from '../../../state/nftMarket/helpers'\nconst StyledViewer = styled.div`\n  width: 100%;\n  height: 100%;\n  text-align: center;\n`\nconst StyledCanvasWrapper = styled.div`\n  height: calc(100vh - 80px);\n  position: relative;\n`\n\nconst StyledArrowButton = styled.button`\n  position: absolute;\n  background: url(/images/battles/blue.png);\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: center center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  outline: unset;\n  border: unset;\n  width: 170px;\n  height: 39px;\n  color: white;\n  top: 50%;\n  left: 10%;\n  font-size: 20px;\n\n  @media (min-width: 320px) and (max-width: 480px) {\n    width: 100px;\n    height: 22px;\n    font-size: 14px;\n  }\n\n  &:hover {\n    opacity: 0.8;\n    cursor: pointer;\n  }\n`\n\nconst StyledModelOptionsWrapper = styled.div`\n  position: absolute;\n  transform: translate3d(-50%, 0, 0);\n  left: 50%;\n  bottom: 0;\n  width: 30vw;\n  height: 7vw;\n  background-color: #112233c7;\n  margin-left: auto;\n  margin-right: auto;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 0.5vw;\n  border-top-left-radius: 0.5vw;\n  border-top-right-radius: 0.5vw;\n`\n\nconst StyledModelName = styled.div`\n  color: white;\n  font-size: 25px;\n`\n\nconst StyledButtonsWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n`\n\nconst StyledOptionButton = styled.button`\n  background: url(/images/battles/blue.png);\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position: center center;\n  outline: unset;\n  border: unset;\n  width: 9vw;\n  height: 3vw;\n  padding: 5px 0px;\n  color: rgb(85, 34, 22);\n  font-size: 20px;\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  &:hover {\n    opacity: 0.8;\n    cursor: pointer;\n  }\n`\n\ntype ChildProps = {\n  curColor: string\n  setColor: (arg0: string) => void\n  curName: string\n  setCurName: (arg0: string) => void\n  curSpeed: any\n  curBack: any\n  colors: any\n  nftHash?: any | []\n}\n\nconst loadJSON = (path, hash) => {\n  return new Promise((resolve, reject) => {\n    var xhr = new XMLHttpRequest()\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          const data = JSON.parse(xhr.responseText)\n          resolve({ ...data, hash })\n        } else {\n          reject(xhr)\n        }\n      }\n    }\n    xhr.open('GET', path, true)\n    xhr.send()\n  })\n}\n\n// TOOD: Get my nft hash values\n// const nftHashs = localStorage.getItem('myNfts') ? JSON.parse( localStorage.getItem('myNfts') ): [];\n\n// var myData;\n\n// Promise.all( nftHashs.map(hash => loadJSON( `https://gateway.pinata.cloud/ipfs/${ hash }`, hash )) ).then(data => {\n//     myData = data;\n// });\n\nconst Viewer: React.FC<ChildProps> = ({ setColor, curName, setCurName, curSpeed, curBack, colors, nftHash }) => {\n  const [myData, setMyData] = useState<any | []>([])\n  const [myModels, setMyModels] = useState([])\n  const [currentPage, setCurrentPage] = useState(0)\n  const currentStatics = useStore((state) => state.currentStatics)\n  const currentHoverModel = useStore((state) => state.currentHoverModel)\n\n  const history = useHistory()\n\n  const { usersGladiators } = useStore((state) => state)\n  useEffect(() => {\n    if (usersGladiators) {\n      setMyData(usersGladiators)\n    }\n  }, [usersGladiators])\n\n  if (myData && myData.length > 0 && !myModels.length) {\n    for (let i = 0; i < myData.length; i++) {\n      myData[i].model = useLoader(GLTFLoader, myData[i].glTFPath)\n    }\n    // console.log(\"myDataaaaaaaaaaaaaaaaaa\", myData)\n    setMyModels(myData)\n  }\n\n  const Dome = () => {\n    const texture = useLoader(THREE.TextureLoader, `/images/gallery/${curBack || 'arena1'}.jpg`)\n    return (\n      <mesh>\n        <sphereBufferGeometry attach=\"geometry\" args={[50, 100, 100]} />\n        <meshBasicMaterial attach=\"material\" map={texture} side={THREE.BackSide} />\n      </mesh>\n    )\n  }\n\n  const GroundPlane = () => {\n    const texture = useLoader(THREE.TextureLoader, '/images/gallery/textures/1.jpg')\n    texture.wrapS = THREE.RepeatWrapping\n    texture.wrapT = THREE.RepeatWrapping\n    texture.repeat.set(64, 64)\n    texture.anisotropy = 16\n\n    return (\n      <mesh receiveShadow rotation={[Math.PI / 2, 0, 0]} position={[0, -4, 0]}>\n        <planeBufferGeometry attach=\"geometry\" args={[500, 500]} />\n        <meshPhongMaterial attach=\"material\" map={texture} side={THREE.DoubleSide} />\n      </mesh>\n    )\n  }\n\n  const goPrevPage = () => {\n    if (currentPage <= 0) return\n\n    setCurrentPage((prev) => prev - 1)\n  }\n\n  const goNextPage = () => {\n    if (currentPage >= Math.ceil(myModels.length / 3) - 1) return\n\n    setCurrentPage((prev) => prev + 1)\n  }\n\n  const getCurrentModels = () => {\n    return myModels.slice(currentPage * 3, currentPage * 3 + 3)\n  }\n\n  const ButtonGroup = () => {\n    return (\n      <div>\n        {!(currentPage <= 0) && <StyledArrowButton onClick={() => goPrevPage()}>Previous</StyledArrowButton>}\n        {!(currentPage >= Math.ceil(myModels.length / 3) - 1) && (\n          <StyledArrowButton onClick={() => goNextPage()} style={{ left: 'unset', right: '10%' }}>\n            Next\n          </StyledArrowButton>\n        )}\n      </div>\n    )\n  }\n\n  const ModelOptions = () => {\n    const goToBattle = () => {\n      // console.log(\"currentStaticscurrentStatics\", currentStatics)\n      if (currentStatics?.name) {\n        history.push({\n          pathname: '/battles/join',\n          state: {\n            nft: currentStatics,\n          },\n        })\n      }\n    }\n\n    return (\n      <StyledModelOptionsWrapper>\n        <StyledModelName>\n          {currentHoverModel ? currentHoverModel.name : currentStatics?.name ? currentStatics.name : 'None selected'}\n        </StyledModelName>\n\n        <StyledButtonsWrapper>\n          <StyledOptionButton onClick={() => goToBattle()}>Go to Battle</StyledOptionButton>\n          <StyledOptionButton>Statistics</StyledOptionButton>\n          <StyledOptionButton>Sell</StyledOptionButton>\n        </StyledButtonsWrapper>\n      </StyledModelOptionsWrapper>\n    )\n  }\n\n  return (\n    <StyledViewer>\n      <StyledCanvasWrapper>\n        <Canvas camera={{ fov: cameraProps.fov, position: cameraProps.position }} shadows>\n          <fog attach=\"fog\" args={['white', 90, 150]} />\n          <ambientLight intensity={ambientLightProps.intensity} />\n          <pointLight\n            position={pointLightProps.position}\n            castShadow\n            decay={pointLightProps.decay}\n            shadow-mapSize-height={pointLightProps.shadowMapSize}\n            shadow-mapSize-width={pointLightProps.shadowMapSize}\n          />\n          <Controls\n            maxPolarAngle={Math.PI / 2}\n            minPolarAngle={controlsProps.minPolarAngle}\n            maxDistance={controlsProps.maxDistance}\n            minDistance={controlsProps.minDistance}\n            target={controlsProps.target}\n            enableKeys\n          />\n          <Dome />\n          <GroundPlane />\n          <Suspense fallback={<Loader />}>\n            {getCurrentModels().map((item, index) => (\n              <Model\n                key={item.name + index}\n                data={{\n                  setModel: () => true,\n                  setColor: () => true,\n                  setCurName: setCurName,\n                  curSpeed: curSpeed,\n                  animations: item.model.animations,\n                  nodes: item.model.nodes,\n                  colors: item.colors ? item.colors : colors,\n                  nft: item,\n                  position: {\n                    ...item.glTFPosition,\n                    z: item.glTFPosition.z + 6 * index - 2 * getCurrentModels().length,\n                  },\n                }}\n              />\n            ))}\n          </Suspense>\n        </Canvas>\n\n        <ButtonGroup />\n\n        <ModelOptions />\n      </StyledCanvasWrapper>\n    </StyledViewer>\n  )\n}\n\nexport default Viewer\n","import React, { useState, useEffect, useLayoutEffect } from 'react'\nimport styled from 'styled-components'\nimport { useParams, useLocation } from 'react-router-dom'\nimport { useTranslation } from 'contexts/Localization'\nimport UserViewer from './components/Viewer'\nimport MyGladiatorViewer from '../MyGladiators/components/Viewer'\nimport SchoolViewer from '../School/components/Viewer'\nimport Statics from './components/UI/Statics'\nimport useStore from './store'\nimport { useGladiatorNft } from 'hooks/useContract'\nimport { useWeb3React } from '@web3-react/core'\nimport { getSpecificGladiators } from '../../state/nftMarket/helpers'\n\nconst StyledHero = styled.div`\n  border-bottom: 2px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst StyledMain = styled.div`\n  display: flex;\n  align-items: center;\n  overflow: hidden;\n`\n\nconst StyledPage = styled.div`\n  text-align: center;\n`\n\nconst StaticsPane = styled.div<{ isStaticsPaneOpen: boolean }>`\n  flex: none;\n  overflow: hidden;\n  transition: width 200ms ease-in-out;\n  width: ${({ isStaticsPaneOpen }) => (isStaticsPaneOpen ? '384px' : 0)};\n  position: absolute;\n  right: 0;\n`\n\nconst PoolTour3D = () => {\n  const location = useLocation()\n  const gladiatorNftContract = useGladiatorNft()\n  const { id }: { id: string } = useParams()\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const [curColor, setCurColor] = useState(\n    localStorage.getItem('con_curColor') ? localStorage.getItem('con_curColor') : '#ffffff',\n  )\n  const [curName, setCurName] = useState(\n    localStorage.getItem('con_curName') ? localStorage.getItem('con_curName') : 'None selected.',\n  )\n  const [curSpeed, setCurSpeed] = useState(\n    localStorage.getItem('con_curSpeed') ? localStorage.getItem('con_curSpeed') : 1,\n  )\n  const [curBack, setCurBack] = useState(localStorage.getItem('con_curBack') ? localStorage.getItem('con_curBack') : 0)\n  const [colors, setColors] = useState({})\n\n  const showStatics = useStore((state) => state.showStatics)\n\n  const setCurrentColor = (col) => {\n    setCurColor(col)\n    localStorage.setItem('con_curColor', col)\n\n    const temp = { ...colors }\n    temp[curName] = col\n    setColors(temp)\n    localStorage.setItem('con_colors', JSON.stringify(colors))\n  }\n\n  const setCurrentSpeed = (speed) => {\n    setCurSpeed(speed)\n    localStorage.setItem('con_curSpeed', speed)\n  }\n\n  const setCurrentName = (name) => {\n    setCurName(name)\n    setCurColor(colors[name] ? colors[name] : '#ffffff')\n\n    localStorage.setItem('con_curName', name)\n  }\n\n  const setCurrentBack = (back) => {\n    setCurBack(back)\n    localStorage.setItem('con_curBack', back)\n  }\n\n  const resetSetting = () => {\n    setCurColor('#ffffff')\n    setColors({})\n    setCurSpeed(1)\n    setCurName('None selected.')\n    setCurBack(0)\n\n    localStorage.setItem('con_curColor', '#ffffff')\n    localStorage.setItem('con_colors', JSON.stringify({}))\n    localStorage.setItem('con_curSpeed', '1')\n    localStorage.setItem('con_curName', 'None selected.')\n    localStorage.setItem('con_curBack', '0')\n  }\n\n  const {\n    nftHashes,\n    settingNFTHashes,\n    userNftHashes,\n    settingUserNFTHashes,\n    schoolNftHashes,\n    settingSchoolNFTHashes,\n    myGladiators,\n    setMyGladiators,\n    usersGladiators,\n    setUsersGladiators,\n    schoolGladiators,\n    setSchoolGladiators,\n  } = useStore((state) => state)\n\n  const getNftHash = async () => {\n    try {\n      // if (!nftHashes.length || !userNftHashes.length || !schoolNftHashes.length) {\n      const newNftHashes = []\n      const newUserNftHashes = []\n      const newSchoolNftHashes = []\n      const data = await gladiatorNftContract.getUserGladiator(account)\n\n      if (data.length !== nftHashes.length) {\n        for (let i = 0; i < data.length; i++) {\n          // console.log('newNftHashes', i)\n          const userInfo = await gladiatorNftContract.userInfo(account, data[i]._hex.toString())\n          newNftHashes.push(parseInt(data[i]._hex, 16))\n          if (userInfo['spot'] === 'user') {\n            // console.log('newUserNftHashes', i)\n            newUserNftHashes.push(parseInt(data[i]._hex, 16))\n          }\n          if (userInfo['spot'] === 'school') {\n            // console.log('newSchoolNftHashes', i)\n            newSchoolNftHashes.push(parseInt(data[i]._hex, 16))\n          }\n        }\n      }\n\n      settingNFTHashes(newNftHashes)\n      settingUserNFTHashes(newUserNftHashes)\n      settingSchoolNFTHashes(newSchoolNftHashes)\n      if (!myGladiators) {\n        const response = await getSpecificGladiators(JSON.stringify(newNftHashes))\n        const newRes = response.map(gla => {\n          const data = gla.ipfsJson.nft\n          return {\n            ...data,\n            tokenId: gla.tokenId\n          }\n        })\n\n        setMyGladiators(newRes)\n      }\n      if (!usersGladiators) {\n        const response = await getSpecificGladiators(JSON.stringify(newUserNftHashes))\n        const newRes = response.map(gla => {\n          const data = gla.ipfsJson.nft\n          return {\n            ...data,\n            tokenId: gla.tokenId\n          }\n        })\n\n        setUsersGladiators(newRes)\n      }\n      if (!schoolGladiators) {\n        const response = await getSpecificGladiators(JSON.stringify(newSchoolNftHashes))\n        const newRes = response.map(gla => {\n          const data = gla.ipfsJson.nft\n          return {\n            ...data,\n            tokenId: gla.tokenId\n          }\n        })\n        setSchoolGladiators(newRes)\n      }\n      // }\n      // }\n    } catch (error) {\n      console.log('errrrrrrrrrrrrrooooooooooooorrrrrrrrrrrrrrrr', error)\n    }\n  }\n  useEffect(() => {\n    getNftHash()\n  }, [])\n  return (\n    <StyledPage>\n      <StyledMain>\n        {location.pathname === \"/mygladiators\" &&\n          <MyGladiatorViewer\n            curColor={curColor}\n            setColor={(col) => setCurrentColor(col)}\n            curName={curName}\n            setCurName={(name) => setCurrentName(name)}\n            curSpeed={curSpeed}\n            curBack={id}\n            colors={colors}\n            nftHash={nftHashes || []}\n          />\n        }\n        {location.pathname === \"/school\" &&\n          <SchoolViewer\n            curColor={curColor}\n            setColor={(col) => setCurrentColor(col)}\n            curName={curName}\n            setCurName={(name) => setCurrentName(name)}\n            curSpeed={curSpeed}\n            curBack={id}\n            colors={colors}\n            nftHash={nftHashes || []}\n          />\n        }\n        {\n          location.pathname === \"/tour/arena1\" &&\n          <UserViewer\n            curColor={curColor}\n            setColor={(col) => setCurrentColor(col)}\n            curName={curName}\n            setCurName={(name) => setCurrentName(name)}\n            curSpeed={curSpeed}\n            curBack={id}\n            colors={colors}\n            nftHash={nftHashes || []}\n          />\n        }\n        {\n          location.pathname === \"/tour/arena2\" &&\n          <UserViewer\n            curColor={curColor}\n            setColor={(col) => setCurrentColor(col)}\n            curName={curName}\n            setCurName={(name) => setCurrentName(name)}\n            curSpeed={curSpeed}\n            curBack={id}\n            colors={colors}\n            nftHash={nftHashes || []}\n          />\n        }\n        {\n          location.pathname === \"/tour/arena3\" &&\n          <UserViewer\n            curColor={curColor}\n            setColor={(col) => setCurrentColor(col)}\n            curName={curName}\n            setCurName={(name) => setCurrentName(name)}\n            curSpeed={curSpeed}\n            curBack={id}\n            colors={colors}\n            nftHash={nftHashes || []}\n          />\n        }\n        <StaticsPane isStaticsPaneOpen={showStatics}>\n          <Statics />\n        </StaticsPane>\n      </StyledMain>\n    </StyledPage>\n  )\n}\n\nexport default PoolTour3D\n"],"sourceRoot":""}