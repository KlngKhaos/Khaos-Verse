{"version":3,"sources":["views/Nft/market/components/CollectibleCard/styles.tsx","views/Nft/market/hooks/useGetLowestPrice.ts","components/CollapsibleCard/index.tsx","views/Nft/market/Collection/Traits/styles.tsx","views/Nft/market/Collection/Traits/GladiatorCollectibleTraits.tsx","views/Nft/market/Collection/Traits/CollectionTraits.tsx","views/Nft/market/Collection/Traits/index.tsx"],"names":["BNBAmountLabel","amount","props","alignItems","width","mx","fontWeight","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","CostLabel","cost","bnbBusdPrice","priceInUsd","multiplyPriceByAmount","fontSize","color","MetaRow","title","children","justifyContent","maxWidth","ellipsis","StyledCollectibleCard","styled","Card","theme","mediaQueries","lg","LowestPriceMetaRow","lowestPrice","isFetching","t","useTranslation","height","getBunnyIdFromNft","nft","bunnyId","attributes","find","attr","traitType","value","toString","useGetLowestPriceFromBunnyId","useState","setIsFetching","setLowestPrice","useEffect","a","getNftsMarketData","otherId","isTradable","response","length","tokenMarketData","parseFloat","currentAskPrice","fetchLowestPrice","useGetLowestPriceFromNft","isGladiatorCollectible","collectionAddress","toLowerCase","gladiatorCollectiblesAddress","bunnyIdAttr","CollapsibleCard","initialOpenState","isOpen","setIsOpen","p","as","variant","scale","onClick","StyledSortButton","button","colors","secondary","TableWrapper","div","NftImage","Image","ClickableRow","tr","NftName","thumbnailSrc","name","src","mr","LowestPriceCell","GladiatorCollectiblesTraits","raritySort","setRaritySort","push","useHistory","useGetCollectionDistributionPB","distributionData","data","totalBunnyCount","total","isFetchingDistribution","sortedTokenList","useMemo","Object","keys","distributionKeys","values","map","token","index","tokenId","sort","tokenA","tokenB","tokenCount","textAlign","times","bunnyCnt","type","currentValue","count","percentage","nftsBaseUrl","image","thumbnail","formatNumber","CollectionTraits","useGetCollectionDistribution","sum","traitValues","reduce","accum","traitValue","rarity","sortType","capitalize","mb","prevRaritySort","orderBy","Traits","useParams","dispatch","useAppDispatch","collection","useGetCollection","fetchCollection","Header","Container","py"],"mappings":"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","file":"static/js/44.7a670cc2.chunk.js","sourcesContent":["import React, { ReactElement } from 'react'\nimport {\n  Card,\n  BinanceIcon,\n  Box,\n  BoxProps,\n  CameraIcon,\n  Flex,\n  FlexProps,\n  SellIcon,\n  Text,\n  WalletFilledIcon,\n  Skeleton,\n} from '@pancakeswap/uikit'\nimport { Price } from '@pancakeswap/sdk'\nimport { useTranslation } from 'contexts/Localization'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport styled from 'styled-components'\n\nexport const Footer: React.FC<BoxProps> = ({ children, ...props }) => (\n  <Box borderTop={[null, null, null, '1px solid']} borderColor=\"cardBorder\" pt=\"8px\" {...props}>\n    {children}\n  </Box>\n)\n\ninterface BNBAmountLabelProps extends FlexProps {\n  amount: number\n}\n\nexport const BNBAmountLabel: React.FC<BNBAmountLabelProps> = ({ amount, ...props }) => (\n  <Flex alignItems=\"center\" {...props}>\n    <BinanceIcon width=\"16px\" mx=\"4px\" />\n    <Text fontWeight=\"600\">\n      {amount.toLocaleString(undefined, {\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 5,\n      })}\n    </Text>\n  </Flex>\n)\n\ninterface CostLabelProps extends FlexProps {\n  cost: number\n  bnbBusdPrice: Price\n}\n\nexport const CostLabel: React.FC<CostLabelProps> = ({ cost, bnbBusdPrice, ...props }) => {\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, cost)\n\n  return (\n    <Flex alignItems=\"center\" {...props}>\n      {priceInUsd > 0 && (\n        <Text fontSize=\"12px\" color=\"textSubtle\">{`($${priceInUsd.toLocaleString(undefined, {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2,\n        })})`}</Text>\n      )}\n      <BNBAmountLabel amount={cost} />\n    </Flex>\n  )\n}\n\ninterface MetaRowProps extends FlexProps {\n  title: string\n}\n\nexport const MetaRow: React.FC<MetaRowProps> = ({ title, children, ...props }) => (\n  <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\n    <Text fontSize=\"12px\" color=\"textSubtle\" maxWidth=\"120px\" ellipsis title={title}>\n      {title}\n    </Text>\n    <Box>{children}</Box>\n  </Flex>\n)\n\nexport interface NftTagProps extends FlexProps {\n  icon?: ReactElement\n  color?: string\n}\n\nexport const NftTag: React.FC<NftTagProps> = ({ icon, color = 'text', children, ...props }) => (\n  <Flex display=\"inline-flex\" alignItems=\"center\" height=\"24px\" {...props}>\n    {icon}\n    <Text color={color} fontSize=\"14px\" fontWeight=\"600\">\n      {children}\n    </Text>\n  </Flex>\n)\n\nexport const ProfileNftTag: React.FC<NftTagProps> = (props) => {\n  const { t } = useTranslation()\n\n  return (\n    <NftTag icon={<CameraIcon mr=\"4px\" width=\"16px\" color=\"textSubtle\" />} color=\"textSubtle\" {...props}>\n      {t('Profile')}\n    </NftTag>\n  )\n}\n\nexport const WalletNftTag: React.FC<NftTagProps> = (props) => {\n  const { t } = useTranslation()\n\n  return (\n    <NftTag icon={<WalletFilledIcon mr=\"4px\" width=\"16px\" color=\"secondary\" />} color=\"secondary\" {...props}>\n      {t('Wallet')}\n    </NftTag>\n  )\n}\n\nexport const SellingNftTag: React.FC<NftTagProps> = (props) => {\n  const { t } = useTranslation()\n\n  return (\n    <NftTag icon={<SellIcon mr=\"4px\" width=\"16px\" color=\"failure\" />} color=\"failure\" {...props}>\n      {t('Selling')}\n    </NftTag>\n  )\n}\n\nexport const StyledCollectibleCard = styled(Card)`\n  border-radius: 8px;\n  max-width: 320px;\n  transition: opacity 200ms;\n\n  & > div {\n    border-radius: 8px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    &:hover {\n      cursor: pointer;\n      opacity: 0.6;\n    }\n  }\n`\ninterface LowestPriceMetaRowProps {\n  lowestPrice: number\n  isFetching: boolean\n  bnbBusdPrice: Price\n}\n\nexport const LowestPriceMetaRow = ({ lowestPrice, isFetching, bnbBusdPrice }: LowestPriceMetaRowProps) => {\n  const { t } = useTranslation()\n\n  if (!isFetching && !lowestPrice) {\n    return null\n  }\n\n  return (\n    <MetaRow title={t('Lowest price')}>\n      {isFetching ? (\n        <Skeleton height=\"24px\" width=\"30px\" />\n      ) : (\n        <CostLabel cost={lowestPrice} bnbBusdPrice={bnbBusdPrice} />\n      )}\n    </MetaRow>\n  )\n}\n","import { useEffect, useState } from 'react'\nimport { getNftsMarketData } from 'state/nftMarket/helpers'\nimport { NftToken } from 'state/nftMarket/types'\nimport { gladiatorCollectiblesAddress } from '../constants'\n\nexport interface LowestNftPrice {\n  isFetching: boolean\n  lowestPrice: number\n}\n\nconst getBunnyIdFromNft = (nft: NftToken): string => {\n  const bunnyId = nft.attributes?.find((attr) => attr.traitType === 'bunnyId')?.value\n  return bunnyId ? bunnyId.toString() : null\n}\n\nexport const useGetLowestPriceFromBunnyId = (bunnyId: string): LowestNftPrice => {\n  const [isFetching, setIsFetching] = useState<boolean>(false)\n  const [lowestPrice, setLowestPrice] = useState<number>(null)\n\n  useEffect(() => {\n    const fetchLowestPrice = async () => {\n      try {\n        setIsFetching(true)\n        const response = await getNftsMarketData({ otherId: bunnyId, isTradable: true }, 1, 'currentAskPrice', 'asc')\n\n        if (response.length > 0) {\n          const [tokenMarketData] = response\n          setLowestPrice(parseFloat(tokenMarketData.currentAskPrice))\n        }\n      } finally {\n        setIsFetching(false)\n      }\n    }\n\n    if (bunnyId) {\n      fetchLowestPrice()\n    }\n  }, [bunnyId])\n\n  return { isFetching, lowestPrice }\n}\n\nexport const useGetLowestPriceFromNft = (nft: NftToken): LowestNftPrice => {\n  const [isFetching, setIsFetching] = useState<boolean>(false)\n  const [lowestPrice, setLowestPrice] = useState<number>(null)\n  const isGladiatorCollectible = nft.collectionAddress?.toLowerCase() === gladiatorCollectiblesAddress.toLowerCase()\n\n  useEffect(() => {\n    const fetchLowestPrice = async () => {\n      const bunnyIdAttr = getBunnyIdFromNft(nft)\n      try {\n        setIsFetching(true)\n        const response = await getNftsMarketData(\n          { otherId: bunnyIdAttr, isTradable: true },\n          1,\n          'currentAskPrice',\n          'asc',\n        )\n\n        if (response.length > 0) {\n          const [tokenMarketData] = response\n          setLowestPrice(parseFloat(tokenMarketData.currentAskPrice))\n        }\n      } finally {\n        setIsFetching(false)\n      }\n    }\n\n    if (isGladiatorCollectible && nft) {\n      fetchLowestPrice()\n    }\n  }, [isGladiatorCollectible, nft])\n\n  return { isFetching, lowestPrice }\n}\n","import React, { useState } from 'react'\nimport {\n  CardProps,\n  CardHeader,\n  Card,\n  Flex,\n  Heading,\n  IconButton,\n  ChevronUpIcon,\n  ChevronDownIcon,\n} from '@pancakeswap/uikit'\n\ninterface CollapsibleCardProps extends CardProps {\n  initialOpenState?: boolean\n  title: string\n}\n\nconst CollapsibleCard: React.FC<CollapsibleCardProps> = ({ initialOpenState = true, title, children, ...props }) => {\n  const [isOpen, setIsOpen] = useState(initialOpenState)\n\n  const toggleOpen = () => setIsOpen(!isOpen)\n\n  return (\n    <Card {...props}>\n      <CardHeader p=\"16px\">\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Heading as=\"h3\">{title}</Heading>\n          <IconButton variant=\"text\" scale=\"sm\" onClick={toggleOpen}>\n            {isOpen ? <ChevronUpIcon width=\"24px\" /> : <ChevronDownIcon width=\"24px\" />}\n          </IconButton>\n        </Flex>\n      </CardHeader>\n      {isOpen && children}\n    </Card>\n  )\n}\n\nexport default CollapsibleCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Image, Text } from '@pancakeswap/uikit'\n\nexport const StyledSortButton = styled.button`\n  border: none;\n  cursor: pointer;\n  background: none;\n  color: ${({ theme }) => theme.colors.secondary};\n  font-weight: bold;\n`\n\nexport const TableWrapper = styled.div`\n  -webkit-overflow-scrolling: touch;\n  min-width: 320px;\n  overflow-x: auto;\n`\n\nexport const NftImage = styled(Image)`\n  flex: none;\n  & > img {\n    border-radius: 8px;\n  }\n`\n\nexport const ClickableRow = styled.tr`\n  cursor: pointer;\n\n  &:hover {\n    td {\n      opacity: 0.65;\n    }\n  }\n`\n\nexport const NftName: React.FC<{ thumbnailSrc: string; name: string }> = ({ thumbnailSrc, name }) => (\n  <Flex alignItems=\"center\">\n    <NftImage src={thumbnailSrc} width={48} height={48} mr=\"8px\" />\n    <Text>{name}</Text>\n  </Flex>\n)\n","import React, { useMemo, useState } from 'react'\nimport { Skeleton, Table, Td, Th, Flex, ArrowUpIcon, ArrowDownIcon } from '@pancakeswap/uikit'\nimport { useHistory } from 'react-router'\nimport times from 'lodash/times'\nimport { formatNumber } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport CollapsibleCard from 'components/CollapsibleCard'\nimport { useGetLowestPriceFromBunnyId } from '../../hooks/useGetLowestPrice'\nimport { BNBAmountLabel } from '../../components/CollectibleCard/styles'\nimport { nftsBaseUrl } from '../../constants'\nimport { SortType } from '../../types'\nimport { ClickableRow, NftName, StyledSortButton, TableWrapper } from './styles'\nimport { useGetCollectionDistributionPB } from '../../hooks/useGetCollectionDistribution'\n\ninterface GladiatorCollectiblesTraitsProps {\n  collectionAddress: string\n}\n\nconst LowestPriceCell: React.FC<{ bunnyId: string }> = ({ bunnyId }) => {\n  const { isFetching, lowestPrice } = useGetLowestPriceFromBunnyId(bunnyId)\n\n  if (isFetching) {\n    return (\n      <Flex justifyContent=\"flex-end\" width=\"100px\">\n        <Skeleton height=\"24px\" width=\"48px\" />\n      </Flex>\n    )\n  }\n\n  if (!lowestPrice) {\n    return null\n  }\n\n  return <BNBAmountLabel justifyContent=\"flex-end\" amount={lowestPrice} width=\"100px\" />\n}\n\nconst GladiatorCollectiblesTraits: React.FC<GladiatorCollectiblesTraitsProps> = ({ collectionAddress }) => {\n  const [raritySort, setRaritySort] = useState<SortType>('asc')\n  const { t } = useTranslation()\n  const { push } = useHistory()\n  const {\n    data: distributionData,\n    total: totalBunnyCount,\n    isFetching: isFetchingDistribution,\n  } = useGetCollectionDistributionPB()\n\n  const sortedTokenList = useMemo(() => {\n    if (!distributionData || !Object.keys(distributionData)) return []\n\n    const distributionKeys: string[] = Object.keys(distributionData)\n    const distributionValues: any[] = Object.values(distributionData)\n\n    return distributionValues\n      .map((token, index) => ({ ...token, tokenId: distributionKeys[index] }))\n      .sort((tokenA, tokenB) => {\n        return raritySort === 'asc' ? tokenA.tokenCount - tokenB.tokenCount : tokenB.tokenCount - tokenA.tokenCount\n      })\n  }, [raritySort, distributionData])\n\n  const toggleRaritySort = () => {\n    setRaritySort((currentValue) => (currentValue === 'asc' ? 'desc' : 'asc'))\n  }\n\n  return (\n    <>\n      {!isFetchingDistribution ? (\n        <CollapsibleCard title={t('Bunny Id')}>\n          <TableWrapper>\n            <Table>\n              <thead>\n                <tr>\n                  <Th textAlign=\"left\">{t('Name')}</Th>\n                  <Th>{t('Count')}</Th>\n                  <Th>\n                    <StyledSortButton type=\"button\" onClick={toggleRaritySort}>\n                      <Flex alignItems=\"center\">\n                        {t('Rarity')}\n                        {raritySort === 'asc' ? <ArrowUpIcon color=\"secondary\" /> : <ArrowDownIcon color=\"secondary\" />}\n                      </Flex>\n                    </StyledSortButton>\n                  </Th>\n                  <Th textAlign=\"right\">{t('Lowest')}</Th>\n                </tr>\n              </thead>\n              <tbody>\n                {sortedTokenList.map((token) => {\n                  const count: number = token.tokenCount\n                  const percentage = (count / totalBunnyCount) * 100\n                  const handleClick = () => {\n                    push(`${nftsBaseUrl}/collections/${collectionAddress}/${token.tokenId}`)\n                  }\n\n                  return (\n                    <ClickableRow key={token.tokenId} onClick={handleClick} title={t('Click to view NFT')}>\n                      <Td>\n                        <NftName thumbnailSrc={token.image.thumbnail} name={token.name} />\n                      </Td>\n                      <Td textAlign=\"center\">{formatNumber(count, 0, 0)}</Td>\n                      <Td textAlign=\"center\">{`${formatNumber(percentage, 0, 2)}%`}</Td>\n                      <Td textAlign=\"right\" width=\"100px\">\n                        <LowestPriceCell bunnyId={token.tokenId} />\n                      </Td>\n                    </ClickableRow>\n                  )\n                })}\n              </tbody>\n            </Table>\n          </TableWrapper>\n        </CollapsibleCard>\n      ) : (\n        <CollapsibleCard title={t('Loading...')}>\n          <Table>\n            <thead>\n              <tr>\n                <Th textAlign=\"left\">{t('Name')}</Th>\n                <Th>{t('Count')}</Th>\n                <Th>{t('Rarity')}</Th>\n                <Th>{t('Lowest')}</Th>\n              </tr>\n            </thead>\n            <tbody>\n              {times(19).map((bunnyCnt) => (\n                <tr key={bunnyCnt}>\n                  <Td>\n                    <Flex alignItems=\"center\">\n                      <Skeleton height=\"48px\" width=\"48px\" mr=\"8px\" />\n                      <Skeleton width=\"100px\" />\n                    </Flex>\n                  </Td>\n                  <Td>\n                    <Skeleton />\n                  </Td>\n                  <Td>\n                    <Skeleton />\n                  </Td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </CollapsibleCard>\n      )}\n    </>\n  )\n}\n\nexport default GladiatorCollectiblesTraits\n","import React, { useState } from 'react'\nimport times from 'lodash/times'\nimport capitalize from 'lodash/capitalize'\nimport sum from 'lodash/sum'\nimport orderBy from 'lodash/orderBy'\nimport { ArrowDownIcon, ArrowUpIcon, Flex, Skeleton, Table, Td, Th } from '@pancakeswap/uikit'\nimport { formatNumber } from 'utils/formatBalance'\nimport CollapsibleCard from 'components/CollapsibleCard'\nimport { useTranslation } from 'contexts/Localization'\nimport { SortType } from '../../types'\nimport { StyledSortButton, TableWrapper } from './styles'\nimport useGetCollectionDistribution from '../../hooks/useGetCollectionDistribution'\n\ninterface CollectionTraitsProps {\n  collectionAddress: string\n}\n\nconst CollectionTraits: React.FC<CollectionTraitsProps> = ({ collectionAddress }) => {\n  const { data, isFetching } = useGetCollectionDistribution(collectionAddress)\n  const [raritySort, setRaritySort] = useState<Record<string, SortType>>({})\n  const { t } = useTranslation()\n\n  if (isFetching) {\n    return (\n      <CollapsibleCard title={t('Loading...')}>\n        <Table>\n          <thead>\n            <tr>\n              <Th textAlign=\"left\">{t('Name')}</Th>\n              <Th width=\"100px\">{t('Count')}</Th>\n              <Th width=\"160px\">{t('Rarity')}</Th>\n            </tr>\n          </thead>\n          <tbody>\n            {times(19).map((bunnyCnt) => (\n              <tr key={bunnyCnt}>\n                <Td>\n                  <Skeleton width=\"100px\" />\n                </Td>\n                <Td>\n                  <Skeleton />\n                </Td>\n                <Td>\n                  <Skeleton />\n                </Td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </CollapsibleCard>\n    )\n  }\n\n  return (\n    <>\n      {data &&\n        Object.keys(data).map((traitType, index) => {\n          const total = sum(Object.values(data[traitType]))\n\n          // Parse the distribution values into an array to make it easier to sort\n          const traitValues: { value: string; count: number; rarity: number }[] = Object.keys(data[traitType]).reduce(\n            (accum, traitValue) => {\n              const count = data[traitType][traitValue]\n              const rarity = (count / total) * 100\n\n              return [...accum, { value: traitValue, count, rarity }]\n            },\n            [],\n          )\n          const sortType = raritySort[traitType] || 'desc'\n\n          const toggleRaritySort = () => {\n            setRaritySort((prevRaritySort) => {\n              if (!prevRaritySort[traitType]) {\n                return {\n                  ...prevRaritySort,\n                  [traitType]: 'asc',\n                }\n              }\n\n              return {\n                ...prevRaritySort,\n                [traitType]: prevRaritySort[traitType] === 'asc' ? 'desc' : 'asc',\n              }\n            })\n          }\n\n          return (\n            <CollapsibleCard key={traitType} title={capitalize(traitType)} initialOpenState={index <= 1} mb=\"32px\">\n              <TableWrapper>\n                <Table>\n                  <thead>\n                    <tr>\n                      <Th textAlign=\"left\">{t('Name')}</Th>\n                      <Th width=\"100px\">{t('Count')}</Th>\n                      <Th width=\"160px\">\n                        <StyledSortButton type=\"button\" onClick={toggleRaritySort}>\n                          <Flex alignItems=\"center\">\n                            {t('Rarity')}\n                            {raritySort[traitType] === 'asc' ? (\n                              <ArrowUpIcon color=\"secondary\" />\n                            ) : (\n                              <ArrowDownIcon color=\"secondary\" />\n                            )}\n                          </Flex>\n                        </StyledSortButton>\n                      </Th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {orderBy(traitValues, 'rarity', sortType).map(({ value, count, rarity }) => {\n                      return (\n                        <tr key={value}>\n                          <Td>{capitalize(value)}</Td>\n                          <Td textAlign=\"center\">{formatNumber(count, 0, 0)}</Td>\n                          <Td textAlign=\"center\">{`${formatNumber(rarity, 0, 2)}%`}</Td>\n                        </tr>\n                      )\n                    })}\n                  </tbody>\n                </Table>\n              </TableWrapper>\n            </CollapsibleCard>\n          )\n        })}\n    </>\n  )\n}\n\nexport default CollectionTraits\n","import React, { useEffect } from 'react'\nimport { useParams } from 'react-router'\nimport Container from 'components/Layout/Container'\nimport { useAppDispatch } from 'state'\nimport { useGetCollection } from 'state/nftMarket/hooks'\nimport { fetchCollection } from 'state/nftMarket/reducer'\nimport Header from '../Header'\nimport GladiatorCollectiblesTraits from './GladiatorCollectibleTraits'\nimport { gladiatorCollectiblesAddress } from '../../constants'\nimport CollectionTraits from './CollectionTraits'\n\nconst Traits = () => {\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\n  const dispatch = useAppDispatch()\n  const collection = useGetCollection(collectionAddress)\n\n  useEffect(() => {\n    if (collectionAddress) {\n      dispatch(fetchCollection(collectionAddress))\n    }\n  }, [collectionAddress, dispatch])\n\n  return (\n    <>\n      <Header collection={collection} />\n      <Container py=\"40px\">\n        {collectionAddress === gladiatorCollectiblesAddress ? (\n          <GladiatorCollectiblesTraits collectionAddress={collectionAddress} />\n        ) : (\n          <CollectionTraits collectionAddress={collectionAddress} />\n        )}\n      </Container>\n    </>\n  )\n}\n\nexport default Traits\n"],"sourceRoot":""}