{"version":3,"sources":["config/constants/gallery/gallery.ts","components/PageSection/svg/CurvedSvg.tsx","components/PageSection/CurvedDivider.tsx","components/PageSection/index.tsx","config/constants/gallery/types.ts","../node_modules/zustand/index.js","views/ArenaPools/components/PoolCard/StyledCard.tsx","views/ArenaPools/components/PoolCard/CardFooter/ExpandedFooter.tsx","views/ArenaPools/components/PoolCard/CardFooter/index.tsx","views/ArenaPools/components/CakeVaultCard/CakeVaultTokenPairImage.tsx","views/ArenaPools/components/PoolCard/StyledCardHeader.tsx","views/ArenaPools/components/PoolCard/StakeWithdrawModal.tsx","views/ArenaPools/components/PoolCard/index.tsx","views/ArenaPools/components/CakeVaultCard/index.tsx","views/ArenaPools/components/PoolsTable/Cells/BaseCell.tsx","views/ArenaPools/components/PoolsTable/Cells/NameCell.tsx","views/ArenaPools/hooks/useHarvestPool.ts","views/ArenaPools/hooks/useStakePool.ts","views/ArenaPools/components/PoolsTable/Cells/EarningsCell.tsx","views/ArenaPools/components/PoolsTable/Apr.tsx","views/ArenaPools/components/PoolsTable/Cells/AprCell.tsx","views/ArenaPools/components/PoolsTable/Cells/TotalStakedCell.tsx","views/ArenaPools/components/PoolsTable/Cells/EndsInCell.tsx","views/ArenaPools/components/PoolsTable/Cells/ExpandActionCell.tsx","views/ArenaPools/components/PoolsTable/ActionPanel/styles.ts","views/ArenaPools/components/PoolCard/Modals/NotEnoughTokensModal.tsx","views/ArenaPools/helpers.tsx","views/ArenaPools/components/PoolCard/Modals/PercentageButton.tsx","views/ArenaPools/components/PoolCard/Modals/StakeModal.tsx","views/ArenaPools/components/PoolsTable/ActionPanel/ActionPanel.tsx","views/ArenaPools/components/CakeVaultCard/VaultStakeModal.tsx","views/ArenaPools/components/PoolsTable/ActionPanel/Stake.tsx","views/ArenaPools/components/PoolsTable/Cells/AutoEarningsCell.tsx","views/ArenaPools/components/PoolsTable/Cells/AutoAprCell.tsx","views/ArenaPools/components/PoolsTable/PoolRow.tsx","views/ArenaPools/components/PoolsTable/PoolsTable.tsx","views/ArenaPools/components/FilterCard/AprApyFilter.tsx","views/ArenaPools/components/FilterCard/index.tsx","views/ArenaPools/components/StakeGladiatorCard.tsx","views/ArenaPools/index.tsx","views/PoolTour3D/store/index.js"],"names":["GalleryNfts","name","glTF","glTFPath","glTFScale","x","y","z","glTFAnimationIndex","glTFRotation","Math","PI","glTFPosition","glTFRootNode","bodyElements","Shield_Default_OBJ_0","Object_79","Object_80","Object_81","Object_82","description","rarity","supply","size","sizeMeasure","SizeMeasure","METER","weight","weightMeasure","WeightMeasure","LBS","initialLifeCycle","lifeCycle","LifeCycle","SLAVE","price","periodInMinutes","finalLifeCycle","GLADIATOR","token","NftToken","NRT","minTimeInSeconds","listingType","ListingType","CORE","orderBy","limitSupply","bestTerrain","staminaFillCoast","attributes","strength","endurance","agility","precision","intelligance","willpower","weapons","oneHand","twoHand","shield","ranged","dual","polearms","abilities","leadership","coach","cook","medical","smith","torture","Object_7","M_LRG_BlackKnightmo_Hat_Commando_BlackKnight_0","Object_176","default__0","Object_14","warrior_warrior_0","sword_warrior_0","shield_warrior_0","Plane008_0","sharedStyles","theme","clipPath","clipFill","css","isDark","dark","light","colors","background","ConcaveContainer","styled","Box","ConvexContainer","ConvexTop","width","height","id","clipPathUnits","d","ConvexBottom","ConcaveTop","ConcaveBottom","Wrapper","div","dividerFill","index","ComponentWrapper","CurvedDivider","dividerPosition","dividerComponent","concave","showConvexTop","showConvexBottom","showConcaveTop","showConcaveBottom","BackgroundColor","Flex","getPadding","ChildrenWrapper","Container","mediaQueries","sm","lg","PageSection","children","svgFill","hasCurvedDivider","concaveDivider","containerProps","innerProps","props","NftType","Object","defineProperty","exports","value","react","require","createStore","createState","state","listeners","Set","setState","partial","replace","nextState","_previousState","assign","forEach","listener","getState","api","subscribe","selector","equalityFn","is","console","warn","currentSlice","listenerToAdd","nextSlice","_previousSlice","add","delete","subscribeWithSelector","destroy","clear","useIsomorphicLayoutEffect","window","navigator","test","userAgent","useEffect","useLayoutEffect","useStore","newStateSlice","forceUpdate","useReducer","c","stateRef","useRef","selectorRef","equalityFnRef","erroredRef","currentSliceRef","undefined","current","hasNewStateSlice","stateBeforeSubscriptionRef","nextStateSlice","error","unsubscribe","sliceToReturn","useDebugValue","Symbol","iterator","items","next","done","length","shift","StyledCard","Card","isFinished","ExpandedWrapper","ExpandedFooter","pool","account","t","useTranslation","currentBlock","useBlock","useCakeVault","totalCakeInVault","performanceFee","fees","stakingToken","earningToken","totalStaked","startBlock","endBlock","stakingLimit","contractAddress","sousId","isAutoVault","tokenAddress","address","poolContractAddress","getAddress","cakeVaultContractAddress","getCakeVaultAddress","isMetaMaskInScope","ethereum","isMetaMask","isManualCakePool","getPoolBlockInfo","shouldShowBlockCountdown","blocksUntilStart","blocksRemaining","hasPoolStarted","blocksToDisplay","useTooltip","placement","targetRef","tooltip","tooltipVisible","symbol","totalStakedTargetRef","totalStakedTooltip","totalStakedTooltipVisible","flexDirection","mb","justifyContent","alignItems","small","gte","Balance","getBalanceNumber","decimals","manualCakeTotalMinusAutoVault","BigNumber","minus","getTotalStakedBalance","unit","ref","color","ml","mt","gt","getFullDisplayBalance","external","href","getBscScanLink","textTransform","bold","projectLink","BASE_BSC_SCAN_URL","variant","p","onClick","registerToken","fontSize","React","memo","ExpandableButtonWrapper","ExpandableText","Footer","useState","isExpanded","setIsExpanded","manualTooltipText","autoTooltipText","expanded","CakeVaultTokenPairImage","primaryTokenSrc","mainnetTokens","dena","primarySrc","secondarySrc","CardHeader","radii","card","StyledCardHeader","IconButton","circle","keyframes","arenaId","cardTextColor","isCakePool","scale","primaryToken","secondaryToken","CardFlip","Left","Right","NewModal","img","Modal","ConfirmModal","InnerCard","ButtonMargin","CardFront","StakeWithdrawModal","onDismiss","number","setNumber","log","image","setImage","show","setShow","room0","room1","room2","room3","tokenId","setTokenId","gladiatorNftContract","currentStatics","useGladiatorNft","useWeb3React","withdrawalStake","a","getUserGladiator","data","i","userInfo","_hex","toString","claim","spot","tokenIdCopy","push","parseInt","useModal","title","idOfGladiator","withdraw","getAllGladiators","gladiators","mygladiator","filter","g","ipfsJson","nft","getgladiators","viewBox","fill","xmlns","cx","cy","r","transform","src","alt","style","backgroundColor","NewStyledCard","ImageHeader","HarvestButton","Button","ClaimButton","PoolCard","reward","setReward","location","useLocation","room","roomId","String","stakeArenaPools","userData","arena","accountHasStakedBalance","stakedBalance","BIG_ZERO","rewards","totalAward","checkReward","ribbon","variantColor","text","isStaking","ConnectWalletButton","CardFooter","CardBody","isLoading","CakeVaultCard","showStakedOnly","userShares","isVaultUserDataLoading","pricePerFullShare","stakeArena","accountHasSharesStaked","convertSharesToCake","cakeAsBigNumber","isActive","tokens","BaseCell","Text","DEFAULT_GAS_LIMIT","md","ChevronDownIcon","toggled","input","xl","Link","shares","cakePerFullShare","decimalsToRound","sharePriceNumber","amountInCake","multipliedBy","cakeAsNumberBalance","getDecimalAmount","cakeAsDisplayBalance","expandAnimation","collapseAnimation","dropdown","disabled","cardBorder","FooterInner","AprApyFilter","handleAprApyFilter","minInputRef","maxInputRef","pt","px","Select","options","label","type","inputMode","pattern","placeholder","prev","FilterCardCard","NewCardHeader","NewHeading","Heading","ControlContainer","LabelWrapper","FilterContainer","FilterCard","handleChangeQuery","handleSortOptionChange","freshwaterOnly","setFreshwaterOnly","saltwaterOnly","setSaltwaterOnly","SearchInput","onChange","onOptionChange","cardAnimation","AnimatedCard","StakeGladiatorCard","GalleryNft","map","obj","previewImageSrc","textAlign","CardLayout","FlexLayout","StyledImage","Image","StyledHeader","PageHeader","NewPageSection","ArenaPools","useTheme","usePools","poolsWithoutAutoVault","pools","userDataLoaded","useUserPoolStakedOnly","stakedOnly","useUserPoolsViewMode","numberOfPoolsVisible","setNumberOfPoolsVisible","useIntersectionObserver","observerRef","isIntersecting","searchQuery","setSearchQuery","sortOption","setSortOption","chosenPoolsLength","cakeAtLastUserAction","accountHasVaultShares","performanceFeeAsDecimal","useMemo","cakePool","find","partition","finishedPools","openPools","stakedOnlyFinishedPools","isGreaterThan","stakedOnlyOpenPools","usePollFarmsPublicData","useFetchCakeVault","useFetchPublicPoolsData","useFetchUserPools","poolsCurrentlyVisible","chosenPools","pathname","includes","lowercaseQuery","latinise","toLowerCase","poolsToSort","apr","autoCompoundFrequency","getApy","getAprData","earningTokenPrice","hasAutoEarnings","autoCakeProfit","autoCakeToDisplay","autoUsdProfit","times","autoUsdToDisplay","getCakeVaultEarnings","pendingReward","toNumber","Number","NaN","isFinite","formatUnits","ethers","from","sub","sortPools","slice","cardLayout","as","my","margin","flex","minWidth","event","target","option","Loading","useCountStore","create","set","get","showStatics","updateShowStatics","updateCurrentStatics","currentHoverModel","updateCurrentHoverModel","myGladiators","setMyGladiators","schoolGladiators","setSchoolGladiators","usersGladiators","setUsersGladiators","userNftHashes","settingUserNFTHashes","schoolNftHashes","settingSchoolNFTHashes","nftHashes","settingNFTHashes","totalSupplies","setTotalSupplies"],"mappings":"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","file":"static/js/31.11451c8b.chunk.js","sourcesContent":["import { GalleryNft, SizeMeasure, WeightMeasure, LifeCycle, NftToken, ListingType } from './types'\n\nexport const IPFS_GATEWAY = 'https://cloudflare-ipfs.com'\n\n/**\n * NOTE: https://cloudflare-ipfs.com does not support video streaming so for the video URLS we need to use\n * https://gateway.pinata.cloud\n */\nconst GalleryNfts: GalleryNft[] = [\n  {\n    name: 'Fuse Warrior',\n    glTF: 'fuse_warrior',\n    glTFPath: '/gallery/fuse_warrior/scene.gltf',\n    glTFScale: {\n      x: 0.05,\n      y: 0.05,\n      z: 0.05\n    },\n    glTFAnimationIndex: 1,\n    glTFRotation: {\n      x: -Math.PI / 2,\n      y: Math.PI / 2,\n      z: Math.PI / 2\n    },\n    glTFPosition: {\n      x: 0,\n      y: -4,\n      z: 0\n    },\n    glTFRootNode: '_rootJoint',\n    bodyElements: {\n      Shield_Default_OBJ_0: '/gallery/fuse_warrior/elements/OBJ_0.png',\n      Object_79: '/gallery/fuse_warrior/elements/obj79.png',\n      Object_80: '/gallery/fuse_warrior/elements/obj80.png',\n      Object_81: '/gallery/fuse_warrior/elements/obj81.png',\n      Object_82: '/gallery/fuse_warrior/elements/obj82.png'\n    },\n    description: '',\n    rarity: 1,\n    supply: null,\n    size: 6.05,\n    sizeMeasure: SizeMeasure.METER,\n    weight: 2400,\n    weightMeasure: WeightMeasure.LBS,\n    initialLifeCycle: {\n      lifeCycle: LifeCycle.SLAVE,\n      price: 500,\n      periodInMinutes: 120\n    },\n    finalLifeCycle: {\n      lifeCycle: LifeCycle.GLADIATOR,\n      price: 1250\n    },\n    token: NftToken.NRT,\n    minTimeInSeconds: 7200,\n    listingType: ListingType.CORE,\n    orderBy: 0,\n    limitSupply: 2,\n    bestTerrain: 'Glacial',\n    staminaFillCoast: 150,\n    attributes: {\n      strength: 4,\n      endurance: 5,\n      agility: 10,\n      precision: 6,\n      intelligance: 7,\n      willpower: 8\n    },\n    weapons: {\n      oneHand: 9,\n      twoHand: 4,\n      shield: 5,\n      ranged: 10,\n      dual: 6,\n      polearms: 7\n    },\n    abilities: {\n      leadership: 8,\n      coach: 9,\n      cook: 4,\n      medical: 5,\n      smith: 10,\n      torture: 6\n    },\n  },\n  {\n    name: 'Ol Veteran',\n    glTF: 'ol_veteran',\n    glTFPath: '/gallery/ol_veteran/scene.gltf',\n    glTFScale: {\n      x: 0.05,\n      y: 0.05,\n      z: 0.05\n    },\n    glTFRotation: {\n      x: -Math.PI / 2,\n      y: Math.PI / 2,\n      z: Math.PI / 2\n    },\n    glTFPosition: {\n      x: 0,\n      y: -4,\n      z: 0\n    },\n    glTFRootNode: '_rootJoint',\n    bodyElements: {\n      Object_7: '/gallery/ol_veteran/elements/body.png'\n    },\n    description: '',\n    rarity: 1,\n    supply: null,\n    size: 6.05,\n    sizeMeasure: SizeMeasure.METER,\n    weight: 2400,\n    weightMeasure: WeightMeasure.LBS,\n    initialLifeCycle: {\n      lifeCycle: LifeCycle.SLAVE,\n      price: 500,\n      periodInMinutes: 120\n    },\n    finalLifeCycle: {\n      lifeCycle: LifeCycle.GLADIATOR,\n      price: 1250\n    },\n    token: NftToken.NRT,\n    minTimeInSeconds: 7200,\n    listingType: ListingType.CORE,\n    orderBy: 0,\n    limitSupply: 2,\n    bestTerrain: 'Glacial',\n    staminaFillCoast: 150,\n    attributes: {\n      strength: 4,\n      endurance: 5,\n      agility: 10,\n      precision: 6,\n      intelligance: 7,\n      willpower: 8\n    },\n    weapons: {\n      oneHand: 9,\n      twoHand: 4,\n      shield: 5,\n      ranged: 10,\n      dual: 6,\n      polearms: 7\n    },\n    abilities: {\n      leadership: 8,\n      coach: 9,\n      cook: 4,\n      medical: 5,\n      smith: 10,\n      torture: 6\n    },\n  },\n  {\n    name: 'Knight Battle',\n    glTF: 'knight_battle',\n    glTFPath: '/gallery/knight_battle/scene.gltf',\n    glTFScale: {\n      x: 0.06,\n      y: 0.06,\n      z: 0.06\n    },\n    glTFRotation: {\n      x: -Math.PI / 2,\n      y: 0,\n      z: Math.PI / 2\n    },\n    glTFPosition: {\n      x: 0,\n      y: -4,\n      z: 0\n    },\n    glTFRootNode: '_rootJoint',\n    bodyElements: {\n      M_LRG_BlackKnightmo_Hat_Commando_BlackKnight_0: '/gallery/knight_battle/elements/head.png',\n      Object_176: '/gallery/knight_battle/elements/body.png'\n    },\n    description: '',\n    rarity: 1,\n    supply: null,\n    size: 6.05,\n    sizeMeasure: SizeMeasure.METER,\n    weight: 2400,\n    weightMeasure: WeightMeasure.LBS,\n    initialLifeCycle: {\n      lifeCycle: LifeCycle.SLAVE,\n      price: 500,\n      periodInMinutes: 120\n    },\n    finalLifeCycle: {\n      lifeCycle: LifeCycle.GLADIATOR,\n      price: 1250\n    },\n    token: NftToken.NRT,\n    minTimeInSeconds: 7200,\n    listingType: ListingType.CORE,\n    orderBy: 0,\n    limitSupply: 2,\n    bestTerrain: 'Glacial',\n    staminaFillCoast: 150,\n    attributes: {\n      strength: 4,\n      endurance: 5,\n      agility: 10,\n      precision: 6,\n      intelligance: 7,\n      willpower: 8\n    },\n    weapons: {\n      oneHand: 9,\n      twoHand: 4,\n      shield: 5,\n      ranged: 10,\n      dual: 6,\n      polearms: 7\n    },\n    abilities: {\n      leadership: 8,\n      coach: 9,\n      cook: 4,\n      medical: 5,\n      smith: 10,\n      torture: 6\n    },\n  },\n  {\n    name: 'Gladiator Aware',\n    glTF: 'gladiator-aware',\n    glTFPath: '/gallery/gladiator-aware/scene.gltf',\n    glTFScale: {\n      x: 0.05,\n      y: 0.05,\n      z: 0.05\n    },\n    glTFRotation: {\n      x: -Math.PI / 2,\n      y: Math.PI / 2,\n      z: Math.PI / 2\n    },\n    glTFPosition: {\n      x: 0,\n      y: -4,\n      z: 0\n    },\n    glTFRootNode: '_rootJoint',\n    bodyElements: {\n      'Shield_Shield#Mat0_0': '/gallery/gladiator-aware/elements/shield.png',\n      'Weapon_Weapon#Mat0_0': '/gallery/gladiator-aware/elements/weapon.png',\n      'MHead_MHead#Mat0_0': '/gallery/gladiator-aware/elements/head.png',\n      'MArmor_MArmor#Mat0_0': '/gallery/gladiator-aware/elements/armor.png',\n      'MBody_MBody#Mat0_0': '/gallery/gladiator-aware/elements/arms.png',\n      'MBoots_MBoots#Mat0_0': '/gallery/gladiator-aware/elements/boots.png',\n      'MGauntlets_MGauntlets#Mat0_0': '/gallery/gladiator-aware/elements/gauntlets.png'\n    },\n    description: '',\n    rarity: 4,\n    supply: null,\n    size: 6.01,\n    sizeMeasure: SizeMeasure.METER,\n    weight: 2200,\n    weightMeasure: WeightMeasure.LBS,\n    initialLifeCycle: {\n      lifeCycle: LifeCycle.SLAVE,\n      price: 350,\n      periodInMinutes: 120\n    },\n    finalLifeCycle: {\n      lifeCycle: LifeCycle.GLADIATOR,\n      price: 875\n    },\n    token: NftToken.NRT,\n    minTimeInSeconds: 7200,\n    listingType: ListingType.CORE,\n    orderBy: 0,\n    limitSupply: 5,\n    bestTerrain: 'Glacial',\n    staminaFillCoast: 90,\n    attributes: {\n      strength: 7,\n      endurance: 8,\n      agility: 5,\n      precision: 10,\n      intelligance: 9,\n      willpower: 4\n    },\n    weapons: {\n      oneHand: 6,\n      twoHand: 7,\n      shield: 8,\n      ranged: 5,\n      dual: 10,\n      polearms: 9\n    },\n    abilities: {\n      leadership: 4,\n      coach: 6,\n      cook: 7,\n      medical: 8,\n      smith: 5,\n      torture: 10\n    },\n  },\n  {\n    name: 'Heimjil',\n    glTF: 'heimjil',\n    glTFPath: '/gallery/heimjil/scene.gltf',\n    glTFScale: {\n      x: 0.1,\n      y: 0.1,\n      z: 0.1\n    },\n    glTFRotation: {\n      x: -Math.PI / 2,\n      y: Math.PI / 2,\n      z: Math.PI / 2\n    },\n    glTFPosition: {\n      x: 0,\n      y: -4,\n      z: 0\n    }\n    , glTFRootNode: \"_rootJoint\"\n    , bodyElements: {\n      \"SK_Dual_Blade_Axe5_M_Dual_Blade_Axe5_0\": \"/gallery/heimjil/elements/weapon.png\",\n      \"6\": \"/gallery/heimjil/elements/armor.png\",\n      \"5\": \"/gallery/heimjil/elements/boots.png\",\n      \"0\": \"/gallery/heimjil/elements/body.png\",\n    }\n    , description: \"\"\n    , rarity: 3\n    , supply: null\n    , size: 6.15\n    , sizeMeasure: SizeMeasure.METER\n    , weight: 2300\n    , weightMeasure: WeightMeasure.LBS\n    , initialLifeCycle: {\n\n      lifeCycle: LifeCycle.SLAVE,\n      price: 100,\n      periodInMinutes: 120\n    },\n    finalLifeCycle: {\n      lifeCycle: LifeCycle.GLADIATOR,\n      price: 250\n    },\n    token: NftToken.NRT,\n    minTimeInSeconds: 7200,\n    listingType: ListingType.CORE,\n    orderBy: 0,\n    limitSupply: 8,\n    bestTerrain: 'Desert',\n    staminaFillCoast: 30,\n    attributes: {\n      strength: 10,\n      endurance: 9,\n      agility: 8,\n      precision: 7,\n      intelligance: 6,\n      willpower: 5\n    },\n    weapons: {\n      oneHand: 4,\n      twoHand: 10,\n      shield: 9,\n      ranged: 8,\n      dual: 7,\n      polearms: 6\n    },\n    abilities: {\n      leadership: 5,\n      coach: 4,\n      cook: 10,\n      medical: 9,\n      smith: 8,\n      torture: 7\n    },\n  },\n  {\n    name: 'Hero Warrior',\n    glTF: 'hero_warrior',\n    glTFPath: '/gallery/hero_warrior/scene.gltf',\n    glTFScale: {\n      x: 0.25,\n      y: 0.25,\n      z: 0.25\n    },\n    glTFRotation: {\n      x: -Math.PI / 2,\n      y: Math.PI / 2,\n      z: Math.PI / 2\n    },\n    glTFPosition: {\n      x: 0,\n      y: -4,\n      z: 0\n    },\n    glTFRootNode: '_rootJoint',\n    bodyElements: {\n      default__0: '/gallery/hero_warrior/elements/body.png'\n    },\n    description: '',\n    rarity: 3,\n    supply: null,\n    size: 6.09,\n    sizeMeasure: SizeMeasure.METER,\n    weight: 2100,\n    weightMeasure: WeightMeasure.LBS,\n    initialLifeCycle: {\n      lifeCycle: LifeCycle.SLAVE,\n      price: 400,\n      periodInMinutes: 120\n    },\n    finalLifeCycle: {\n      lifeCycle: LifeCycle.GLADIATOR,\n      price: 1000\n    },\n    token: NftToken.NRT,\n    minTimeInSeconds: 7200,\n    listingType: ListingType.CORE,\n    orderBy: 0,\n    limitSupply: 4,\n    bestTerrain: 'Mountains',\n    staminaFillCoast: 110,\n    attributes: {\n      strength: 6,\n      endurance: 7,\n      agility: 4,\n      precision: 5,\n      intelligance: 8,\n      willpower: 9\n    },\n    weapons: {\n      oneHand: 10,\n      twoHand: 6,\n      shield: 7,\n      ranged: 4,\n      dual: 5,\n      polearms: 8\n    },\n    abilities: {\n      leadership: 9,\n      coach: 10,\n      cook: 6,\n      medical: 7,\n      smith: 4,\n      torture: 5\n    },\n  },\n  {\n    name: 'Taunt Battlecry',\n    glTF: 'standing_taunt_battlecry',\n    glTFPath: '/gallery/standing_taunt_battlecry/scene.gltf',\n    glTFScale: {\n      x: 0.06,\n      y: 0.06,\n      z: 0.06\n    },\n    glTFRotation: {\n      x: -Math.PI / 2,\n      y: Math.PI / 2,\n      z: Math.PI / 2\n    },\n    glTFPosition: {\n      x: 0,\n      y: -4,\n      z: 0\n    },\n    glTFRootNode: '_rootJoint',\n    bodyElements: {\n      // Object_9: '/gallery/standing_taunt_battlecry/elements/obj9.png',\n      // Object_10: '/gallery/standing_taunt_battlecry/elements/obj10.png',\n      // Object_12: '/gallery/standing_taunt_battlecry/elements/obj12.png',\n      // Object_14: '/gallery/standing_taunt_battlecry/elements/obj14.png',\n      Object_14: '/gallery/standing_taunt_battlecry/elements/preview.png',\n    },\n    description: '',\n    rarity: 1,\n    supply: null,\n    size: 6.05,\n    sizeMeasure: SizeMeasure.METER,\n    weight: 2400,\n    weightMeasure: WeightMeasure.LBS,\n    initialLifeCycle: {\n      lifeCycle: LifeCycle.SLAVE,\n      price: 500,\n      periodInMinutes: 120\n    },\n    finalLifeCycle: {\n      lifeCycle: LifeCycle.GLADIATOR,\n      price: 1250\n    },\n    token: NftToken.NRT,\n    minTimeInSeconds: 7200,\n    listingType: ListingType.CORE,\n    orderBy: 0,\n    limitSupply: 2,\n    bestTerrain: 'Glacial',\n    staminaFillCoast: 150,\n    attributes: {\n      strength: 4,\n      endurance: 5,\n      agility: 10,\n      precision: 6,\n      intelligance: 7,\n      willpower: 8\n    },\n    weapons: {\n      oneHand: 9,\n      twoHand: 4,\n      shield: 5,\n      ranged: 10,\n      dual: 6,\n      polearms: 7\n    },\n    abilities: {\n      leadership: 8,\n      coach: 9,\n      cook: 4,\n      medical: 5,\n      smith: 10,\n      torture: 6\n    },\n  },\n  {\n    name: 'Fantasy Warrior',\n    glTF: 'fantasy_warrior',\n    glTFPath: '/gallery/fantasy_warrior/scene.gltf',\n    glTFScale: {\n      x: 4,\n      y: 4,\n      z: 4\n    },\n    glTFRotation: {\n      x: Math.PI / 2,\n      y: -Math.PI / 2,\n      z: Math.PI / 2\n    },\n    glTFPosition: {\n      x: 0,\n      y: -4,\n      z: 0\n    },\n    glTFRootNode: '_rootJoint',\n    bodyElements: {\n      warrior_warrior_0: '/gallery/fantasy_warrior/elements/body.png',\n      sword_warrior_0: '/gallery/fantasy_warrior/elements/weapon.png',\n      shield_warrior_0: '/gallery/fantasy_warrior/elements/shield.png'\n    },\n    description: '',\n    rarity: 6,\n    supply: null,\n    size: 6.14,\n    sizeMeasure: SizeMeasure.METER,\n    weight: 2700,\n    weightMeasure: WeightMeasure.LBS,\n    initialLifeCycle: {\n      lifeCycle: LifeCycle.SLAVE,\n      price: 200,\n      periodInMinutes: 120\n    },\n    finalLifeCycle: {\n      lifeCycle: LifeCycle.GLADIATOR,\n      price: 500,\n    },\n    token: NftToken.NRT,\n    minTimeInSeconds: 7200,\n    listingType: ListingType.CORE,\n    orderBy: 0,\n    limitSupply: 7,\n    bestTerrain: 'Mountain',\n    staminaFillCoast: 50,\n    attributes: {\n      strength: 9,\n      endurance: 10,\n      agility: 7,\n      precision: 8,\n      intelligance: 4,\n      willpower: 6\n    },\n    weapons: {\n      oneHand: 5,\n      twoHand: 9,\n      shield: 10,\n      ranged: 7,\n      dual: 8,\n      polearms: 4\n    },\n    abilities: {\n      leadership: 6,\n      coach: 5,\n      cook: 9,\n      medical: 10,\n      smith: 7,\n      torture: 8\n    },\n  },\n  {\n    name: 'Third Legion Legionnaire',\n    glTF: 'third_legion_legionnaire',\n    glTFPath: '/gallery/third_legion_legionnaire/scene.gltf',\n    glTFScale: {\n      x: 0.04,\n      y: 0.04,\n      z: 0.04\n    },\n    glTFRotation: {\n      x: -Math.PI / 2,\n      y: 0,\n      z: Math.PI / 3\n    },\n    glTFPosition: {\n      x: 0,\n      y: -4,\n      z: 0\n    },\n    glTFRootNode: '_rootJoint',\n    bodyElements: {\n      Plane008_0: '/gallery/third_legion_legionnaire/elements/body.png'\n    },\n    description: '',\n    rarity: 1,\n    supply: null,\n    size: 6.05,\n    sizeMeasure: SizeMeasure.METER,\n    weight: 2400,\n    weightMeasure: WeightMeasure.LBS,\n    initialLifeCycle: {\n      lifeCycle: LifeCycle.SLAVE,\n      price: 500,\n      periodInMinutes: 120\n    },\n    finalLifeCycle: {\n      lifeCycle: LifeCycle.GLADIATOR,\n      price: 1250\n    },\n    token: NftToken.NRT,\n    minTimeInSeconds: 7200,\n    listingType: ListingType.CORE,\n    orderBy: 0,\n    limitSupply: 2,\n    bestTerrain: 'Glacial',\n    staminaFillCoast: 150,\n    attributes: {\n      strength: 4,\n      endurance: 5,\n      agility: 10,\n      precision: 6,\n      intelligance: 7,\n      willpower: 8\n    },\n    weapons: {\n      oneHand: 9,\n      twoHand: 4,\n      shield: 5,\n      ranged: 10,\n      dual: 6,\n      polearms: 7\n    },\n    abilities: {\n      leadership: 8,\n      coach: 9,\n      cook: 4,\n      medical: 5,\n      smith: 10,\n      torture: 6\n    },\n  },\n]\n\nexport default GalleryNfts\n","import React from 'react'\nimport styled, { css, DefaultTheme } from 'styled-components'\nimport { Box } from '@pancakeswap/uikit'\nimport { ClipFill } from '../types'\n\ninterface CurveProps {\n  clipFill?: ClipFill\n}\n\ninterface ContainerProps extends CurveProps {\n  clipPath: string\n}\n\nconst sharedStyles = (theme: DefaultTheme, clipPath: string, clipFill?: ClipFill) => css`\n  width: 100%;\n  height: 20px;\n  clip-path: url(${clipPath});\n\n  background: ${() => {\n    if (theme.isDark) {\n      return clipFill?.dark || clipFill?.light || theme.colors.background\n    }\n    return clipFill?.light || theme.colors.background\n  }};\n\n  & svg {\n    display: block;\n  }\n`\n\nconst ConcaveContainer = styled(Box)<ContainerProps>`\n  ${({ theme, clipPath, clipFill }) => sharedStyles(theme, clipPath, clipFill)}\n  transform: ${({ clipPath }) => (clipPath === '#bottomConcaveCurve' ? 'translate(0, -13px)' : 'translate(0, 1px)')};\n`\n\nconst ConvexContainer = styled(Box)<ContainerProps>`\n  ${({ theme, clipPath, clipFill }) => sharedStyles(theme, clipPath, clipFill)}\n  transform: ${({ clipPath }) => (clipPath === '#bottomConvexCurve' ? 'translate(0, -13px)' : 'translate(0, -1px)')};\n`\n\nexport const ConvexTop: React.FC<CurveProps> = ({ clipFill }) => (\n  <ConvexContainer clipFill={clipFill} clipPath=\"#topConvexCurve\">\n    <svg width=\"0\" height=\"0\">\n      <defs>\n        <clipPath id=\"topConvexCurve\" clipPathUnits=\"objectBoundingBox\">\n          <path d=\"M 0,1 L 0,0 L 1,0 L 1,1 C 0.75 0, .25 0, 0 1 Z\" />\n        </clipPath>\n      </defs>\n    </svg>\n  </ConvexContainer>\n)\n\nexport const ConvexBottom: React.FC<CurveProps> = ({ clipFill }) => (\n  <ConvexContainer clipFill={clipFill} clipPath=\"#bottomConvexCurve\">\n    <svg width=\"0\" height=\"0\">\n      <defs>\n        <clipPath id=\"bottomConvexCurve\" clipPathUnits=\"objectBoundingBox\">\n          <path d=\"M 0,0 L 0,1 L 1,1 L 1,0 C .75 1, .25 1, 0 0 Z\" />\n        </clipPath>\n      </defs>\n    </svg>\n  </ConvexContainer>\n)\n\nexport const ConcaveTop: React.FC<CurveProps> = ({ clipFill }) => (\n  <ConcaveContainer clipFill={clipFill} clipPath=\"#topConcaveCurve\">\n    <svg width=\"0\" height=\"0\">\n      <defs>\n        <clipPath id=\"topConcaveCurve\" clipPathUnits=\"objectBoundingBox\">\n          <path d=\"M 0,0 L 0,1 L 1,1 L 1,0 C .75 1, .25 1, 0 0 Z\" />\n        </clipPath>\n      </defs>\n    </svg>\n  </ConcaveContainer>\n)\n\nexport const ConcaveBottom: React.FC<CurveProps> = ({ clipFill }) => (\n  <ConcaveContainer clipFill={clipFill} clipPath=\"#bottomConcaveCurve\">\n    <svg width=\"0\" height=\"0\">\n      <defs>\n        <clipPath id=\"bottomConcaveCurve\" clipPathUnits=\"objectBoundingBox\">\n          <path d=\"M 0,1 L 0,0 L 1,0 L 1,1 C .75 0.1, .25 0.1, 0 1 Z\" />\n        </clipPath>\n      </defs>\n    </svg>\n  </ConcaveContainer>\n)\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ConcaveTop, ConcaveBottom, ConvexTop, ConvexBottom } from './svg/CurvedSvg'\nimport { DividerFill, ClipFill } from './types'\n\ninterface CurvedDividerProps extends WrapperProps {\n  svgFill?: string\n  dividerComponent?: React.ReactNode\n  dividerPosition?: 'top' | 'bottom'\n  concave?: boolean\n  clipFill?: ClipFill\n}\ninterface WrapperProps {\n  index: number\n  dividerFill?: DividerFill\n}\n\nconst Wrapper = styled.div<WrapperProps>`\n  background: ${({ theme, dividerFill }) => {\n    if (theme.isDark) {\n      return dividerFill?.dark || dividerFill?.light || 'none'\n    }\n    return dividerFill?.light || dividerFill?.dark || 'none'\n  }};\n  z-index: ${({ index }) => index};\n  position: relative;\n  display: flex;\n  align-items: center;\n  width: 100%;\n`\n\nconst ComponentWrapper = styled.div<WrapperProps>`\n  z-index: ${({ index }) => index + 1};\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`\n\nconst CurvedDivider: React.FC<CurvedDividerProps> = ({\n  index,\n  dividerPosition,\n  dividerComponent,\n  concave,\n  clipFill,\n  dividerFill,\n}) => {\n  const showConvexTop = dividerPosition === 'top' && !concave\n  const showConvexBottom = dividerPosition === 'bottom' && !concave\n  const showConcaveTop = dividerPosition === 'top' && concave\n  const showConcaveBottom = dividerPosition === 'bottom' && concave\n\n  const getConcaveDivider = () => {\n    return (\n      <>\n        {showConcaveTop && <ConcaveTop clipFill={clipFill} />}\n        {showConcaveBottom && <ConcaveBottom clipFill={clipFill} />}\n      </>\n    )\n  }\n\n  const getConvexDivider = () => {\n    return (\n      <>\n        {showConvexTop && <ConvexTop clipFill={clipFill} />}\n        {showConvexBottom && <ConvexBottom clipFill={clipFill} />}\n      </>\n    )\n  }\n\n  return (\n    <Wrapper index={index} dividerFill={dividerFill}>\n      {dividerComponent && <ComponentWrapper index={index}>{dividerComponent}</ComponentWrapper>}\n      {getConcaveDivider()}\n      {getConvexDivider()}\n    </Wrapper>\n  )\n}\n\nexport default CurvedDivider\n","import React from 'react'\nimport styled from 'styled-components'\nimport { BoxProps, Box, Flex, FlexProps } from '@pancakeswap/uikit'\nimport Container from 'components/Layout/Container'\nimport CurvedDivider from './CurvedDivider'\nimport { ClipFill, DividerFill } from './types'\n\ninterface PageSectionProps extends BackgroundColorProps {\n  svgFill?: string\n  dividerComponent?: React.ReactNode\n  hasCurvedDivider?: boolean\n  dividerPosition?: 'top' | 'bottom'\n  concaveDivider?: boolean\n  containerProps?: BoxProps\n  innerProps?: BoxProps\n  clipFill?: ClipFill\n  dividerFill?: DividerFill\n}\n\ninterface BackgroundColorProps extends FlexProps {\n  index: number\n  background?: string\n  getPadding?: () => string\n}\n\nconst BackgroundColor = styled(Flex)<BackgroundColorProps>`\n  position: relative;\n  flex-direction: column;\n  align-items: center;\n  z-index: ${({ index }) => index - 1};\n  background: ${({ background, theme }) => background || theme.colors.background};\n  padding: ${({ getPadding }) => getPadding()};\n`\n\nconst ChildrenWrapper = styled(Container)`\n  min-height: auto;\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 48px;\n    padding-bottom: 48px;\n  }\n`\n\nconst PageSection: React.FC<PageSectionProps> = ({\n  children,\n  background,\n  svgFill,\n  index = 1,\n  dividerComponent,\n  dividerPosition = 'bottom',\n  hasCurvedDivider = true,\n  concaveDivider = false,\n  clipFill,\n  dividerFill,\n  containerProps,\n  innerProps,\n  ...props\n}) => {\n  const getPadding = () => {\n    // No curved divider\n    if (!hasCurvedDivider) {\n      return '48px 0'\n    }\n    // Bottom curved divider\n    // Less bottom padding, as the divider is present there\n    if (dividerPosition === 'bottom') {\n      return '48px 0 14px'\n    }\n    // Top curved divider\n    // Less top padding, as the divider is present there\n    if (dividerPosition === 'top') {\n      return '14px 0 48px'\n    }\n    return '48px 0'\n  }\n\n  return (\n    <Box {...containerProps}>\n      {hasCurvedDivider && dividerPosition === 'top' && (\n        <CurvedDivider\n          svgFill={svgFill}\n          index={index}\n          concave={concaveDivider}\n          dividerPosition={dividerPosition}\n          dividerComponent={dividerComponent}\n          clipFill={clipFill}\n          dividerFill={dividerFill}\n        />\n      )}\n      <BackgroundColor background={background} index={index} getPadding={getPadding} {...props}>\n        <ChildrenWrapper {...innerProps}>{children}</ChildrenWrapper>\n      </BackgroundColor>\n      {hasCurvedDivider && dividerPosition === 'bottom' && (\n        <CurvedDivider\n          svgFill={svgFill}\n          index={index}\n          concave={concaveDivider}\n          dividerPosition={dividerPosition}\n          dividerComponent={dividerComponent}\n          clipFill={clipFill}\n          dividerFill={dividerFill}\n        />\n      )}\n    </Box>\n  )\n}\n\nexport default PageSection\n","export enum SizeMeasure {\n  CM = \"centimeters\",\n  METER = \"meters\"\n}\n\nexport enum WeightMeasure {\n  GRAMS = \"grams\",\n  LBS = \"lbs\",\n  TONS = \"tons\",\n}\n\nexport enum LifeCycle {\n  SLAVE = \"slave\",\n  GLADIATOR = \"gladiator\"\n}\n\nexport type LifeCyclePricing = {\n  lifeCycle: LifeCycle,\n  price: number,\n  periodInMinutes?: number\n}\n\nexport enum NftToken {\n  NRT = \"NRT\",\n  DENA = \"DENA\",\n}\n\nexport enum ListingType {\n  CORE,\n  COMMUNITY,\n  PARTNER\n}\n\nexport interface GltfXyz {\n  x: number\n  y: number\n  z: number\n}\n\nexport type GalleryNft = {\n  name: string\n  orderBy: number\n  description: string\n  glTF: string\n  glTFRootNode?: string\n  glTFPath: string\n  glTFPosition?: GltfXyz\n  glTFScale?: GltfXyz\n  glTFRotation?: GltfXyz\n  glTFAnimationIndex?: number\n  bodyElements: any\n  rarity: number | string\n  supply: number | string\n  size: number | string\n  sizeMeasure: SizeMeasure\n  weight: number | string\n  weightMeasure: WeightMeasure\n  initialLifeCycle: LifeCyclePricing\n  finalLifeCycle: LifeCyclePricing\n  token: NftToken\n  minTimeInSeconds: number | string\n  inactive?: boolean\n  isPromoted?: boolean\n  listingType?: ListingType\n  userData?: {\n    allowance: string\n    tokenBalance: string\n    stakedBalance: string\n    earnings: string\n    ipfs: string\n  }\n  limitSupply: number\n  bestTerrain: string\n  staminaFillCoast: number\n  attributes?: {\n    strength: number\n    endurance: number\n    agility: number\n    precision: number\n    intelligance: number\n    willpower: number\n  }\n  weapons?: {\n    oneHand: number\n    twoHand: number\n    shield: number\n    ranged: number\n    dual: number\n    polearms: number\n  }\n  abilities?: {\n    leadership: number\n    coach: number\n    cook: number\n    medical: number\n    smith: number\n    torture: number\n  }\n}\n\nexport enum NftType {\n  PANCAKE = 'pancake',\n  MIXIE = 'mixie',\n}\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar react = require('react');\n\nfunction createStore(createState) {\n  var state;\n  var listeners = new Set();\n\n  var setState = function setState(partial, replace) {\n    var nextState = typeof partial === 'function' ? partial(state) : partial;\n\n    if (nextState !== state) {\n      var _previousState = state;\n      state = replace ? nextState : Object.assign({}, state, nextState);\n      listeners.forEach(function (listener) {\n        return listener(state, _previousState);\n      });\n    }\n  };\n\n  var getState = function getState() {\n    return state;\n  };\n\n  var subscribeWithSelector = function subscribeWithSelector(listener, selector, equalityFn) {\n    if (selector === void 0) {\n      selector = getState;\n    }\n\n    if (equalityFn === void 0) {\n      equalityFn = Object.is;\n    }\n\n    console.warn('[DEPRECATED] Please use `subscribeWithSelector` middleware');\n    var currentSlice = selector(state);\n\n    function listenerToAdd() {\n      var nextSlice = selector(state);\n\n      if (!equalityFn(currentSlice, nextSlice)) {\n        var _previousSlice = currentSlice;\n        listener(currentSlice = nextSlice, _previousSlice);\n      }\n    }\n\n    listeners.add(listenerToAdd);\n    return function () {\n      return listeners.delete(listenerToAdd);\n    };\n  };\n\n  var subscribe = function subscribe(listener, selector, equalityFn) {\n    if (selector || equalityFn) {\n      return subscribeWithSelector(listener, selector, equalityFn);\n    }\n\n    listeners.add(listener);\n    return function () {\n      return listeners.delete(listener);\n    };\n  };\n\n  var destroy = function destroy() {\n    return listeners.clear();\n  };\n\n  var api = {\n    setState: setState,\n    getState: getState,\n    subscribe: subscribe,\n    destroy: destroy\n  };\n  state = createState(setState, getState, api);\n  return api;\n}\n\nvar isSSR = typeof window === 'undefined' || !window.navigator || /ServerSideRendering|^Deno\\//.test(window.navigator.userAgent);\nvar useIsomorphicLayoutEffect = isSSR ? react.useEffect : react.useLayoutEffect;\n\nfunction create(createState) {\n  var api = typeof createState === 'function' ? createStore(createState) : createState;\n\n  var useStore = function useStore(selector, equalityFn) {\n    if (selector === void 0) {\n      selector = api.getState;\n    }\n\n    if (equalityFn === void 0) {\n      equalityFn = Object.is;\n    }\n\n    var _ref = react.useReducer(function (c) {\n      return c + 1;\n    }, 0),\n        forceUpdate = _ref[1];\n\n    var state = api.getState();\n    var stateRef = react.useRef(state);\n    var selectorRef = react.useRef(selector);\n    var equalityFnRef = react.useRef(equalityFn);\n    var erroredRef = react.useRef(false);\n    var currentSliceRef = react.useRef();\n\n    if (currentSliceRef.current === undefined) {\n      currentSliceRef.current = selector(state);\n    }\n\n    var newStateSlice;\n    var hasNewStateSlice = false;\n\n    if (stateRef.current !== state || selectorRef.current !== selector || equalityFnRef.current !== equalityFn || erroredRef.current) {\n      newStateSlice = selector(state);\n      hasNewStateSlice = !equalityFn(currentSliceRef.current, newStateSlice);\n    }\n\n    useIsomorphicLayoutEffect(function () {\n      if (hasNewStateSlice) {\n        currentSliceRef.current = newStateSlice;\n      }\n\n      stateRef.current = state;\n      selectorRef.current = selector;\n      equalityFnRef.current = equalityFn;\n      erroredRef.current = false;\n    });\n    var stateBeforeSubscriptionRef = react.useRef(state);\n    useIsomorphicLayoutEffect(function () {\n      var listener = function listener() {\n        try {\n          var nextState = api.getState();\n          var nextStateSlice = selectorRef.current(nextState);\n\n          if (!equalityFnRef.current(currentSliceRef.current, nextStateSlice)) {\n            stateRef.current = nextState;\n            currentSliceRef.current = nextStateSlice;\n            forceUpdate();\n          }\n        } catch (error) {\n          erroredRef.current = true;\n          forceUpdate();\n        }\n      };\n\n      var unsubscribe = api.subscribe(listener);\n\n      if (api.getState() !== stateBeforeSubscriptionRef.current) {\n        listener();\n      }\n\n      return unsubscribe;\n    }, []);\n    var sliceToReturn = hasNewStateSlice ? newStateSlice : currentSliceRef.current;\n    react.useDebugValue(sliceToReturn);\n    return sliceToReturn;\n  };\n\n  Object.assign(useStore, api);\n\n  useStore[Symbol.iterator] = function () {\n    console.warn('[useStore, api] = create() is deprecated and will be removed in v4');\n    var items = [useStore, api];\n    return {\n      next: function next() {\n        var done = items.length <= 0;\n        return {\n          value: items.shift(),\n          done: done\n        };\n      }\n    };\n  };\n\n  return useStore;\n}\n\nexports[\"default\"] = create;\n","import styled from 'styled-components'\nimport { Card } from '@pancakeswap/uikit'\n\nexport const StyledCard = styled(Card)<{ isFinished?: boolean }>`\n  max-width: 428px;\n  margin: 0 8px 24px;\n  display: flex;\n  flex-direction: column;\n  align-self: baseline;\n  position: relative;\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin: 0 12px 46px;\n  }\n`\n\nexport default StyledCard\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport {\n  Flex,\n  MetamaskIcon,\n  Text,\n  TooltipText,\n  LinkExternal,\n  TimerIcon,\n  Skeleton,\n  useTooltip,\n  Button,\n  Link,\n  HelpIcon,\n} from '@pancakeswap/uikit'\nimport { BASE_BSC_SCAN_URL } from 'config'\nimport { useBlock } from 'state/block/hooks'\nimport { useCakeVault } from 'state/pools/hooks'\nimport { DeserializedPool } from 'state/types'\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\nimport { registerToken } from 'utils/wallet'\nimport { getBscScanLink } from 'utils'\nimport Balance from 'components/Balance'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\n\ninterface ExpandedFooterProps {\n  pool: DeserializedPool\n  account: string\n}\n\nconst ExpandedWrapper = styled(Flex)`\n  svg {\n    height: 14px;\n    width: 14px;\n  }\n`\n\nconst ExpandedFooter: React.FC<ExpandedFooterProps> = ({ pool, account }) => {\n  const { t } = useTranslation()\n  const { currentBlock } = useBlock()\n  const {\n    totalCakeInVault,\n    fees: { performanceFee },\n  } = useCakeVault()\n\n  const {\n    stakingToken,\n    earningToken,\n    totalStaked,\n    startBlock,\n    endBlock,\n    stakingLimit,\n    contractAddress,\n    sousId,\n    isAutoVault,\n  } = pool\n\n  const tokenAddress = earningToken.address || ''\n  const poolContractAddress = getAddress(contractAddress)\n  const cakeVaultContractAddress = getCakeVaultAddress()\n  const isMetaMaskInScope = !!window.ethereum?.isMetaMask\n  const isManualCakePool = sousId === 0\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Subtracted automatically from each yield harvest and burned.'),\n    { placement: 'bottom-start' },\n  )\n\n  const getTotalStakedBalance = () => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }\n\n  const {\n    targetRef: totalStakedTargetRef,\n    tooltip: totalStakedTooltip,\n    tooltipVisible: totalStakedTooltipVisible,\n  } = useTooltip(t('Total amount of %symbol% staked in this pool', { symbol: stakingToken.symbol }), {\n    placement: 'bottom',\n  })\n\n  return (\n    <ExpandedWrapper flexDirection=\"column\">\n      <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Text small>{t('Total staked')}:</Text>\n        <Flex alignItems=\"flex-start\">\n          {totalStaked && totalStaked.gte(0) ? (\n            <>\n              <Balance small value={getTotalStakedBalance()} decimals={0} unit={` ${stakingToken.symbol}`} />\n              <span ref={totalStakedTargetRef}>\n                <HelpIcon color=\"textSubtle\" width=\"20px\" ml=\"6px\" mt=\"4px\" />\n              </span>\n            </>\n          ) : (\n            <Skeleton width=\"90px\" height=\"21px\" />\n          )}\n          {totalStakedTooltipVisible && totalStakedTooltip}\n        </Flex>\n      </Flex>\n      {stakingLimit && stakingLimit.gt(0) && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\">\n          <Text small>{t('Max. stake per user')}:</Text>\n          <Text small>{`${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${stakingToken.symbol}`}</Text>\n        </Flex>\n      )}\n      {shouldShowBlockCountdown && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Text small>{hasPoolStarted ? t('Ends in') : t('Starts in')}:</Text>\n          {blocksRemaining || blocksUntilStart ? (\n            <Flex alignItems=\"center\">\n              <Link external href={getBscScanLink(hasPoolStarted ? endBlock : startBlock, 'countdown')}>\n                <Balance small value={blocksToDisplay} decimals={0} color=\"primary\" />\n                <Text small ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\n                  {t('Blocks')}\n                </Text>\n                <TimerIcon ml=\"4px\" color=\"primary\" />\n              </Link>\n            </Flex>\n          ) : (\n            <Skeleton width=\"54px\" height=\"21px\" />\n          )}\n        </Flex>\n      )}\n      {isAutoVault && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          {tooltipVisible && tooltip}\n          <TooltipText ref={targetRef} small>\n            {t('Performance Fee')}\n          </TooltipText>\n          <Flex alignItems=\"center\">\n            {performanceFee ? (\n              <Text ml=\"4px\" small>\n                {performanceFee / 100}%\n              </Text>\n            ) : (\n              <Skeleton width=\"90px\" height=\"21px\" />\n            )}\n          </Flex>\n        </Flex>\n      )}\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\n        <LinkExternal href={`/info/token/${earningToken.address}`} bold={false} small>\n          {t('See Token Info')}\n        </LinkExternal>\n      </Flex>\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\n        <LinkExternal href={earningToken.projectLink} bold={false} small>\n          {t('View Project Site')}\n        </LinkExternal>\n      </Flex>\n      {poolContractAddress && (\n        <Flex mb=\"2px\" justifyContent=\"flex-end\">\n          <LinkExternal\n            href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\n            bold={false}\n            small\n          >\n            {t('View Contract')}\n          </LinkExternal>\n        </Flex>\n      )}\n      {account && isMetaMaskInScope && tokenAddress && (\n        <Flex justifyContent=\"flex-end\">\n          <Button\n            variant=\"text\"\n            p=\"0\"\n            height=\"auto\"\n            onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals)}\n          >\n            <Text color=\"primary\" fontSize=\"14px\">\n              {t('Add to Metamask')}\n            </Text>\n            <MetamaskIcon ml=\"4px\" />\n          </Button>\n        </Flex>\n      )}\n    </ExpandedWrapper>\n  )\n}\n\nexport default React.memo(ExpandedFooter)\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Flex, CardFooter, ExpandableLabel, HelpIcon, useTooltip } from '@pancakeswap/uikit'\nimport { DeserializedPool } from 'state/types'\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\nimport ExpandedFooter from './ExpandedFooter'\n\ninterface FooterProps {\n  pool: DeserializedPool\n  account: string\n  totalCakeInVault?: BigNumber\n}\n\nconst ExpandableButtonWrapper = styled(Flex)`\n  align-items: center;\n  justify-content: space-between;\n  button {\n    padding: 0;\n  }\n`\nconst ExpandableText = styled.div `\n  color:  #D9AB3A;\n`\n\nconst Footer: React.FC<FooterProps> = ({ pool, account }) => {\n  const { isAutoVault } = pool\n  const { t } = useTranslation()\n  const [isExpanded, setIsExpanded] = useState(false)\n\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\n  const autoTooltipText = t(\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\n    placement: 'bottom',\n  })\n\n  return (\n    <CardFooter>\n      <ExpandableButtonWrapper>\n        <Flex alignItems=\"center\">\n          {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\n          {tooltipVisible && tooltip}\n          <Flex ref={targetRef}>\n            <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\n          </Flex>\n        </Flex>\n        <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\n          <ExpandableText>{isExpanded ? t('Hide') : t('Details')}</ExpandableText>\n        </ExpandableLabel>\n      </ExpandableButtonWrapper>\n      {isExpanded && <ExpandedFooter pool={pool} account={account} />}\n    </CardFooter>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport { TokenPairImage, ImageProps } from '@pancakeswap/uikit'\nimport { mainnetTokens } from 'config/constants/tokens'\n\nconst CakeVaultTokenPairImage: React.FC<Omit<ImageProps, 'src'>> = (props) => {\n  const primaryTokenSrc = `/images/tokens/${mainnetTokens.dena.address}.svg`\n\n  return <TokenPairImage primarySrc={primaryTokenSrc} secondarySrc=\"/images/tokens/autorenew.svg\" {...props} />\n}\n\nexport default CakeVaultTokenPairImage\n","import React from 'react'\nimport { CardHeader, Heading, Text, Flex, IconButton, Link } from '@pancakeswap/uikit'\nimport { Token } from '@pancakeswap/sdk'\nimport styled, { keyframes } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { TokenPairImage } from 'components/TokenImage'\n// import { DeserializedPool } from 'state/types'\nimport CakeVaultTokenPairImage from '../CakeVaultCard/CakeVaultTokenPairImage'\n// import AprRow from './AprRow'\nimport View3DIcon from './Svg/View3DIcon'\n\nconst Wrapper = styled(CardHeader) <{ isFinished?: boolean; background?: string }>`\n  background: ${({ background }) => `url(${background})`} no-repeat;\n  -webkit-background-size: cover;\n  -moz-background-size: cover;\n  -o-background-size: cover;\n  background-size: cover;  \n  border-radius: ${({ theme }) => `${theme.radii.card} ${theme.radii.card} 0 0`};\n`\n\nconst flyingAnim = () => keyframes`\n  from {\n    transform: translate(0,  0px);\n  }\n  50% {\n    transform: translate(-3px, -3px);\n  }\n  to {\n    transform: translate(0, 0px);\n  }  \n`\n\nconst StyledIconButton = styled(IconButton)`\n  width: 64px;\n  height: 64px;\n  border-radius: ${({ theme }) => `${theme.radii.circle}`};\n  animation: ${flyingAnim} 3.5s ease-in-out infinite;\n  background: black;\n`\n\nconst StyledCardHeader: React.FC<{\n  earningToken: Token\n  stakingToken: Token\n  isAutoVault?: boolean\n  isFinished?: boolean\n  isStaking?: boolean\n  arenaId?: string\n  cardTextColor?: string\n}> = ({ earningToken, stakingToken, isFinished = false, isAutoVault = false, arenaId, cardTextColor }) => {\n  const { t } = useTranslation()\n  const isCakePool = earningToken.symbol === 'NRT' && stakingToken.symbol === 'NRT'\n  // const background = isStaking ? 'bubblegum' : 'cardHeader'\n\n  const getHeadingPrefix = () => {\n    if (isAutoVault) {\n      // vault\n      return t('Auto')\n    }\n    if (isCakePool) {\n      // manual cake\n      return t('Manual')\n    }\n    // all other pools\n    return t('Earn')\n  }\n\n  const getSubHeading = () => {\n    if (isAutoVault) {\n      return t('Automatic restaking')\n    }\n    if (isCakePool) {\n      return t('Earn DENA, stake DENA')\n    }\n    // console.log(stakingToken.symbol)\n    return t('Stake NRT',\n      // { symbol: stakingToken.symbol }\n    )\n  }\n\n  return (\n    <Wrapper isFinished={isFinished} background={`/images/gallery/${arenaId}-bg.jpg`}>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Flex flexDirection=\"column\">\n          <Heading color={cardTextColor} scale=\"lg\">\n            {`${getHeadingPrefix()} ${earningToken.symbol}`}\n          </Heading>\n          <Text color={cardTextColor}>{getSubHeading()}</Text>\n        </Flex>\n        {isAutoVault ? (\n          <CakeVaultTokenPairImage width={64} height={64} />\n        ) : (\n          <TokenPairImage primaryToken={earningToken} secondaryToken={stakingToken} width={64} height={64} />\n        )}\n      </Flex>\n      <Flex flexDirection=\"row-reverse\" >\n        <Link href={`/tour/${arenaId}`}>\n          {/* <StyledIconButton >\n            <View3DIcon />\n          </StyledIconButton> */}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default StyledCardHeader\n","import React, { useState, useEffect } from 'react'\nimport { CardBody, Flex, Text, CardRibbon, Button, useModal, Modal } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useGladiatorNft } from 'hooks/useContract'\nimport { useWeb3React } from '@web3-react/core'\nimport useStore from '../../../PoolTour3D/store'\nimport { getAllGladiators } from 'state/nftMarket/helpers'\nconst CardFlip = styled.div`\n  background-color: transparent;\n  width: 100%;\n  height: 400px;\n  perspective: 1000px;\n`\n\nconst Left = styled.div`\n  z-index: 4;\n  position: relative;\n  left: 1vh;\n  top: 13vh;\n  & svg:hover {\n    cursor: pointer;\n  }\n  @media (min-width: 320px) and (max-width: 480px) {\n    margin-bottom: 100px;\n  }\n`\n\nconst Right = styled.div`\n  z-index: 4;\n\n  position: relative;\n  left: 34.5vh;\n  top: 13vh;\n  & svg:hover {\n    cursor: pointer;\n  }\n  @media (min-width: 320px) and (max-width: 480px) {\n    margin-bottom: 100px;\n  }\n`\n\nconst Slider = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  width: 640px;\n  @media (min-width: 320px) and (max-width: 480px) {\n    width: 324px;\n  }\n`\nconst Slide = styled.img`\n  width: 640px;\n  margin-top: 50px;\n`\n\nconst SliderImage = styled.div`\n  background-image: url(images/decorations/BG.png);\n  border-radius: 24px;\n  border: 3px solid #d9ab3a;\n  width: 640px;\n  height: 440px;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n  @media (min-width: 320px) and (max-width: 480px) {\n    width: 324px;\n  }\n`\n\nconst NewModal = styled(Modal)`\n  height: 500px;\n  width: 420px;\n  overflow-x: hidden;\n`\n\nconst ConfirmModal = styled(Modal)`\n  height: 160px;\n  width: 420px;\n  overflow-x: hidden;\n`\n\nconst InnerCard = styled.div`\n  height: 100%;\n  position: relative;\n`\nconst ButtonMargin = styled.div`\n  margin-left: 10px;\n  position: relative;\n`\n\nconst CardFront = styled.div`\n  align-items: center;\n  backface-visibility: hidden;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  width: 100%;\n\n  & > div {\n    flex: 1;\n  }\n`\ninterface StakeWithdrawModalProps {\n  onDismiss?: () => void\n  id: number\n}\n\nconst StakeWithdrawModal : React.FC<StakeWithdrawModalProps> = ({onDismiss, id}) => {\n  \n  const [number, setNumber] = useState(0)\n  console.log(\"iddddddddddddddddddddd\",id)\n  const [image, setImage] = useState('')\n  const [show, setShow] = useState(true)\n  interface tokenIdI {\n    room0: any\n    room1: any\n    room2: any\n    room3: any\n  }\n  const initialState: tokenIdI = {\n    room0: [],\n    room1: [],\n    room2: [],\n    room3: [],\n  }\n  const [tokenId, setTokenId] = useState<tokenIdI>(initialState)\n  const { currentStatics } = useStore((state) => state)\n  const gladiatorNftContract = useGladiatorNft()\n  console.log('withdrawal', gladiatorNftContract)\n  const { account } = useWeb3React()\n  console.log('tokenIdtokenIdtokenId', tokenId)\n  const withdrawalStake = async () => {\n    // console.log('store', currentStatics)\n\n    const data = await gladiatorNftContract.getUserGladiator(account)\n    console.log('dataaaa', data)\n    for (let i = 0; i < data.length; i++) {\n      console.log('FUNCTION WORKING')\n      const userInfo = await gladiatorNftContract.userInfo(account, data[i]._hex.toString())\n      const claim = userInfo.spot\n      console.log('USER INFO===>', userInfo)\n      const tokenIdCopy = { ...tokenId }\n      if (claim === 'room0') {\n        tokenIdCopy.room0.push(parseInt(data[i]._hex.toString(), 16))\n      }\n      if (claim === 'room1') {\n        tokenIdCopy.room1.push(parseInt(data[i]._hex.toString(), 16))\n      }\n      if (claim === 'room2') {\n        tokenIdCopy.room2.push(parseInt(data[i]._hex.toString(), 16))\n      }\n      if (claim === 'room3') {\n        tokenIdCopy.room3.push(parseInt(data[i]._hex.toString(), 16))\n      }\n\n      setTokenId(tokenIdCopy)\n    }\n  }\n\n  // console.log(\"length\",tokenId.room0.length);\n  const claimGladiator = () => {\n    let idOfGladiator = tokenId[`room${id}`][number]\n    console.log(idOfGladiator)\n    gladiatorNftContract.withdraw(idOfGladiator)\n  }\n\n  const [claim] = useModal(\n    <ConfirmModal title=\"Confirm Withdraw\">\n      <InnerCard>\n        <ButtonMargin>\n          <Button onClick={claimGladiator}>Yes</Button>\n          <Button onClick={onDismiss}>No</Button>\n        </ButtonMargin>\n      </InnerCard>\n    </ConfirmModal>,\n  )\n\n  const rightClick = () => {\n    setShow(!show)\nsetNumber(number + 1)\n  }\n\n  const leftClick = () => {\n    setShow(!show)\n    \n    setNumber(number - 1)\n      }\n\n  useEffect(() => {\n    let idOfGladiator = tokenId[`room${id}`][number]\n    console.log('idOfGladiator', idOfGladiator)\n    const getgladiators = async () => {\n      let gladiators = await getAllGladiators()\n      let mygladiator = gladiators.filter((g: any) => g.tokenId == idOfGladiator)[0]?.ipfsJson?.nft?.glTF\n      setImage(`/gallery/${mygladiator}/preview.png`)\n      console.log('IMAGEE', image, gladiators)\n    }\n    getgladiators()\n  }, [tokenId,number])\n\n  useEffect(() => {\n    withdrawalStake()\n  }, [gladiatorNftContract, account])\n  return (\n  <NewModal title=\"Withdraw Gladiator\" onDismiss={onDismiss}>\n      {tokenId[`room${id}`][number - 1] && (\n        <Left onClick={leftClick}>\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"12\" cy=\"12\" r=\"12\" fill=\"#D9AB3A\" />\n            <path d=\"M8 12L14 6V18L8 12Z\" fill=\"black\" />\n          </svg>\n        </Left>\n      )}\n      {tokenId[`room${id}`][number +1] ?  (\n        <Right onClick={rightClick}>\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"12\" cy=\"12\" r=\"12\" transform=\"rotate(180 12 12)\" fill=\"#D9AB3A\" />\n            <path d=\"M16 12L10 18V6L16 12Z\" fill=\"black\" />\n          </svg>\n        </Right>): (\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"12\" cy=\"12\" r=\"12\" transform=\"rotate(180 12 12)\" fill=\"transparent\" />\n            <path d=\"M16 12L10 18V6L16 12Z\" fill=\"black\" />\n          </svg>\n        )\n      }\n      <CardFlip>\n        <InnerCard>\n          <CardFront>\n            <img src={image} alt=\"nft.name\" style={{ width: 'auto', height: '300px' }} />\n            {show ? <Button onClick={claim} variant=\"primary\" mt=\"24px\" style={{ backgroundColor: 'green' }}>\n              Claim Gladiator\n            </Button>: <Button onClick={claim} variant=\"primary\" mt=\"2px\" style={{ backgroundColor: 'green' }}>\n              Claim Gladiator\n            </Button>}\n          </CardFront>\n        </InnerCard>\n      </CardFlip>\n    </NewModal>\n  )\n}\n\nexport default StakeWithdrawModal\n","import BigNumber from 'bignumber.js'\nimport React,{useState} from 'react'\nimport styled from 'styled-components'\nimport { CardBody, Flex, Text, CardRibbon, Button, useModal, Modal } from '@pancakeswap/uikit'\nimport { CommunityTag, CoreTag, PartnerTag } from 'components/Tags'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { DeserializedPool } from 'state/types'\n// import AprRow from './AprRow'\nimport { StyledCard } from './StyledCard'\nimport CardFooter from './CardFooter'\nimport StyledCardHeader from './StyledCardHeader'\nimport CardActions from './CardActions'\nimport { useGladiatorNft } from 'hooks/useContract'\nimport { useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport useStore from '../../../PoolTour3D/store'\nimport StakeWithdrawModal from './StakeWithdrawModal'\nimport { useLocation } from 'react-router-dom'\n\nconst NewStyledCard = styled(StyledCard)`\n  min-width: 280px;\n  max-width: 31.5%;\n  width: 100%;\n  margin: 0 8px;\n  margin-bottom: 32px;\n`\nconst ImageHeader = styled.div`\n  background-color: #000;\n`\nconst HarvestButton = styled(Button)`\n  background-color: #D9AB3A;\n`\nconst ClaimButton = styled(Button)`\nbackground-color: white;\n  \n`\nconst NewModal = styled(Modal)`\n  height: 500px;\n  width: 420px;\n  overflow-x: hidden;\n`\nconst CardFlip = styled.div`\n  background-color: transparent;\n  width: 100%;\n  height: 400px;\n  perspective: 1000px;\n`\nconst CardFront = styled.div`\n  align-items: center;\n  backface-visibility: hidden;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  width: 100%;\n\n  & > div {\n    flex: 1;\n  }\n`\nconst InnerCard = styled.div`\n  height: 100%;\n  position: relative;\n`\n\nconst PoolCard: React.FC<{ pool: DeserializedPool; account: string; index: number; }> = ({ pool, account, index }) => {\n  console.log(\"iddddddddddddddddddddd\",index)\nconst [reward, setReward] = useState(0)\n   const [image, setImage] = useState('')\n  interface tokenIdI {\n    room0: any\n    room1: any\n    room2: any\n    room3: any\n  }\n  const initialState: tokenIdI = {\n    room0: [],\n    room1: [],\n    room2: [],\n    room3: [],\n  }\n  \n  const [tokenId, setTokenId] = useState<tokenIdI>(initialState)\nconst gladiatorNftContract = useGladiatorNft()\n\n  const withdrawalStake = async () => {\n\n    const data = await gladiatorNftContract.getUserGladiator(account)\n    console.log('dataaaa', data)\n    for (let i = 0; i < data.length; i++) {\n      console.log('FUNCTION WORKING')\n      const userInfo = await gladiatorNftContract.userInfo(account, data[i]._hex.toString())\n      const claim = userInfo.spot\n      const tokenIdCopy = { ...tokenId }\n      if (claim === 'room0') {\n        tokenIdCopy.room0.push(parseInt(data[i]._hex.toString(), 16))\n      }\n      if (claim === 'room1') {\n        tokenIdCopy.room1.push(parseInt(data[i]._hex.toString(), 16))\n      }\n      if (claim === 'room2') {\n        tokenIdCopy.room2.push(parseInt(data[i]._hex.toString(), 16))\n      }\n      if (claim === 'room3') {\n        tokenIdCopy.room3.push(parseInt(data[i]._hex.toString(), 16))\n      }\n\n      setTokenId(tokenIdCopy)\n    }\n  }\n  let idOfGladiator = tokenId[`room${index}`]\n  const location = useLocation()\n// console.log('location',location)\nlet room = `room${index}`\nlet roomId = String(room)\n// console.log(roomId);\n\n\n\n  const currentStatics = useStore((state) => state.currentStatics)\n  // console.log(\"tokenid\", currentStatics?.tokenId);\n// console.log(account);\n  // console.log(gladiatorNftContract, 'contract');\nconst stakeArenaPools = async () => {\n  // console.log('location',location)\n\n// console.log(roomId);\n\n  const data = await gladiatorNftContract.getUserGladiator(account)\n  // console.log(\"data\", data);\n  for (let i = 0; i < data.length; i++) {\n    const userInfo = await gladiatorNftContract.userInfo(account, data[i]._hex.toString())\n    const stakeArena = await gladiatorNftContract.stakeArenaPools(currentStatics?.tokenId, roomId )\n  }\n  try {\n  const stakeArena = await gladiatorNftContract.stakeArenaPools(currentStatics?.tokenId, roomId )\n  const data = await gladiatorNftContract.getUserGladiator(account)\n      for (let i = 0; i < data.length; i++) {\n        const userInfo = await gladiatorNftContract.userInfo(account, data[i]._hex.toString())\n        // console.log(\"userInfo\", userInfo);\n      }\n  } catch (error) {\n  }\n\n\n  }\n\n\n\nuseEffect(()=>{\n  if(location.state!=undefined)\n  console.log('useEffectttttt');\n  // stakeArenaPools()\n}, [gladiatorNftContract, account])\n\nuseEffect(()=>{\n  withdrawalStake()\n},[gladiatorNftContract, account])\n\n\n  const { sousId, stakingToken, earningToken, isFinished, userData, arena } = pool\n  const { t } = useTranslation()\n\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const accountHasStakedBalance = stakedBalance.gt(0)\n  const [show, setShow] = useState(false)\n  const [withdraw] = useModal(\n    <StakeWithdrawModal id={index} />\n  )\n\n\n  const rewards = async () => {\n    setReward(0)\n    let totalAward= 0;\n    let idOfGladiator = tokenId[`room${index}`]\n    for (let i = 0; i < idOfGladiator.length; i++) {\n  let checkReward =await gladiatorNftContract.checkReward(idOfGladiator[i])\n    checkReward = parseInt(checkReward._hex.toString(), 16)\n    totalAward=(totalAward+checkReward)/100000000000000000\n    setReward(totalAward)\n  console.log(\"rewardddddddddddd\", checkReward, `room${index}`);\n  console.log(\"rewardddddddddddd idddd\", idOfGladiator[i], tokenId);\n    }\n\n  }\n  \n  useEffect(()=> {\n     rewards()\n  }, [tokenId])\n\n\n  return (\n    <NewStyledCard\n      isFinished={isFinished && sousId !== 0}\n      ribbon={isFinished && <CardRibbon variantColor=\"textDisabled\" text={t('Finished')} />}\n    >\n      {/* <StyledCardHeader\n        isStaking={accountHasStakedBalance}\n        earningToken={earningToken}\n        stakingToken={stakingToken}\n        isFinished={isFinished && sousId !== 0}\n        arenaId={arena.id}\n        cardTextColor={arena.cardTextColor}\n      />\n      <CardBody>\n        <AprRow pool={pool} stakedBalance={stakedBalance} />\n        <Flex mt=\"24px\" flexDirection=\"column\">\n          {account ? (\n            <CardActions pool={pool} stakedBalance={stakedBalance} />\n          ) : (\n            <>\n              <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\n                {t('Start earning')}\n              </Text>\n              <ConnectWalletButton />\n            </>\n          )}\n        </Flex>\n      </CardBody> */}\n      {/* New Card Design */}\n      <ImageHeader>\n        <img src={`/images/decorations/${index}.png`} alt=\"BG\" />\n      </ImageHeader>\n      <StyledCardHeader\n        isStaking={accountHasStakedBalance}\n        earningToken={earningToken}\n        stakingToken={stakingToken}\n        isFinished={isFinished && sousId !== 0}\n        arenaId={arena.id}\n      // cardTextColor={arena.cardTextColor}\n      />\n      <CardBody>\n        {/* <Flex flexDirection=\"column\" justifyContent=\"end\" alignItems=\"end\">\n          <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"18px\" color=\"secondary\" bold>\n            ARENA - PYRAM LP\n          </Text>\n          <Flex flexDirection=\"row\">\n            <CoreTag />\n            <Tag ml=\"8px\" variant=\"secondary\">\n              <Text color=\"background\">\n                {t('64X')}\n              </Text>\n            </Tag>\n          </Flex>\n        </Flex> */}\n        <Flex justifyContent=\"space-between\">\n          <Text>{t('APR')}:</Text>\n          <Text>{reward}</Text>\n        </Flex>\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mt=\"5px\">\n          <Flex flexDirection=\"column\">\n            <Text color=\"secondary\" fontSize=\"12px\">{t('DENA EARNED')}</Text>\n            <Text>0</Text>\n            <Text color=\"secondary\" fontSize=\"12px\">{t('DENA-BNB LPdsd STAKED')}</Text>\n          </Flex>\n        { currentStatics?.tokenId && location.state!=undefined ?\n          <HarvestButton onClick={stakeArenaPools}>\n            <Text color=\"background\">\n              {t('Stake')}\n            </Text>\n          </HarvestButton> :\n          <ClaimButton onClick={withdraw}>\n            <Text color=\"background\">\n              {t('Claim')}\n            </Text>\n          </ClaimButton>}\n        </Flex>\n        <Flex justifyContent=\"center\" mt=\"24px\">\n          {!account && <ConnectWalletButton style={{ width: '100%' }}>\n            <Text color=\"background\">\n              {t('Connect Wallet')}\n            </Text>\n          </ConnectWalletButton>}\n        </Flex>\n      </CardBody>\n      <CardFooter pool={pool} account={account} />\n    </NewStyledCard>\n  )\n}\n\nexport default PoolCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, CardBody, Flex, Text, Button, useModal, Modal } from '@pancakeswap/uikit'\nimport { CommunityTag, CoreTag, PartnerTag } from 'components/Tags'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport tokens from 'config/constants/tokens'\nimport { useCakeVault } from 'state/pools/hooks'\nimport { DeserializedPool } from 'state/types'\nimport { convertSharesToCake } from 'views/Pools/helpers'\nimport AprRow from '../PoolCard/AprRow'\nimport { StyledCard } from '../PoolCard/StyledCard'\nimport CardFooter from '../PoolCard/CardFooter'\nimport StyledCardHeader from '../PoolCard/StyledCardHeader'\nimport VaultCardActions from './VaultCardActions'\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\nimport RecentCakeProfitRow from './RecentCakeProfitRow'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransactionToBuyJoinNft'\nimport { useNrt, useGladiatorEquipment } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { MaxUint256 } from '@ethersproject/constants'\nimport { parseUnits } from '@ethersproject/units'\nimport useToast from 'hooks/useToast'\nimport pinataSdk from '@pinata/sdk'\nimport useStore from \"../../../../views/PoolTour3D/store\"\nimport { useLocation } from 'react-router-dom'\nimport { useGladiatorNft } from 'hooks/useContract'\nimport { useEffect } from 'react'\nimport StakeWithdrawModal from '../PoolCard/StakeWithdrawModal'\nconst StyledCardBody = styled(CardBody) <{ isLoading: boolean }>`\n  min-height: ${({ isLoading }) => (isLoading ? '0' : '254px')};\n`\nconst NewStyledCard = styled(StyledCard)`\n  min-width: 280px;\n  max-width: 31.5%;\n  width: 100%;\n  margin: 0 8px;\n  margin-bottom: 32px;\n`\nconst ImageHeader = styled.div`\n  background-color: #000;\n`\nconst HarvestButton = styled(Button)`\n  background-color: #D9AB3A;\n`\nconst ClaimButton = styled(Button)`\nbackground-color: white;\n  \n`\nconst NewModal = styled(Modal)`\n  height: 500px;\n  width: 420px;\n  overflow-x: hidden;\n`\nconst CardFlip = styled.div`\n  background-color: transparent;\n  width: 100%;\n  height: 400px;\n  perspective: 1000px;\n`\nconst CardFront = styled.div`\n  align-items: center;\n  backface-visibility: hidden;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  width: 100%;\n\n  & > div {\n    flex: 1;\n  }\n`\nconst InnerCard = styled.div`\n  height: 100%;\n  position: relative;\n`\n\ninterface CakeVaultProps {\n  pool: DeserializedPool\n  showStakedOnly: boolean\n  index: any\n}\n\nconst CakeVaultCard: React.FC<CakeVaultProps> = ({ pool, showStakedOnly, index }) => {\n  // console.log(\"indexxxxx\", index)\n  const { currentStatics } = useStore(state => state)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    userData: { userShares, isLoading: isVaultUserDataLoading },\n    fees: { performanceFee },\n    pricePerFullShare,\n  } = useCakeVault()\n\n  const location = useLocation()\n  const gladiatorNftContract = useGladiatorNft()\n  let room = `room${index}`\n  let roomId = String(room)\n\n  const stakeArenaPools = async () => {\n    // console.log('location',location)\n  \n  // console.log(roomId);\n  \n    const data = await gladiatorNftContract.getUserGladiator(account)\n    // console.log(\"data\", data);\n    for (let i = 0; i < data.length; i++) {\n      const userInfo = await gladiatorNftContract.userInfo(account, data[i]._hex.toString())\n      console.log(\"userInfo\", userInfo);\n      const stakeArena = await gladiatorNftContract.stakeArenaPools(currentStatics?.tokenId, roomId )\n    console.log('roomz',stakeArena);\n    }\n    try {\n    const stakeArena = await gladiatorNftContract.stakeArenaPools(currentStatics?.tokenId, roomId )\n    console.log('room',stakeArena);\n    const data = await gladiatorNftContract.getUserGladiator(account)\n        for (let i = 0; i < data.length; i++) {\n          const userInfo = await gladiatorNftContract.userInfo(account, data[i]._hex.toString())\n          // console.log(\"userInfo\", userInfo);\n        }\n    } catch (error) {\n      // console.log(error, \"stake\");\n    }\n  \n  \n    }\n\n    useEffect(()=>{\n      if(location.state!=undefined)\n      console.log('useEffectttttt');\n      // stakeArenaPools()\n    }, [])\n\n    const [withdraw] = useModal(\n      <StakeWithdrawModal id={index} />\n    )\n    \n\n  const { cakeAsBigNumber } = convertSharesToCake(userShares, pricePerFullShare)\n\n  const accountHasSharesStaked = userShares && userShares.gt(0)\n  const isLoading = !pool.userData || isVaultUserDataLoading\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  if (showStakedOnly && !accountHasSharesStaked) {\n    return null\n  }\n\n\n  // const [withdraw] = useModal(\n  //   <NewModal title=\"Withdraw Gladiator\">\n  //     <CardFlip>\n  //       <InnerCard>\n  //         <CardFront>\n  //           <img src=\"/gallery/heimjil/preview.png\" alt=\"nft.name\" style={{ width: \"auto\", height: \"300px\" }} />\n  //           <Button variant=\"primary\" mt=\"15px\" style={{ backgroundColor: \"green\" }}>Claim Gladiator</Button>\n  //         </CardFront>\n  //       </InnerCard>\n  //     </CardFlip>\n  //   </NewModal>,\n  // )\n\n  return (\n    <NewStyledCard isActive>\n      {/* Previous Card Design */}\n      {/* <StyledCardHeader\n        isStaking={accountHasSharesStaked}\n        isAutoVault\n        earningToken={tokens.dena}\n        stakingToken={tokens.dena}\n      />\n      <StyledCardBody isLoading={isLoading}>\n        <AprRow pool={pool} stakedBalance={cakeAsBigNumber} performanceFee={performanceFeeAsDecimal} />\n        <Box mt=\"24px\">\n          <RecentCakeProfitRow />\n        </Box>\n        <Box mt=\"8px\">\n          <UnstakingFeeCountdownRow />\n        </Box>\n        <Flex mt=\"32px\" flexDirection=\"column\">\n          {account ? (\n            <VaultCardActions\n              pool={pool}\n              accountHasSharesStaked={accountHasSharesStaked}\n              isLoading={isLoading}\n              performanceFee={performanceFeeAsDecimal}\n            />\n          ) : (\n            <>\n              <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\n                {t('Start earning')}\n              </Text>\n              <ConnectWalletButton />\n            </>\n          )}\n        </Flex>\n      </StyledCardBody> */}\n      {/* New Card Design */}\n      <ImageHeader>\n        <img src=\"/images/decorations/5.png\" alt=\"BG\" />\n      </ImageHeader>\n      <StyledCardHeader\n        isStaking={accountHasSharesStaked}\n        isAutoVault\n        earningToken={tokens.dena}\n        stakingToken={tokens.dena}\n      />\n      <CardBody>\n        {/* <Flex flexDirection=\"column\" justifyContent=\"end\" alignItems=\"end\">\n          <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"18px\" color=\"secondary\" bold>\n            NRT - BNB LP\n          </Text>\n          <Flex flexDirection=\"row\">\n            <CoreTag />\n            <Tag ml=\"8px\" variant=\"secondary\">\n              <Text color=\"background\">\n                {t('64X')}\n              </Text>\n            </Tag>\n          </Flex>\n        </Flex> */}\n        <Flex justifyContent=\"space-between\">\n          <Text>{t('APR')}:</Text>\n          <Text>23.75%</Text>\n        </Flex>\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mt=\"5px\">\n          <Flex flexDirection=\"column\">\n            <Text color=\"secondary\" fontSize=\"12px\">{t('DENA EARNED')}</Text>\n            <Text>0</Text>\n            <Text color=\"secondary\" fontSize=\"12px\">{t('DENA-BNB LP STAKED')}</Text>\n          </Flex>\n          { currentStatics?.tokenId && location.state!=undefined ?\n          <HarvestButton onClick={stakeArenaPools}>\n            <Text color=\"background\">\n              {t('Stake')}\n            </Text>\n          </HarvestButton> : \n          <ClaimButton onClick={withdraw}>\n            <Text color=\"background\">\n              {t('Claim')}\n            </Text>\n          </ClaimButton>}\n        </Flex>\n        <Flex justifyContent=\"center\" mt=\"24px\">\n          {!account && <ConnectWalletButton style={{ width: '100%' }}>\n            <Text color=\"background\">\n              {t('Connect Wallet')}\n            </Text>\n          </ConnectWalletButton>}\n        </Flex>\n      </CardBody>\n      <CardFooter pool={pool} account={account} />\n    </NewStyledCard>\n  )\n}\n\nexport default CakeVaultCard\n","import { Flex, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst BaseCell = styled.div`\n  color: black;\n\n  padding: 24px 8px;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n`\n\nexport const CellContent = styled(Flex)`\n  flex-direction: column;\n  justify-content: center;\n  max-height: 40px;\n  ${Text} {\n    line-height: 1;\n  }\n`\n\nexport default BaseCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCakeVault } from 'state/pools/hooks'\nimport { DeserializedPool } from 'state/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { TokenPairImage } from 'components/TokenImage'\nimport CakeVaultTokenPairImage from '../../CakeVaultCard/CakeVaultTokenPairImage'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface NameCellProps {\n  pool: DeserializedPool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 5;\n  flex-direction: row;\n  padding-left: 12px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 150px;\n    padding-left: 32px;\n  }\n`\n\nconst NameCell: React.FC<NameCellProps> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n  const { sousId, stakingToken, earningToken, userData, isFinished, isAutoVault } = pool\n  const {\n    userData: { userShares },\n  } = useCakeVault()\n  const hasVaultShares = userShares && userShares.gt(0)\n\n  const stakingTokenSymbol = stakingToken.symbol\n  const earningTokenSymbol = earningToken.symbol\n\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const isStaked = stakedBalance.gt(0)\n  const isManualCakePool = sousId === 0\n\n  const showStakedTag = isAutoVault ? hasVaultShares : isStaked\n\n  let title = `${t('Earn')} ${earningTokenSymbol}`\n  let subtitle = `${t('Stake')} ${stakingTokenSymbol}`\n  const showSubtitle = sousId !== 0 || (sousId === 0 && !isMobile)\n\n  if (isAutoVault) {\n    title = t('Auto DENA')\n    subtitle = t('Automatic restaking')\n  } else if (isManualCakePool) {\n    title = t('Manual DENA')\n    subtitle = `${t('Earn')} DENA ${t('Stake').toLocaleLowerCase()} DENA`\n  }\n\n  return (\n    <StyledCell role=\"cell\">\n      {isAutoVault ? (\n        <CakeVaultTokenPairImage mr=\"8px\" width={40} height={40} />\n      ) : (\n        <TokenPairImage primaryToken={earningToken} secondaryToken={stakingToken} mr=\"8px\" width={40} height={40} />\n      )}\n      <CellContent>\n        {showStakedTag && (\n          <Text fontSize=\"12px\" bold color={isFinished ? 'failure' : 'secondary'} textTransform=\"uppercase\">\n            {t('Staked')}\n          </Text>\n        )}\n        <Text bold={!isMobile} small={isMobile}>\n          {title}\n        </Text>\n        {showSubtitle && (\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {subtitle}\n          </Text>\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default NameCell\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { harvestFarm } from 'utils/calls'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport getGasPrice from 'utils/getGasPrice'\nimport { useMasterchef, useSousChef } from 'hooks/useContract'\nimport { DEFAULT_GAS_LIMIT } from 'config'\n\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT,\n}\n\nconst harvestPool = async (sousChefContract) => {\n  const gasPrice = getGasPrice()\n  const tx = await sousChefContract.deposit('0', { ...options, gasPrice })\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nconst harvestPoolBnb = async (sousChefContract) => {\n  const gasPrice = getGasPrice()\n  const tx = await sousChefContract.deposit({ ...options, value: BIG_ZERO, gasPrice })\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nconst useHarvestPool = (sousId, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvestFarm(masterChefContract, 0)\n    } else if (isUsingBnb) {\n      await harvestPoolBnb(sousChefContract)\n    } else {\n      await harvestPool(sousChefContract)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n\nexport default useHarvestPool\n","import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stakeFarm } from 'utils/calls'\nimport BigNumber from 'bignumber.js'\nimport { DEFAULT_TOKEN_DECIMAL, DEFAULT_GAS_LIMIT } from 'config'\nimport { BIG_TEN } from 'utils/bigNumber'\nimport { useMasterchef, useSousChef } from 'hooks/useContract'\nimport getGasPrice from 'utils/getGasPrice'\n\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT,\n}\n\nconst sousStake = async (sousChefContract, amount, decimals = 18) => {\n  const gasPrice = getGasPrice()\n  const tx = await sousChefContract.deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString(), {\n    ...options,\n    gasPrice,\n  })\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nconst sousStakeBnb = async (sousChefContract, amount) => {\n  const gasPrice = getGasPrice()\n  const tx = await sousChefContract.deposit(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString(), {\n    ...options,\n    gasPrice,\n  })\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nconst useStakePool = (sousId: number, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        await stakeFarm(masterChefContract, 0, amount)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount)\n      } else {\n        await sousStake(sousChefContract, amount, decimals)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStakePool\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton, Text, Flex, Box, useModal, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { DeserializedPool } from 'state/types'\nimport BigNumber from 'bignumber.js'\nimport { PoolCategory } from 'config/constants/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport BaseCell, { CellContent } from './BaseCell'\nimport CollectModal from '../../PoolCard/Modals/CollectModal'\n\ninterface EarningsCellProps {\n  pool: DeserializedPool\n  account: string\n  userDataLoaded: boolean\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 4.5;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 120px;\n  }\n`\n\nconst EarningsCell: React.FC<EarningsCellProps> = ({ pool, account, userDataLoaded }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n  const { sousId, earningToken, poolCategory, userData, earningTokenPrice } = pool\n  const isManualCakePool = sousId === 0\n\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  const earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\n  const earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\n  const hasEarnings = account && earnings.gt(0)\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n\n  const labelText = t('%asset% Earned', { asset: earningToken.symbol })\n\n  const [onPresentCollect] = useModal(\n    <CollectModal\n      formattedBalance={formattedBalance}\n      fullBalance={fullBalance}\n      earningToken={earningToken}\n      earningsDollarValue={earningTokenDollarBalance}\n      sousId={sousId}\n      isBnbPool={isBnbPool}\n      isCompoundPool={isManualCakePool}\n    />,\n  )\n\n  const handleEarningsClick = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation()\n    onPresentCollect()\n  }\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {labelText}\n        </Text>\n        {!userDataLoaded && account ? (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        ) : (\n          <>\n            <Flex>\n              <Box mr=\"8px\" height=\"32px\" onClick={hasEarnings ? handleEarningsClick : undefined}>\n                <Balance\n                  mt=\"4px\"\n                  bold={!isMobile}\n                  fontSize={isMobile ? '14px' : '16px'}\n                  color={hasEarnings ? 'primary' : 'textDisabled'}\n                  decimals={hasEarnings ? 5 : 1}\n                  value={hasEarnings ? earningTokenBalance : 0}\n                />\n                {hasEarnings ? (\n                  <>\n                    {earningTokenPrice > 0 && (\n                      <Balance\n                        display=\"inline\"\n                        fontSize=\"12px\"\n                        color=\"textSubtle\"\n                        decimals={2}\n                        prefix=\"~\"\n                        value={earningTokenDollarBalance}\n                        unit=\" USD\"\n                      />\n                    )}\n                  </>\n                ) : (\n                  <Text mt=\"4px\" fontSize=\"12px\" color=\"textDisabled\">\n                    0 USD\n                  </Text>\n                )}\n              </Box>\n            </Flex>\n          </>\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default EarningsCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, useModal, CalculateIcon, Skeleton, FlexProps, Button } from '@pancakeswap/uikit'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport Balance from 'components/Balance'\nimport { DeserializedPool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getAprData } from 'views/Pools/helpers'\nimport BigNumber from 'bignumber.js'\nimport { BIG_ZERO } from 'utils/bigNumber'\n\nconst AprLabelContainer = styled(Flex)`\n  &:hover {\n    opacity: 0.5;\n  }\n`\n\ninterface AprProps extends FlexProps {\n  pool: DeserializedPool\n  stakedBalance: BigNumber\n  showIcon: boolean\n  performanceFee?: number\n}\n\nconst Apr: React.FC<AprProps> = ({ pool, showIcon, stakedBalance, performanceFee = 0, ...props }) => {\n  const { stakingToken, earningToken, isFinished, earningTokenPrice, stakingTokenPrice, userData, apr } = pool\n  const { t } = useTranslation()\n\n  const { apr: earningsPercentageToDisplay, autoCompoundFrequency } = getAprData(pool, performanceFee)\n\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  const apyModalLink = stakingToken.address ? `/swap?outputCurrency=${stakingToken.address}` : '/swap'\n\n  const [onPresentApyModal] = useModal(\n    <RoiCalculatorModal\n      earningTokenPrice={earningTokenPrice}\n      stakingTokenPrice={stakingTokenPrice}\n      stakingTokenBalance={stakedBalance.plus(stakingTokenBalance)}\n      apr={apr}\n      stakingTokenSymbol={stakingToken.symbol}\n      linkLabel={t('Get %symbol%', { symbol: stakingToken.symbol })}\n      linkHref={apyModalLink}\n      earningTokenSymbol={earningToken.symbol}\n      autoCompoundFrequency={autoCompoundFrequency}\n      performanceFee={performanceFee}\n    />,\n  )\n\n  const openRoiModal = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <AprLabelContainer alignItems=\"center\" justifyContent=\"space-between\" {...props}>\n      {earningsPercentageToDisplay || isFinished ? (\n        <>\n          <Balance\n            onClick={openRoiModal}\n            fontSize=\"16px\"\n            isDisabled={isFinished}\n            value={isFinished ? 0 : earningsPercentageToDisplay}\n            decimals={2}\n            unit=\"%\"\n          />\n          {!isFinished && showIcon && (\n            <Button onClick={openRoiModal} variant=\"text\" width=\"20px\" height=\"20px\" padding=\"0px\" marginLeft=\"4px\">\n              <CalculateIcon color=\"textSubtle\" width=\"20px\" />\n            </Button>\n          )}\n        </>\n      ) : (\n        <Skeleton width=\"80px\" height=\"16px\" />\n      )}\n    </AprLabelContainer>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { DeserializedPool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport BaseCell, { CellContent } from './BaseCell'\nimport Apr from '../Apr'\n\ninterface AprCellProps {\n  pool: DeserializedPool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 1 0 50px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex: 0 0 120px;\n  }\n`\n\nconst AprCell: React.FC<AprCellProps> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n  const { userData } = pool\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {t('APR')}\n        </Text>\n        <Apr pool={pool} stakedBalance={stakedBalance} showIcon={!isMobile} />\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default AprCell\n","import React, { useMemo } from 'react'\nimport { Flex, Skeleton, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\nimport Balance from 'components/Balance'\nimport { DeserializedPool } from 'state/types'\nimport { useCakeVault } from 'state/pools/hooks'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface TotalStakedCellProps {\n  pool: DeserializedPool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 2 0 100px;\n`\n\nconst TotalStakedCell: React.FC<TotalStakedCellProps> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { sousId, stakingToken, totalStaked, isAutoVault } = pool\n  const { totalCakeInVault } = useCakeVault()\n\n  const isManualCakePool = sousId === 0\n\n  const totalStakedBalance = useMemo(() => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }, [isAutoVault, totalCakeInVault, isManualCakePool, totalStaked, stakingToken.decimals])\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {t('Total staked')}\n        </Text>\n        {totalStaked && totalStaked.gte(0) ? (\n          <Flex height=\"20px\" alignItems=\"center\">\n            <Balance fontSize=\"16px\" value={totalStakedBalance} decimals={0} unit={` ${stakingToken.symbol}`} />\n          </Flex>\n        ) : (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default TotalStakedCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Link, Skeleton, Text, TimerIcon } from '@pancakeswap/uikit'\nimport { getBscScanLink } from 'utils'\nimport { DeserializedPool } from 'state/types'\nimport { useBlock } from 'state/block/hooks'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getPoolBlockInfo } from 'views/Pools/helpers'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface FinishCellProps {\n  pool: DeserializedPool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 2 0 100px;\n`\n\nconst EndsInCell: React.FC<FinishCellProps> = ({ pool }) => {\n  const { sousId, totalStaked, startBlock, endBlock, isFinished } = pool\n  const { currentBlock } = useBlock()\n  const { t } = useTranslation()\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const isCakePool = sousId === 0\n\n  const renderBlocks = shouldShowBlockCountdown ? (\n    <Flex alignItems=\"center\">\n      <Flex flex=\"1.3\">\n        <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} />\n        <Text ml=\"4px\" textTransform=\"lowercase\">\n          {t('Blocks')}\n        </Text>\n      </Flex>\n      <Flex flex=\"1\">\n        <Link\n          external\n          href={getBscScanLink(hasPoolStarted ? endBlock : startBlock, 'countdown')}\n          onClick={(e) => e.stopPropagation()}\n        >\n          <TimerIcon ml=\"4px\" />\n        </Link>\n      </Flex>\n    </Flex>\n  ) : (\n    <Text>-</Text>\n  )\n\n  // A bit hacky way to determine if public data is loading relying on totalStaked\n  // Opted to go for this since we don't really need a separate publicDataLoaded flag\n  // anywhere else\n  const isLoadingPublicData = !totalStaked.gt(0) || !currentBlock || (!blocksRemaining && !blocksUntilStart)\n  const showLoading = isLoadingPublicData && !isCakePool && !isFinished\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {hasPoolStarted || !shouldShowBlockCountdown ? t('Ends in') : t('Starts in')}\n        </Text>\n        {showLoading ? <Skeleton width=\"80px\" height=\"16px\" /> : renderBlocks}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default EndsInCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, ChevronDownIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BaseCell from './BaseCell'\n\ninterface ExpandActionCellProps {\n  expanded: boolean\n  isFullLayout: boolean\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex-direction: row;\n  justify-content: flex-end;\n  align-items: center;\n  flex: 1;\n  padding-right: 12px;\n  padding-left: 0px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex: 0 0 120px;\n    padding-right: 32px;\n    padding-left: 8px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 24px;\n`\n\nconst TotalStakedCell: React.FC<ExpandActionCellProps> = ({ expanded, isFullLayout }) => {\n  const { t } = useTranslation()\n  return (\n    <StyledCell role=\"cell\">\n      {isFullLayout && (\n        <Text color=\"primary\" bold>\n          {expanded ? t('Hide') : t('Details')}\n        </Text>\n      )}\n      <ArrowIcon color=\"primary\" toggled={expanded} />\n    </StyledCell>\n  )\n}\n\nexport default TotalStakedCell\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div<{ isAutoVault?: boolean }>`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    height: ${({ isAutoVault }) => (isAutoVault ? '130px' : 'auto')};\n  }\n}\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 32px;\n    margin-right: 0;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  font-weight: 600;\n  font-size: 12px;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Modal, Text, Button, OpenNewIcon, Link } from '@pancakeswap/uikit'\nimport useTheme from 'hooks/useTheme'\n\ninterface NotEnoughTokensModalProps {\n  tokenSymbol: string\n  onDismiss?: () => void\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst NotEnoughTokensModal: React.FC<NotEnoughTokensModalProps> = ({ tokenSymbol, onDismiss }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  return (\n    <Modal\n      title={t('%symbol% required', { symbol: tokenSymbol })}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      <Text color=\"failure\" bold>\n        {t('Insufficient %symbol% balance', { symbol: tokenSymbol })}\n      </Text>\n      <Text mt=\"24px\">{t('You’ll need %symbol% to stake in this pool!', { symbol: tokenSymbol })}</Text>\n      <Text>\n        {t('Buy some %symbol%, or make sure your %symbol% isn’t in another pool or LP.', {\n          symbol: tokenSymbol,\n        })}\n      </Text>\n      <Button mt=\"24px\" as=\"a\" external href=\"/swap\">\n        {t('Buy')} {tokenSymbol}\n      </Button>\n      <StyledLink href=\"https://yieldwatch.net\" external>\n        <Button variant=\"secondary\" mt=\"8px\" width=\"100%\">\n          {t('Locate Assets')}\n          <OpenNewIcon color=\"primary\" ml=\"4px\" />\n        </Button>\n      </StyledLink>\n      <Button variant=\"text\" onClick={onDismiss}>\n        {t('Close Window')}\n      </Button>\n    </Modal>\n  )\n}\n\nexport default NotEnoughTokensModal\n","import BigNumber from 'bignumber.js'\nimport { DeserializedPool } from 'state/types'\nimport { getApy } from 'utils/compoundApyHelpers'\nimport { getBalanceNumber, getFullDisplayBalance, getDecimalAmount } from 'utils/formatBalance'\n\nexport const convertSharesToCake = (\n  shares: BigNumber,\n  cakePerFullShare: BigNumber,\n  decimals = 18,\n  decimalsToRound = 3,\n) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\n  const amountInCake = new BigNumber(shares.multipliedBy(sharePriceNumber))\n  const cakeAsNumberBalance = getBalanceNumber(amountInCake, decimals)\n  const cakeAsBigNumber = getDecimalAmount(new BigNumber(cakeAsNumberBalance), decimals)\n  const cakeAsDisplayBalance = getFullDisplayBalance(amountInCake, decimals, decimalsToRound)\n  return { cakeAsNumberBalance, cakeAsBigNumber, cakeAsDisplayBalance }\n}\n\nexport const convertCakeToShares = (\n  cake: BigNumber,\n  cakePerFullShare: BigNumber,\n  decimals = 18,\n  decimalsToRound = 3,\n) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\n  const amountInShares = new BigNumber(cake.dividedBy(sharePriceNumber))\n  const sharesAsNumberBalance = getBalanceNumber(amountInShares, decimals)\n  const sharesAsBigNumber = getDecimalAmount(new BigNumber(sharesAsNumberBalance), decimals)\n  const sharesAsDisplayBalance = getFullDisplayBalance(amountInShares, decimals, decimalsToRound)\n  return { sharesAsNumberBalance, sharesAsBigNumber, sharesAsDisplayBalance }\n}\n\nconst AUTO_VAULT_COMPOUND_FREQUENCY = 5000\nconst MANUAL_POOL_AUTO_COMPOUND_FREQUENCY = 0\n\nexport const getAprData = (pool: DeserializedPool, performanceFee: number) => {\n  const { isAutoVault, apr } = pool\n\n  //   Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\n  const autoCompoundFrequency = isAutoVault ? AUTO_VAULT_COMPOUND_FREQUENCY : MANUAL_POOL_AUTO_COMPOUND_FREQUENCY\n\n  if (isAutoVault) {\n    const autoApr = getApy(apr, AUTO_VAULT_COMPOUND_FREQUENCY, 365, performanceFee) * 100\n    return { apr: autoApr, autoCompoundFrequency }\n  }\n  return { apr, autoCompoundFrequency }\n}\n\nexport const getCakeVaultEarnings = (\n  account: string,\n  cakeAtLastUserAction: BigNumber,\n  userShares: BigNumber,\n  pricePerFullShare: BigNumber,\n  earningTokenPrice: number,\n) => {\n  const hasAutoEarnings =\n    account && cakeAtLastUserAction && cakeAtLastUserAction.gt(0) && userShares && userShares.gt(0)\n  const { cakeAsBigNumber } = convertSharesToCake(userShares, pricePerFullShare)\n  const autoCakeProfit = cakeAsBigNumber.minus(cakeAtLastUserAction)\n  const autoCakeToDisplay = autoCakeProfit.gte(0) ? getBalanceNumber(autoCakeProfit, 18) : 0\n\n  const autoUsdProfit = autoCakeProfit.times(earningTokenPrice)\n  const autoUsdToDisplay = autoUsdProfit.gte(0) ? getBalanceNumber(autoUsdProfit, 18) : 0\n  return { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay }\n}\n\nexport const getPoolBlockInfo = (pool: DeserializedPool, currentBlock: number) => {\n  const { startBlock, endBlock, isFinished } = pool\n  const shouldShowBlockCountdown = Boolean(!isFinished && startBlock && endBlock)\n  const blocksUntilStart = Math.max(startBlock - currentBlock, 0)\n  const blocksRemaining = Math.max(endBlock - currentBlock, 0)\n  const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0\n  const blocksToDisplay = hasPoolStarted ? blocksRemaining : blocksUntilStart\n  return { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay }\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button } from '@pancakeswap/uikit'\n\ninterface PercentageButtonProps {\n  onClick: () => void\n}\n\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`\n\nconst PercentageButton: React.FC<PercentageButtonProps> = ({ children, onClick }) => {\n  return (\n    <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={onClick}>\n      {children}\n    </StyledButton>\n  )\n}\n\nexport default PercentageButton\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  Modal,\n  Text,\n  Flex,\n  Image,\n  Button,\n  Slider,\n  BalanceInput,\n  AutoRenewIcon,\n  Link,\n  CalculateIcon,\n  IconButton,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport BigNumber from 'bignumber.js'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\nimport { DeserializedPool } from 'state/types'\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\nimport PercentageButton from './PercentageButton'\nimport useStakePool from '../../../hooks/useStakePool'\nimport useUnstakePool from '../../../hooks/useUnstakePool'\n\ninterface StakeModalProps {\n  isBnbPool: boolean\n  pool: DeserializedPool\n  stakingTokenBalance: BigNumber\n  stakingTokenPrice: number\n  isRemovingStake?: boolean\n  onDismiss?: () => void\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst AnnualRoiContainer = styled(Flex)`\n  cursor: pointer;\n`\n\nconst AnnualRoiDisplay = styled(Text)`\n  width: 72px;\n  max-width: 72px;\n  overflow: hidden;\n  text-align: right;\n  text-overflow: ellipsis;\n`\n\nconst StakeModal: React.FC<StakeModalProps> = ({\n  isBnbPool,\n  pool,\n  stakingTokenBalance,\n  stakingTokenPrice,\n  isRemovingStake = false,\n  onDismiss,\n}) => {\n  const { sousId, stakingToken, earningTokenPrice, apr, userData, stakingLimit, earningToken } = pool\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { onStake } = useStakePool(sousId, isBnbPool)\n  const { onUnstake } = useUnstakePool(sousId, pool.enableEmergencyWithdraw)\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [stakeAmount, setStakeAmount] = useState('')\n  const [hasReachedStakeLimit, setHasReachedStakedLimit] = useState(false)\n  const [percent, setPercent] = useState(0)\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\n  const getCalculatedStakingLimit = () => {\n    if (isRemovingStake) {\n      return userData.stakedBalance\n    }\n    return stakingLimit.gt(0) && stakingTokenBalance.gt(stakingLimit) ? stakingLimit : stakingTokenBalance\n  }\n  const fullDecimalStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\n  const userNotEnoughToken = isRemovingStake\n    ? userData.stakedBalance.lt(fullDecimalStakeAmount)\n    : userData.stakingTokenBalance.lt(fullDecimalStakeAmount)\n\n  const usdValueStaked = new BigNumber(stakeAmount).times(stakingTokenPrice)\n  const formattedUsdValueStaked = !usdValueStaked.isNaN() && formatNumber(usdValueStaked.toNumber())\n\n  const interestBreakdown = getInterestBreakdown({\n    principalInUSD: !usdValueStaked.isNaN() ? usdValueStaked.toNumber() : 0,\n    apr,\n    earningTokenPrice,\n  })\n  const annualRoi = interestBreakdown[3] * pool.earningTokenPrice\n  const formattedAnnualRoi = formatNumber(annualRoi, annualRoi > 10000 ? 0 : 2, annualRoi > 10000 ? 0 : 2)\n\n  const getTokenLink = stakingToken.address ? `/swap?outputCurrency=${stakingToken.address}` : '/swap'\n\n  useEffect(() => {\n    if (stakingLimit.gt(0) && !isRemovingStake) {\n      setHasReachedStakedLimit(fullDecimalStakeAmount.plus(userData.stakedBalance).gt(stakingLimit))\n    }\n  }, [\n    stakeAmount,\n    stakingLimit,\n    userData,\n    stakingToken,\n    isRemovingStake,\n    setHasReachedStakedLimit,\n    fullDecimalStakeAmount,\n  ])\n\n  const handleStakeInputChange = (input: string) => {\n    if (input) {\n      const convertedInput = getDecimalAmount(new BigNumber(input), stakingToken.decimals)\n      const percentage = Math.floor(convertedInput.dividedBy(getCalculatedStakingLimit()).multipliedBy(100).toNumber())\n      setPercent(Math.min(percentage, 100))\n    } else {\n      setPercent(0)\n    }\n    setStakeAmount(input)\n  }\n\n  const handleChangePercent = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = getCalculatedStakingLimit().dividedBy(100).multipliedBy(sliderPercent)\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\n      setStakeAmount(amountToStake)\n    } else {\n      setStakeAmount('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  const handleConfirmClick = async () => {\n    setPendingTx(true)\n    try {\n      if (isRemovingStake) {\n        // unstaking\n        await onUnstake(stakeAmount, stakingToken.decimals)\n        toastSuccess(\n          `${t('Unstaked')}!`,\n          t('Your %symbol% earnings have also been harvested to your wallet!', {\n            symbol: earningToken.symbol,\n          }),\n        )\n      } else {\n        // staking\n        await onStake(stakeAmount, stakingToken.decimals)\n        toastSuccess(\n          `${t('Staked')}!`,\n          t('Your %symbol% funds have been staked in the pool!', {\n            symbol: stakingToken.symbol,\n          }),\n        )\n      }\n      setPendingTx(false)\n      onDismiss()\n    } catch (e) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setPendingTx(false)\n    }\n  }\n\n  if (showRoiCalculator) {\n    return (\n      <RoiCalculatorModal\n        earningTokenPrice={earningTokenPrice}\n        stakingTokenPrice={stakingTokenPrice}\n        apr={apr}\n        linkLabel={t('Get %symbol%', { symbol: stakingToken.symbol })}\n        linkHref={getTokenLink}\n        stakingTokenBalance={userData.stakedBalance.plus(stakingTokenBalance)}\n        stakingTokenSymbol={stakingToken.symbol}\n        earningTokenSymbol={earningToken.symbol}\n        onBack={() => setShowRoiCalculator(false)}\n        initialValue={stakeAmount}\n      />\n    )\n  }\n\n  return (\n    <Modal\n      minWidth=\"346px\"\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      {stakingLimit.gt(0) && !isRemovingStake && (\n        <Text color=\"secondary\" bold mb=\"24px\" style={{ textAlign: 'center' }} fontSize=\"16px\">\n          {t('Max stake for this pool: %amount% %token%', {\n            amount: getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0),\n            token: stakingToken.symbol,\n          })}\n        </Text>\n      )}\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\n        <Flex alignItems=\"center\" minWidth=\"70px\">\n          <Image src={`/images/tokens/${stakingToken.address}.png`} width={24} height={24} alt={stakingToken.symbol} />\n          <Text ml=\"4px\" bold>\n            {stakingToken.symbol}\n          </Text>\n        </Flex>\n      </Flex>\n      <BalanceInput\n        value={stakeAmount}\n        onUserInput={handleStakeInputChange}\n        currencyValue={stakingTokenPrice !== 0 && `~${formattedUsdValueStaked || 0} USD`}\n        isWarning={hasReachedStakeLimit || userNotEnoughToken}\n        decimals={stakingToken.decimals}\n      />\n      {hasReachedStakeLimit && (\n        <Text color=\"failure\" fontSize=\"12px\" style={{ textAlign: 'right' }} mt=\"4px\">\n          {t('Maximum total stake: %amount% %token%', {\n            amount: getFullDisplayBalance(new BigNumber(stakingLimit), stakingToken.decimals, 0),\n            token: stakingToken.symbol,\n          })}\n        </Text>\n      )}\n      {userNotEnoughToken && (\n        <Text color=\"failure\" fontSize=\"12px\" style={{ textAlign: 'right' }} mt=\"4px\">\n          {t('Insufficient %symbol% balance', {\n            symbol: stakingToken.symbol,\n          })}\n        </Text>\n      )}\n      <Text ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n        {t('Balance: %balance%', {\n          balance: getFullDisplayBalance(getCalculatedStakingLimit(), stakingToken.decimals),\n        })}\n      </Text>\n      <Slider\n        min={0}\n        max={100}\n        value={percent}\n        onValueChanged={handleChangePercent}\n        name=\"stake\"\n        valueLabel={`${percent}%`}\n        step={1}\n      />\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n        <PercentageButton onClick={() => handleChangePercent(25)}>25%</PercentageButton>\n        <PercentageButton onClick={() => handleChangePercent(50)}>50%</PercentageButton>\n        <PercentageButton onClick={() => handleChangePercent(75)}>75%</PercentageButton>\n        <PercentageButton onClick={() => handleChangePercent(100)}>{t('Max')}</PercentageButton>\n      </Flex>\n      {!isRemovingStake && (\n        <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n          <Text mr=\"8px\" color=\"textSubtle\">\n            {t('Annual ROI at current rates')}:\n          </Text>\n          <AnnualRoiContainer alignItems=\"center\" onClick={() => setShowRoiCalculator(true)}>\n            <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\n            <IconButton variant=\"text\" scale=\"sm\">\n              <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n            </IconButton>\n          </AnnualRoiContainer>\n        </Flex>\n      )}\n      <Button\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        onClick={handleConfirmClick}\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0 || hasReachedStakeLimit || userNotEnoughToken}\n        mt=\"24px\"\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </Button>\n      {!isRemovingStake && (\n        <StyledLink external href={getTokenLink}>\n          <Button width=\"100%\" mt=\"8px\" variant=\"secondary\">\n            {t('Get %symbol%', { symbol: stakingToken.symbol })}\n          </Button>\n        </StyledLink>\n      )}\n    </Modal>\n  )\n}\n\nexport default StakeModal\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport {\n  Box,\n  Button,\n  Flex,\n  HelpIcon,\n  Link,\n  LinkExternal,\n  MetamaskIcon,\n  Skeleton,\n  Text,\n  TimerIcon,\n  useTooltip,\n} from '@pancakeswap/uikit'\nimport { BASE_BSC_SCAN_URL } from 'config'\nimport { getBscScanLink } from 'utils'\nimport { useBlock } from 'state/block/hooks'\nimport { useCakeVault } from 'state/pools/hooks'\nimport BigNumber from 'bignumber.js'\nimport { DeserializedPool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { registerToken } from 'utils/wallet'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport { convertSharesToCake, getPoolBlockInfo } from 'views/Pools/helpers'\nimport Harvest from './Harvest'\nimport Stake from './Stake'\nimport Apr from '../Apr'\nimport AutoHarvest from './AutoHarvest'\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 700px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 700px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst StyledActionPanel = styled.div<{ expanded: boolean }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.dropdown};\n  display: flex;\n  flex-direction: column-reverse;\n  justify-content: center;\n  padding: 12px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\ntype MediaBreakpoints = {\n  isXs: boolean\n  isSm: boolean\n  isMd: boolean\n  isLg: boolean\n  isXl: boolean\n  isXxl: boolean\n}\n\ninterface ActionPanelProps {\n  account: string\n  pool: DeserializedPool\n  userDataLoaded: boolean\n  expanded: boolean\n  breakpoints: MediaBreakpoints\n}\n\nconst InfoSection = styled(Box)`\n  flex-grow: 0;\n  flex-shrink: 0;\n  flex-basis: auto;\n  padding: 8px 8px;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding: 0;\n    flex-basis: 230px;\n  }\n`\n\nconst ActionPanel: React.FC<ActionPanelProps> = ({ account, pool, userDataLoaded, expanded, breakpoints }) => {\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    totalStaked,\n    startBlock,\n    endBlock,\n    stakingLimit,\n    contractAddress,\n    userData,\n    isAutoVault,\n  } = pool\n  const { t } = useTranslation()\n  const poolContractAddress = getAddress(contractAddress)\n  const cakeVaultContractAddress = getCakeVaultAddress()\n  const { currentBlock } = useBlock()\n  const { isXs, isSm, isMd } = breakpoints\n  const showSubtitle = (isXs || isSm) && sousId === 0\n\n  const { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay } =\n    getPoolBlockInfo(pool, currentBlock)\n\n  const isMetaMaskInScope = !!window.ethereum?.isMetaMask\n  const tokenAddress = earningToken.address || ''\n\n  const {\n    totalCakeInVault,\n    userData: { userShares },\n    fees: { performanceFee },\n    pricePerFullShare,\n  } = useCakeVault()\n\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const { cakeAsBigNumber } = convertSharesToCake(userShares, pricePerFullShare)\n  const poolStakingTokenBalance = isAutoVault\n    ? cakeAsBigNumber.plus(stakingTokenBalance)\n    : stakedBalance.plus(stakingTokenBalance)\n\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n  const isManualCakePool = sousId === 0\n\n  const getTotalStakedBalance = () => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }\n\n  const {\n    targetRef: totalStakedTargetRef,\n    tooltip: totalStakedTooltip,\n    tooltipVisible: totalStakedTooltipVisible,\n  } = useTooltip(t('Total amount of %symbol% staked in this pool', { symbol: stakingToken.symbol }), {\n    placement: 'bottom',\n  })\n\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\n  const autoTooltipText = t(\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\n  )\n\n  const {\n    targetRef: tagTargetRef,\n    tooltip: tagTooltip,\n    tooltipVisible: tagTooltipVisible,\n  } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\n    placement: 'bottom-start',\n  })\n\n  const maxStakeRow = stakingLimit.gt(0) ? (\n    <Flex mb=\"8px\" justifyContent=\"space-between\">\n      <Text>{t('Max. stake per user')}:</Text>\n      <Text>{`${getFullDisplayBalance(stakingLimit, stakingToken.decimals, 0)} ${stakingToken.symbol}`}</Text>\n    </Flex>\n  ) : null\n\n  const blocksRow =\n    blocksRemaining || blocksUntilStart ? (\n      <Flex mb=\"8px\" justifyContent=\"space-between\">\n        <Text>{hasPoolStarted ? t('Ends in') : t('Starts in')}:</Text>\n        <Flex>\n          <Link external href={getBscScanLink(hasPoolStarted ? endBlock : startBlock, 'countdown')}>\n            <Balance fontSize=\"16px\" value={blocksToDisplay} decimals={0} color=\"primary\" />\n            <Text ml=\"4px\" color=\"primary\" textTransform=\"lowercase\">\n              {t('Blocks')}\n            </Text>\n            <TimerIcon ml=\"4px\" color=\"primary\" />\n          </Link>\n        </Flex>\n      </Flex>\n    ) : (\n      <Skeleton width=\"56px\" height=\"16px\" />\n    )\n\n  const aprRow = (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"8px\">\n      <Text>{isAutoVault ? t('APY') : t('APR')}:</Text>\n      <Apr\n        pool={pool}\n        showIcon\n        stakedBalance={poolStakingTokenBalance}\n        performanceFee={isAutoVault ? performanceFeeAsDecimal : 0}\n      />\n    </Flex>\n  )\n\n  const totalStakedRow = (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"8px\">\n      <Text maxWidth={['50px', '100%']}>{t('Total staked')}:</Text>\n      <Flex alignItems=\"center\">\n        {totalStaked && totalStaked.gte(0) ? (\n          <>\n            <Balance fontSize=\"16px\" value={getTotalStakedBalance()} decimals={0} unit={` ${stakingToken.symbol}`} />\n            <span ref={totalStakedTargetRef}>\n              <HelpIcon color=\"textSubtle\" width=\"20px\" ml=\"4px\" />\n            </span>\n          </>\n        ) : (\n          <Skeleton width=\"56px\" height=\"16px\" />\n        )}\n        {totalStakedTooltipVisible && totalStakedTooltip}\n      </Flex>\n    </Flex>\n  )\n\n  return (\n    <StyledActionPanel expanded={expanded}>\n      <InfoSection>\n        {maxStakeRow}\n        {(isXs || isSm) && aprRow}\n        {(isXs || isSm || isMd) && totalStakedRow}\n        {shouldShowBlockCountdown && blocksRow}\n        <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n          <LinkExternal href={`/info/token/${earningToken.address}`} bold={false}>\n            {t('See Token Info')}\n          </LinkExternal>\n        </Flex>\n        <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n          <LinkExternal href={earningToken.projectLink} bold={false}>\n            {t('View Project Site')}\n          </LinkExternal>\n        </Flex>\n        {poolContractAddress && (\n          <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n            <LinkExternal\n              href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\n              bold={false}\n            >\n              {t('View Contract')}\n            </LinkExternal>\n          </Flex>\n        )}\n        {account && isMetaMaskInScope && tokenAddress && (\n          <Flex mb=\"8px\" justifyContent={['flex-end', 'flex-end', 'flex-start']}>\n            <Button\n              variant=\"text\"\n              p=\"0\"\n              height=\"auto\"\n              onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals)}\n            >\n              <Text color=\"primary\">{t('Add to Metamask')}</Text>\n              <MetamaskIcon ml=\"4px\" />\n            </Button>\n          </Flex>\n        )}\n        {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\n        {tagTooltipVisible && tagTooltip}\n        <span ref={tagTargetRef}>\n          <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\n        </span>\n      </InfoSection>\n      <ActionContainer>\n        {showSubtitle && (\n          <Text mt=\"4px\" mb=\"16px\" color=\"textSubtle\">\n            {isAutoVault ? t('Automatic restaking') : `${t('Earn')} DENA ${t('Stake').toLocaleLowerCase()} DENA`}\n          </Text>\n        )}\n        {pool.isAutoVault ? (\n          <AutoHarvest {...pool} userDataLoaded={userDataLoaded} />\n        ) : (\n          <Harvest {...pool} userDataLoaded={userDataLoaded} />\n        )}\n        <Stake pool={pool} userDataLoaded={userDataLoaded} />\n      </ActionContainer>\n    </StyledActionPanel>\n  )\n}\n\nexport default ActionPanel\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  Modal,\n  Text,\n  Flex,\n  Image,\n  Button,\n  Slider,\n  BalanceInput,\n  AutoRenewIcon,\n  CalculateIcon,\n  IconButton,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { BIG_TEN } from 'utils/bigNumber'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useCakeVault } from 'state/pools/hooks'\nimport { useCakeVaultContract } from 'hooks/useContract'\nimport useTheme from 'hooks/useTheme'\nimport useWithdrawalFeeTimer from 'views/Pools/hooks/useWithdrawalFeeTimer'\nimport BigNumber from 'bignumber.js'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { fetchCakeVaultUserData } from 'state/pools'\nimport { DeserializedPool } from 'state/types'\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { convertCakeToShares, convertSharesToCake } from '../../helpers'\nimport FeeSummary from './FeeSummary'\n\ninterface VaultStakeModalProps {\n  pool: DeserializedPool\n  stakingMax: BigNumber\n  performanceFee?: number\n  isRemovingStake?: boolean\n  onDismiss?: () => void\n}\n\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`\n\nconst AnnualRoiContainer = styled(Flex)`\n  cursor: pointer;\n`\n\nconst AnnualRoiDisplay = styled(Text)`\n  width: 72px;\n  max-width: 72px;\n  overflow: hidden;\n  text-align: right;\n  text-overflow: ellipsis;\n`\n\nconst callOptions = {\n  gasLimit: 380000,\n}\n\nconst VaultStakeModal: React.FC<VaultStakeModalProps> = ({\n  pool,\n  stakingMax,\n  performanceFee,\n  isRemovingStake = false,\n  onDismiss,\n}) => {\n  const dispatch = useAppDispatch()\n  const { stakingToken, earningToken, apr, stakingTokenPrice, earningTokenPrice } = pool\n  const { account } = useWeb3React()\n  const cakeVaultContract = useCakeVaultContract()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const {\n    userData: { lastDepositedTime, userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [stakeAmount, setStakeAmount] = useState('')\n  const [percent, setPercent] = useState(0)\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\n  const { hasUnstakingFee } = useWithdrawalFeeTimer(parseInt(lastDepositedTime, 10), userShares)\n  const cakePriceBusd = usePriceCakeBusd()\n  const usdValueStaked = new BigNumber(stakeAmount).times(cakePriceBusd)\n  const formattedUsdValueStaked = cakePriceBusd.gt(0) && stakeAmount ? formatNumber(usdValueStaked.toNumber()) : ''\n\n  const { cakeAsBigNumber } = convertSharesToCake(userShares, pricePerFullShare)\n\n  const interestBreakdown = getInterestBreakdown({\n    principalInUSD: !usdValueStaked.isNaN() ? usdValueStaked.toNumber() : 0,\n    apr,\n    earningTokenPrice,\n    performanceFee,\n  })\n  const annualRoi = interestBreakdown[3] * pool.earningTokenPrice\n  const formattedAnnualRoi = formatNumber(annualRoi, annualRoi > 10000 ? 0 : 2, annualRoi > 10000 ? 0 : 2)\n\n  const getTokenLink = stakingToken.address ? `/swap?outputCurrency=${stakingToken.address}` : '/swap'\n\n  const handleStakeInputChange = (input: string) => {\n    if (input) {\n      const convertedInput = new BigNumber(input).multipliedBy(BIG_TEN.pow(stakingToken.decimals))\n      const percentage = Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber())\n      setPercent(percentage > 100 ? 100 : percentage)\n    } else {\n      setPercent(0)\n    }\n    setStakeAmount(input)\n  }\n\n  const handleChangePercent = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = stakingMax.dividedBy(100).multipliedBy(sliderPercent)\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\n      setStakeAmount(amountToStake)\n    } else {\n      setStakeAmount('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  const handleWithdrawal = async (convertedStakeAmount: BigNumber) => {\n    setPendingTx(true)\n    const shareStakeToWithdraw = convertCakeToShares(convertedStakeAmount, pricePerFullShare)\n    // trigger withdrawAll function if the withdrawal will leave 0.000001 CAKE or less\n    const triggerWithdrawAllThreshold = new BigNumber(1000000000000)\n    const sharesRemaining = userShares.minus(shareStakeToWithdraw.sharesAsBigNumber)\n    const isWithdrawingAll = sharesRemaining.lte(triggerWithdrawAllThreshold)\n\n    if (isWithdrawingAll) {\n      try {\n        const tx = await callWithGasPrice(cakeVaultContract, 'withdrawAll', undefined, callOptions)\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          toastSuccess(\n            t('Unstaked!'),\n            <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n              {t('Your earnings have also been harvested to your wallet')}\n            </ToastDescriptionWithTx>,\n          )\n          setPendingTx(false)\n          onDismiss()\n          dispatch(fetchCakeVaultUserData({ account }))\n        }\n      } catch (error) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setPendingTx(false)\n      }\n    } else {\n      // .toString() being called to fix a BigNumber error in prod\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n      try {\n        const tx = await callWithGasPrice(\n          cakeVaultContract,\n          'withdraw',\n          [shareStakeToWithdraw.sharesAsBigNumber.toString()],\n          callOptions,\n        )\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          toastSuccess(\n            t('Unstaked!'),\n            <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n              {t('Your earnings have also been harvested to your wallet')}\n            </ToastDescriptionWithTx>,\n          )\n          setPendingTx(false)\n          onDismiss()\n          dispatch(fetchCakeVaultUserData({ account }))\n        }\n      } catch (error) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setPendingTx(false)\n      }\n    }\n  }\n\n  const handleDeposit = async (convertedStakeAmount: BigNumber) => {\n    setPendingTx(true)\n    try {\n      // .toString() being called to fix a BigNumber error in prod\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n      const tx = await callWithGasPrice(cakeVaultContract, 'deposit', [convertedStakeAmount.toString()], callOptions)\n      const receipt = await tx.wait()\n      if (receipt.status) {\n        toastSuccess(\n          t('Staked!'),\n          <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n            {t('Your funds have been staked in the pool')}\n          </ToastDescriptionWithTx>,\n        )\n        setPendingTx(false)\n        onDismiss()\n        dispatch(fetchCakeVaultUserData({ account }))\n      }\n    } catch (error) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setPendingTx(false)\n    }\n  }\n\n  const handleConfirmClick = async () => {\n    const convertedStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\n    if (isRemovingStake) {\n      // unstaking\n      handleWithdrawal(convertedStakeAmount)\n    } else {\n      // staking\n      handleDeposit(convertedStakeAmount)\n    }\n  }\n\n  if (showRoiCalculator) {\n    return (\n      <RoiCalculatorModal\n        earningTokenPrice={earningTokenPrice}\n        stakingTokenPrice={stakingTokenPrice}\n        apr={apr}\n        linkLabel={t('Get %symbol%', { symbol: stakingToken.symbol })}\n        linkHref={getTokenLink}\n        stakingTokenBalance={cakeAsBigNumber.plus(stakingMax)}\n        stakingTokenSymbol={stakingToken.symbol}\n        earningTokenSymbol={earningToken.symbol}\n        onBack={() => setShowRoiCalculator(false)}\n        initialValue={stakeAmount}\n        performanceFee={performanceFee}\n      />\n    )\n  }\n\n  return (\n    <Modal\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\n        <Flex alignItems=\"center\" minWidth=\"70px\">\n          <Image src={`/images/tokens/${stakingToken.address}.png`} width={24} height={24} alt={stakingToken.symbol} />\n          <Text ml=\"4px\" bold>\n            {stakingToken.symbol}\n          </Text>\n        </Flex>\n      </Flex>\n      <BalanceInput\n        value={stakeAmount}\n        onUserInput={handleStakeInputChange}\n        currencyValue={cakePriceBusd.gt(0) && `~${formattedUsdValueStaked || 0} USD`}\n        decimals={stakingToken.decimals}\n      />\n      <Text mt=\"8px\" ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n        {t('Balance: %balance%', { balance: getFullDisplayBalance(stakingMax, stakingToken.decimals) })}\n      </Text>\n      <Slider\n        min={0}\n        max={100}\n        value={percent}\n        onValueChanged={handleChangePercent}\n        name=\"stake\"\n        valueLabel={`${percent}%`}\n        step={1}\n      />\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(25)}>\n          25%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(50)}>\n          50%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(75)}>\n          75%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(100)}>\n          {t('Max')}\n        </StyledButton>\n      </Flex>\n      {isRemovingStake && hasUnstakingFee && (\n        <FeeSummary stakingTokenSymbol={stakingToken.symbol} stakeAmount={stakeAmount} />\n      )}\n      {!isRemovingStake && (\n        <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n          <Text mr=\"8px\" color=\"textSubtle\">\n            {t('Annual ROI at current rates')}:\n          </Text>\n          <AnnualRoiContainer alignItems=\"center\" onClick={() => setShowRoiCalculator(true)}>\n            <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\n            <IconButton variant=\"text\" scale=\"sm\">\n              <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n            </IconButton>\n          </AnnualRoiContainer>\n        </Flex>\n      )}\n      <Button\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        onClick={handleConfirmClick}\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0}\n        mt=\"24px\"\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </Button>\n      {!isRemovingStake && (\n        <Button mt=\"8px\" as=\"a\" external href={getTokenLink} variant=\"secondary\">\n          {t('Get %symbol%', { symbol: stakingToken.symbol })}\n        </Button>\n      )}\n    </Modal>\n  )\n}\n\nexport default VaultStakeModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, useTooltip, Flex, Text } from '@pancakeswap/uikit'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { useWeb3React } from '@web3-react/core'\nimport { useCakeVault } from 'state/pools/hooks'\nimport { DeserializedPool } from 'state/types'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { PoolCategory } from 'config/constants/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useERC20 } from 'hooks/useContract'\nimport { convertSharesToCake } from 'views/Pools/helpers'\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport StakeModal from '../../PoolCard/Modals/StakeModal'\nimport VaultStakeModal from '../../CakeVaultCard/VaultStakeModal'\nimport { useCheckVaultApprovalStatus, useApprovePool, useVaultApprove } from '../../../hooks/useApprove'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps {\n  pool: DeserializedPool\n  userDataLoaded: boolean\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({ pool, userDataLoaded }) => {\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    stakingLimit,\n    isFinished,\n    poolCategory,\n    userData,\n    stakingTokenPrice,\n    isAutoVault,\n  } = pool\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n\n  const stakingTokenContract = useERC20(stakingToken.address || '')\n  const { handleApprove: handlePoolApprove, requestedApproval: requestedPoolApproval } = useApprovePool(\n    stakingTokenContract,\n    sousId,\n    earningToken.symbol,\n  )\n\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\n  const { handleApprove: handleVaultApprove, requestedApproval: requestedVaultApproval } =\n    useVaultApprove(setLastUpdated)\n\n  const handleApprove = isAutoVault ? handleVaultApprove : handlePoolApprove\n  const requestedApproval = isAutoVault ? requestedVaultApproval : requestedPoolApproval\n\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const isNotVaultAndHasStake = !isAutoVault && stakedBalance.gt(0)\n\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const {\n    userData: { userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\n  const hasSharesStaked = userShares && userShares.gt(0)\n  const isVaultWithShares = isAutoVault && hasSharesStaked\n  const stakedAutoDollarValue = getBalanceNumber(cakeAsBigNumber.multipliedBy(stakingTokenPrice), stakingToken.decimals)\n\n  const needsApproval = isAutoVault ? !isVaultApproved : !allowance.gt(0) && !isBnbPool\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const [onPresentStake] = useModal(\n    <StakeModal\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenBalance={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPrice}\n    />,\n  )\n\n  const [onPresentVaultStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n\n  const [onPresentUnstake] = useModal(\n    <StakeModal\n      stakingTokenBalance={stakingTokenBalance}\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenPrice={stakingTokenPrice}\n      isRemovingStake\n    />,\n  )\n\n  const [onPresentVaultUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\n\n  const onStake = () => {\n    if (isAutoVault) {\n      onPresentVaultStake()\n    } else {\n      onPresentStake()\n    }\n  }\n\n  const onUnstake = () => {\n    if (isAutoVault) {\n      onPresentVaultUnstake()\n    } else {\n      onPresentUnstake()\n    }\n  }\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t(\"You've already staked the maximum amount you can stake in this pool!\"),\n    { placement: 'bottom' },\n  )\n\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Start staking')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <ConnectWalletButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataLoaded) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Start staking')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} height=\"32px\" marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (needsApproval) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Enable pool')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n            {t('Enable')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  // Wallet connected, user data loaded and approved\n  if (isNotVaultAndHasStake || isVaultWithShares) {\n    return (\n      <ActionContainer isAutoVault={isAutoVault}>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n            {stakingToken.symbol}{' '}\n          </Text>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {isAutoVault ? t('Staked (compounding)') : t('Staked')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Flex flex=\"1\" pt=\"16px\" flexDirection=\"column\" alignSelf=\"flex-start\">\n            <Balance\n              lineHeight=\"1\"\n              bold\n              fontSize=\"20px\"\n              decimals={5}\n              value={isAutoVault ? cakeAsNumberBalance : stakedTokenBalance}\n            />\n            <Balance\n              fontSize=\"12px\"\n              display=\"inline\"\n              color=\"textSubtle\"\n              decimals={2}\n              value={isAutoVault ? stakedAutoDollarValue : stakedTokenDollarBalance}\n              unit=\" USD\"\n              prefix=\"~\"\n            />\n          </Flex>\n          <IconButtonWrapper>\n            <IconButton variant=\"secondary\" onClick={onUnstake} mr=\"6px\">\n              <MinusIcon color=\"primary\" width=\"14px\" />\n            </IconButton>\n            {reachStakingLimit ? (\n              <span ref={targetRef}>\n                <IconButton variant=\"secondary\" disabled>\n                  <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\n                </IconButton>\n              </span>\n            ) : (\n              <IconButton\n                variant=\"secondary\"\n                onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\n                disabled={isFinished}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            )}\n          </IconButtonWrapper>\n          {tooltipVisible && tooltip}\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n          {t('Stake')}{' '}\n        </Text>\n        <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n          {stakingToken.symbol}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button\n          width=\"100%\"\n          onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\n          variant=\"secondary\"\n          disabled={isFinished}\n        >\n          {t('Stake')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton, Text, useTooltip, HelpIcon, Flex, Box, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { DeserializedPool } from 'state/types'\nimport Balance from 'components/Balance'\nimport { useCakeVault } from 'state/pools/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface AutoEarningsCellProps {\n  pool: DeserializedPool\n  account: string\n  userDataLoaded: boolean\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 4.5;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 120px;\n  }\n`\n\nconst HelpIconWrapper = styled.div`\n  align-self: center;\n`\n\nconst AutoEarningsCell: React.FC<AutoEarningsCellProps> = ({ pool, account, userDataLoaded }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n  const { earningTokenPrice } = pool\n\n  const {\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\n    account,\n    cakeAtLastUserAction,\n    userShares,\n    pricePerFullShare,\n    earningTokenPrice,\n  )\n\n  const labelText = t('Recent DENA profit')\n  const earningTokenBalance = autoCakeToDisplay\n  const hasEarnings = hasAutoEarnings\n  const earningTokenDollarBalance = autoUsdToDisplay\n\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\n  const dateTimeLastAction = new Date(lastActionInMs)\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Balance fontSize=\"16px\" value={autoCakeToDisplay} decimals={3} bold unit=\" DENA\" />\n      <Balance fontSize=\"16px\" value={autoUsdToDisplay} decimals={2} bold prefix=\"~$\" />\n      {t('Earned since your last action')}\n      <Text>{dateStringToDisplay}</Text>\n    </>,\n    { placement: 'bottom' },\n  )\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {labelText}\n        </Text>\n        {!userDataLoaded && account ? (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        ) : (\n          <>\n            {tooltipVisible && tooltip}\n            <Flex>\n              <Box mr=\"8px\" height=\"32px\">\n                <Balance\n                  mt=\"4px\"\n                  bold={!isMobile}\n                  fontSize={isMobile ? '14px' : '16px'}\n                  color={hasEarnings ? 'primary' : 'textDisabled'}\n                  decimals={hasEarnings ? 5 : 1}\n                  value={hasEarnings ? earningTokenBalance : 0}\n                />\n                {hasEarnings ? (\n                  <>\n                    {earningTokenPrice > 0 && (\n                      <Balance\n                        display=\"inline\"\n                        fontSize=\"12px\"\n                        color=\"textSubtle\"\n                        decimals={2}\n                        prefix=\"~\"\n                        value={earningTokenDollarBalance}\n                        unit=\" USD\"\n                      />\n                    )}\n                  </>\n                ) : (\n                  <Text mt=\"4px\" fontSize=\"12px\" color=\"textDisabled\">\n                    0 USD\n                  </Text>\n                )}\n              </Box>\n              {hasEarnings && !isMobile && (\n                <HelpIconWrapper ref={targetRef}>\n                  <HelpIcon color=\"textSubtle\" />\n                </HelpIconWrapper>\n              )}\n            </Flex>\n          </>\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default AutoEarningsCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { DeserializedPool } from 'state/types'\nimport { useCakeVault } from 'state/pools/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport BaseCell, { CellContent } from './BaseCell'\nimport Apr from '../Apr'\nimport { convertSharesToCake } from '../../../helpers'\n\ninterface AprCellProps {\n  pool: DeserializedPool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 1 0 50px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex: 0 0 120px;\n  }\n`\n\nconst AutoAprCell: React.FC<AprCellProps> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n\n  const {\n    userData: { userShares },\n    fees: { performanceFee },\n    pricePerFullShare,\n  } = useCakeVault()\n\n  const { cakeAsBigNumber } = convertSharesToCake(userShares, pricePerFullShare)\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {t('APY')}\n        </Text>\n        <Apr\n          pool={pool}\n          stakedBalance={cakeAsBigNumber}\n          performanceFee={performanceFeeAsDecimal}\n          showIcon={!isMobile}\n        />\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default AutoAprCell\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { DeserializedPool } from 'state/types'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport NameCell from './Cells/NameCell'\nimport EarningsCell from './Cells/EarningsCell'\nimport AprCell from './Cells/AprCell'\nimport TotalStakedCell from './Cells/TotalStakedCell'\nimport EndsInCell from './Cells/EndsInCell'\nimport ExpandActionCell from './Cells/ExpandActionCell'\nimport ActionPanel from './ActionPanel/ActionPanel'\nimport AutoEarningsCell from './Cells/AutoEarningsCell'\nimport AutoAprCell from './Cells/AutoAprCell'\n\ninterface PoolRowProps {\n  pool: DeserializedPool\n  account: string\n  userDataLoaded: boolean\n}\n\nconst StyledRow = styled.div`\n  background-color: transparent;\n  display: flex;\n  cursor: pointer;\n`\n\nconst PoolRow: React.FC<PoolRowProps> = ({ pool, account, userDataLoaded }) => {\n  const { isXs, isSm, isMd, isLg, isXl, isXxl, isTablet, isDesktop } = useMatchBreakpoints()\n  const isLargerScreen = isLg || isXl || isXxl\n  const [expanded, setExpanded] = useState(false)\n  const shouldRenderActionPanel = useDelayedUnmount(expanded, 300)\n\n  const toggleExpanded = () => {\n    setExpanded((prev) => !prev)\n  }\n\n  return (\n    <>\n      <StyledRow role=\"row\" onClick={toggleExpanded}>\n        <NameCell pool={pool} />\n        {pool.isAutoVault ? (\n          <AutoEarningsCell pool={pool} account={account} userDataLoaded={userDataLoaded} />\n        ) : (\n          <EarningsCell pool={pool} account={account} userDataLoaded={userDataLoaded} />\n        )}\n        {pool.isAutoVault ? <AutoAprCell pool={pool} /> : <AprCell pool={pool} />}\n        {isLargerScreen && <TotalStakedCell pool={pool} />}\n        {isDesktop && <EndsInCell pool={pool} />}\n        <ExpandActionCell expanded={expanded} isFullLayout={isTablet || isDesktop} />\n      </StyledRow>\n      {shouldRenderActionPanel && (\n        <ActionPanel\n          account={account}\n          pool={pool}\n          userDataLoaded={userDataLoaded}\n          expanded={expanded}\n          breakpoints={{ isXs, isSm, isMd, isLg, isXl, isXxl }}\n        />\n      )}\n    </>\n  )\n}\n\nexport default PoolRow\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { Button, ChevronUpIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { DeserializedPool } from 'state/types'\nimport PoolRow from './PoolRow'\n\ninterface PoolsTableProps {\n  pools: DeserializedPool[]\n  userDataLoaded: boolean\n  account: string\n}\n\nconst StyledTable = styled.div`\n  border-radius: ${({ theme }) => theme.radii.card};\n  scroll-margin-top: 64px;\n\n  background-color: ${({ theme }) => theme.card.background};\n  > div:not(:last-child) {\n    border-bottom: 2px solid ${({ theme }) => theme.colors.disabled};\n  }\n`\n\nconst StyledTableBorder = styled.div`\n  border-radius: ${({ theme }) => theme.radii.card};\n  background-color: ${({ theme }) => theme.colors.cardBorder};\n  padding: 1px 1px 3px 1px;\n  background-size: 400% 400%;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst PoolsTable: React.FC<PoolsTableProps> = ({ pools, userDataLoaded, account }) => {\n  const { t } = useTranslation()\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n  return (\n    <StyledTableBorder>\n      <StyledTable id=\"pools-table\" role=\"table\" ref={tableWrapperEl}>\n        {pools.map((pool) => (\n          <PoolRow\n            key={pool.isAutoVault ? 'auto-cake' : pool.sousId}\n            pool={pool}\n            account={account}\n            userDataLoaded={userDataLoaded}\n          />\n        ))}\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </StyledTable>\n    </StyledTableBorder>\n  )\n}\n\nexport default PoolsTable\n","import React, { useRef, useState } from 'react'\nimport styled from 'styled-components'\nimport { Input, Flex, Box, CardFooter, ExpandableLabel } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Auction, AuctionStatus } from 'config/constants/types'\nimport Select, { OptionProps } from 'components/Select/Select'\n// import WhitelistedBiddersButton from '../WhitelistedBiddersButton'\n\nconst FooterInner = styled(Box)`\n  background-color: #000000;\n`\nconst ExpandableText = styled.div `\n  color:  #D9AB3A;\n`\n\ninterface AprApyFilterProps {\n  handleAprApyFilter?: (e: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst AprApyFilter: React.FC<AprApyFilterProps> = ({ handleAprApyFilter}) => {\n  const [isExpanded, setIsExpanded] = useState(true)\n  const { t } = useTranslation()\n  const minInputRef = useRef<HTMLInputElement | null>(null)\n  const maxInputRef = useRef<HTMLInputElement | null>(null)\n  // const { topLeaderboard, status } = auction\n\n  // const isLiveOrPendingAuction = status === AuctionStatus.Pending || status === AuctionStatus.Open\n\n  return (\n    <CardFooter p=\"0\">\n      {isExpanded && (\n        <FooterInner>\n          <Flex p=\"16px\" flexDirection=\"column\">\n            <Flex width=\"100%\" pt=\"8px\" px=\"8px\">\n              <Select\n                options={[\n                  {\n                    label: t('APY (Compound)'),\n                    value: 'apy',\n                  },\n                  {\n                    label: t('APR'),\n                    value: 'apr',\n                  }\n                ]}\n              // onOptionChange={handleSortOptionChange}\n              />\n            </Flex>\n            <Flex justifyContent=\"space-between\" width=\"100%\" pt=\"8px\" px=\"8px\">\n              <Input\n                  ref={minInputRef}\n                  type=\"number\"\n                  inputMode=\"decimal\"\n                  pattern=\"\\d*\"\n                  scale=\"sm\"\n                  placeholder=\"Min\"\n                  // onChange={handleExpectedRoiChange}\n                />\n                <Flex pt=\"8px\" px=\"5px\">\n                {t('to')}\n                </Flex>\n                <Input\n                  ref={maxInputRef}\n                  type=\"number\"\n                  inputMode=\"decimal\"\n                  pattern=\"\\d*\"\n                  scale=\"sm\"\n                  placeholder=\"Max\"\n                  // onChange={handleExpectedRoiChange}\n                />\n            </Flex>\n          </Flex>\n        </FooterInner>\n      )}\n      <Flex p=\"8px\" alignItems=\"center\" justifyContent=\"center\">\n        <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded((prev) => !prev)}>\n          <ExpandableText>\n            {isExpanded ? t('Hide APY/APR') : t('APY/APR')}\n          </ExpandableText>\n        </ExpandableLabel>\n      </Flex>\n    </CardFooter>\n  )\n}\n\nexport default AprApyFilter\n","import React from 'react'\nimport styled from 'styled-components'\nimport {\n  Text,\n  Heading,\n  Card,\n  CardHeader,\n  CardBody,\n  Flex,\n  Spinner,\n  Skeleton,\n  Tag,\n  Button,\n  Toggle,\n  useModal,\n} from '@pancakeswap/uikit'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport { useTranslation } from 'contexts/Localization'\nimport { Auction, AuctionStatus, ConnectedBidder } from 'config/constants/types'\nimport { getBalanceNumber } from 'utils/formatBalance'\n// import PlaceBidModal from '../PlaceBidModal'\nimport AuctionSchedule from './AuctionSchedule'\nimport CannotBidMessage from './CannotBidMessage'\nimport AprApyFilter from './AprApyFilter'\nimport RarityFilter from './RarityFilter'\nimport CharacteristicsFilter from './CharacteristicsFilter'\nimport useTheme from '../../../../hooks/useTheme'\n\nconst FilterCardCard = styled(Card)`\n  flex: 1;\n  background-color: #D9AB3A;\n`\nconst NewCardHeader = styled.div`\n    background: linear-gradient(166.77deg,#D9AB3A 100%,#D9AB3A 100%);\n    padding: 24px;\n`\nconst NewHeading = styled(Heading)`\n  color: #000;\n  text-align: center;\n  font-size: 24px;\n`\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    margin-bottom: 0;\n  }\n`\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  margin-bottom: 20px;\n\n  > div {\n    padding: 8px 0px;\n  }\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 5px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\nconst LabelWrapper = styled.div`\n  margin-bottom: 10px;\n\n  > ${Text} {\n    font-size: 12px;\n  }\n`\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\ninterface FilterCardProps {\n  handleChangeQuery: (e: React.ChangeEvent<HTMLInputElement>) => void\n  handleAprApyFilter?: (e: React.ChangeEvent<HTMLInputElement>) => void\n  handleSortOptionChange: (option: OptionProps) => void\n  freshwaterOnly?: boolean\n  saltwaterOnly?: boolean\n  setFreshwaterOnly?: (a: boolean) => void\n  setSaltwaterOnly?: (a: boolean) => void\n}\n\nconst FilterCard: React.FC<FilterCardProps> = ({ handleAprApyFilter, handleChangeQuery, handleSortOptionChange,\n  freshwaterOnly, setFreshwaterOnly, saltwaterOnly, setSaltwaterOnly }) => {\n  const { t } = useTranslation()\n\n  return (\n    <FilterCardCard mb={['24px', null, null, '0']}>\n      <NewCardHeader>\n        <NewHeading>{t('Filter')}</NewHeading>\n      </NewCardHeader>\n      <CardBody>\n        <ControlContainer>\n          {/* <ViewControls>\n            <ToggleWrapper> */}\n          {/* <Toggle checked={freshwaterOnly} onChange={() => setFreshwaterOnly(!freshwaterOnly)} scale=\"sm\" /> */}\n          {/* <Toggle checked scale=\"sm\" />\n              <Text> {t('Gladiators Schools')}</Text>\n            </ToggleWrapper>\n            <ToggleWrapper> */}\n          {/* <Toggle checked={saltwaterOnly} onChange={() => setSaltwaterOnly(!saltwaterOnly)} scale=\"sm\" /> */}\n          {/* <Toggle checked scale=\"sm\" />\n              <Text> {t('Arenas')}</Text>\n            </ToggleWrapper>\n          </ViewControls> */}\n\n          <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\n              <SearchInput\n                onChange={handleChangeQuery}\n                placeholder=\"Stake Tokens\" />\n            </LabelWrapper>\n          </FilterContainer>\n          <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\n              <Select\n                z-index=\"auto\"\n                options={[\n                  {\n                    label: t('APR'),\n                    value: 'apr',\n                  },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Total staked'),\n                    value: 'totalStaked',\n                  },\n                ]}\n                onOptionChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n      </CardBody>\n      <AprApyFilter />\n      {/* <RarityFilter/> */}\n      {/* <CharacteristicsFilter/> */}\n    </FilterCardCard>\n  )\n}\n\nexport default FilterCard\n","import React, { Suspense, useState, useEffect } from 'react'\nimport styled, { keyframes } from 'styled-components'\nimport axios from 'axios'\nimport { ethers } from 'ethers'\nimport { Card, Text } from '@pancakeswap/uikit'\nimport PreviewStakeCard from './PreviewStakeCard'\nimport GalleryNft from '../../../config/constants/gallery/gallery'\nimport { useTranslation } from 'contexts/Localization'\nimport { useLocation } from 'react-router-dom'\n\nconst Container = styled.div`\n  background-color: #000;\n  //   position: relative;\n  width: 100%;\n  overflow: hidden;\n  padding: 15px;\n`\n\nconst StyledImage = styled.img`\n  transition: opacity 1s linear;\n  object-fit: scale-down;\n  border-radius: 24px 24px 0 0;\n  max-height: 100%;\n  max-width: 100%;\n  width: auto;\n  height: auto;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  margin: auto;\n`\n\nconst cardAnimation = keyframes`\nfrom { transform: translate(0,  0px); }\n65%  { transform: translate(15px, 15px); }\nto   { transform: translate(-0px, 0); }  \n`\nconst AnimatedCard = styled(Card)`\n  animation-name: ${cardAnimation};\n  animation-duration: 3s;\n  animation-iteration-count: infinite;\n  animation-timing-function: ease-in-out;\n  margin-left: 30px;\n  margin-top: 5px;\n`\n\nconst StakeGladiatorCard = () => {\n  // const nft = GalleryNft.map(x=>x.glTF)\n  const { t } = useTranslation()\n  const location = useLocation()\n  const glTF = GalleryNft.map((x) => x.glTF)\n  // console.log(glTF, 'gltf')\n  let obj = location.state as any\n\n  const image = location?.state ? glTF.filter((i: any) => i === obj?.currentStatics?.glTF)[0] : ''\n  // <img src=\"/images/decorations/5.png\" alt={t('RoomPools')} />\n  const previewImageSrc = `/gallery/${image}/preview.png`\n  // console.log('IMAGE', image)\n  const previewImage = <StyledImage src={previewImageSrc} alt=\"Name\" />\n\n  return (\n    <>\n      {image !== '' ? (\n        <AnimatedCard style={{ background: '#d9ab3a' }}>\n          <img src={previewImageSrc} alt=\"name\" />\n\n          <Text textAlign=\"center\">Stake in Room</Text>\n        </AnimatedCard>\n      ) : (\n        <img src=\"/images/decorations/5.png\" />\n      )}\n    </>\n  )\n}\n\nexport default StakeGladiatorCard\n","import React, { useEffect, useMemo, useRef, useState } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { ethers } from 'ethers'\nimport { formatUnits } from 'ethers/lib/utils'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Heading, Flex, Image, Text } from '@pancakeswap/uikit'\nimport PageSection from 'components/PageSection'\nimport useTheme from 'hooks/useTheme'\nimport orderBy from 'lodash/orderBy'\nimport partition from 'lodash/partition'\nimport { useTranslation } from 'contexts/Localization'\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\nimport {\n  useFetchPublicPoolsData,\n  usePools,\n  useFetchUserPools,\n  useFetchCakeVault,\n  useCakeVault,\n} from 'state/pools/hooks'\nimport { usePollFarmsPublicData } from 'state/farms/hooks'\nimport { latinise } from 'utils/latinise'\nimport FlexLayout from 'components/Layout/Flex'\nimport Page from 'components/Layout/Page'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport { DeserializedPool } from 'state/types'\nimport { useUserPoolStakedOnly, useUserPoolsViewMode } from 'state/user/hooks'\nimport { ViewMode } from 'state/user/actions'\nimport Loading from 'components/Loading'\nimport PoolCard from './components/PoolCard'\nimport CakeVaultCard from './components/CakeVaultCard'\nimport PoolTabButtons from './components/PoolTabButtons'\nimport BountyCard from './components/BountyCard'\nimport HelpButton from './components/HelpButton'\nimport PoolsTable from './components/PoolsTable/PoolsTable'\nimport { getAprData, getCakeVaultEarnings } from './helpers'\nimport FilterCard from './components/FilterCard'\nimport StakeGladiatorCard from './components/StakeGladiatorCard'\nimport useStore from '../PoolTour3D/store'\nimport { useGladiatorNft } from 'hooks/useContract'\n\nconst CardLayout = styled(FlexLayout)`\n  justify-content: start;\n`\n\nconst PoolControls = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ControlStretch = styled(Flex)`\n  > div {\n    flex: 1;\n  }\n`\n\nconst FilterContainer = styled(Flex)`\n  width: 100%;\n  align-items: flex-start;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    gap: 24px;\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\n\nconst StyledHeader = styled(PageHeader)`\n  max-height: max-content;\n  margin-bottom: -40px;\n  padding-bottom: 40px;\n  overflow: hidden;\n  ${({ theme }) => theme.mediaQueries.md} {\n    max-height: 600px;\n  }\n`\n\nconst Left = styled(Flex)`\n  flex-direction: column;\n  flex: 1;\n`\n\nconst Right = styled(Flex)`\n  align-items: center;\n  justify-content: center;\n  flex: 0.5;\n  & img {\n    height: 50%;\n    width: 50%;\n    max-height: 330px;\n    border-radius: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & img {\n      height: auto;\n      width: auto;\n    }\n  }\n`\nconst NewPageSection = styled(PageSection)`\n  background-image: url(/images/decorations/pools-bg.png);\n  background-repeat: no-repeat;\n  background-size: 100% 100%;\n  background-attachment: fixed;\n`\n\nconst NUMBER_OF_POOLS_VISIBLE = 12\n\nconst ArenaPools: React.FC = () => {\n\n\n  const location = useLocation()\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { theme } = useTheme()\n  const { pools: poolsWithoutAutoVault, userDataLoaded } = usePools()\n  const [stakedOnly, setStakedOnly] = useUserPoolStakedOnly()\n  const [viewMode, setViewMode] = useUserPoolsViewMode()\n  const [numberOfPoolsVisible, setNumberOfPoolsVisible] = useState(NUMBER_OF_POOLS_VISIBLE)\n  const { observerRef, isIntersecting } = useIntersectionObserver()\n  const [searchQuery, setSearchQuery] = useState('')\n  console.log(\"queryyyyyyyyy\", searchQuery)\n\n  const [sortOption, setSortOption] = useState('hot')\n  const chosenPoolsLength = useRef(0)\n  const {\n    userData: { cakeAtLastUserAction, userShares },\n    fees: { performanceFee },\n    pricePerFullShare,\n    totalCakeInVault,\n  } = useCakeVault()\n  const accountHasVaultShares = userShares && userShares.gt(0)\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  const pools = useMemo(() => {\n    const cakePool = poolsWithoutAutoVault.find((pool) => pool.sousId === 0)\n    const cakeAutoVault = { ...cakePool, isAutoVault: true }\n    return [cakeAutoVault, ...poolsWithoutAutoVault]\n  }, [poolsWithoutAutoVault])\n\n  // TODO aren't arrays in dep array checked just by reference, i.e. it will rerender every time reference changes?\n  const [finishedPools, openPools] = useMemo(() => partition(pools, (pool) => pool.isFinished), [pools])\n  const stakedOnlyFinishedPools = useMemo(\n    () =>\n      finishedPools.filter((pool) => {\n        if (pool.isAutoVault) {\n          return accountHasVaultShares\n        }\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\n      }),\n    [finishedPools, accountHasVaultShares],\n  )\n  const stakedOnlyOpenPools = useMemo(\n    () =>\n      openPools.filter((pool) => {\n        if (pool.isAutoVault) {\n          return accountHasVaultShares\n        }\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\n      }),\n    [openPools, accountHasVaultShares],\n  )\n  const hasStakeInFinishedPools = stakedOnlyFinishedPools.length > 0\n\n  usePollFarmsPublicData()\n  useFetchCakeVault()\n  useFetchPublicPoolsData()\n  useFetchUserPools(account)\n\n  useEffect(() => {\n    if (isIntersecting) {\n      setNumberOfPoolsVisible((poolsCurrentlyVisible) => {\n        if (poolsCurrentlyVisible <= chosenPoolsLength.current) {\n          return poolsCurrentlyVisible + NUMBER_OF_POOLS_VISIBLE\n        }\n        return poolsCurrentlyVisible\n      })\n    }\n  }, [isIntersecting])\n\n  const showFinishedPools = location.pathname.includes('history')\n\n  const handleChangeSearchQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    console.log(\"room filter onchange\")\n    setSearchQuery(event.target.value)\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  const sortPools = (poolsToSort: DeserializedPool[]) => {\n    switch (sortOption) {\n      case 'apr':\n        // Ternary is needed to prevent pools without APR (like MIX) getting top spot\n        return orderBy(\n          poolsToSort,\n          (pool: DeserializedPool) => (pool.apr ? getAprData(pool, performanceFeeAsDecimal).apr : 0),\n          'desc',\n        )\n      case 'earned':\n        return orderBy(\n          poolsToSort,\n          (pool: DeserializedPool) => {\n            if (!pool.userData || !pool.earningTokenPrice) {\n              return 0\n            }\n            return pool.isAutoVault\n              ? getCakeVaultEarnings(\n                account,\n                cakeAtLastUserAction,\n                userShares,\n                pricePerFullShare,\n                pool.earningTokenPrice,\n              ).autoUsdToDisplay\n              : pool.userData.pendingReward.times(pool.earningTokenPrice).toNumber()\n          },\n          'desc',\n        )\n      case 'totalStaked':\n        return orderBy(\n          poolsToSort,\n          (pool: DeserializedPool) => {\n            let totalStaked = Number.NaN\n            if (pool.isAutoVault) {\n              if (totalCakeInVault.isFinite()) {\n                totalStaked = +formatUnits(\n                  ethers.BigNumber.from(totalCakeInVault.toString()),\n                  pool.stakingToken.decimals,\n                )\n              }\n            } else if (pool.sousId === 0) {\n              if (pool.totalStaked?.isFinite() && totalCakeInVault.isFinite()) {\n                const manualCakeTotalMinusAutoVault = ethers.BigNumber.from(pool.totalStaked.toString()).sub(\n                  totalCakeInVault.toString(),\n                )\n                totalStaked = +formatUnits(manualCakeTotalMinusAutoVault, pool.stakingToken.decimals)\n              }\n            } else if (pool.totalStaked?.isFinite()) {\n              totalStaked = +formatUnits(ethers.BigNumber.from(pool.totalStaked.toString()), pool.stakingToken.decimals)\n            }\n            return Number.isFinite(totalStaked) ? totalStaked : 0\n          },\n          'desc',\n        )\n      default:\n        return poolsToSort\n    }\n  }\n\n  // const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n  //   console.log(\"hiiiiiiiiiiiiiiiiiiiii\");\n  //   setSearchQuery(event.target.value)\n  // }\n\n  let chosenPools\n  if (showFinishedPools) {\n    chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools\n  } else {\n    chosenPools = stakedOnly ? stakedOnlyOpenPools : openPools\n  }\n  console.log(\"modelsToDisplayWithAPR\",chosenPools)\n\n  if (searchQuery) {\n    console.log(\"searchQuery\",searchQuery)\n    const lowercaseQuery = latinise(searchQuery.toLowerCase())\n    console.log(\"lowercaseQuery\", lowercaseQuery)\n    chosenPools = chosenPools.filter((pool) => {\n      return latinise(pool.earningToken.symbol.toLowerCase()).includes(lowercaseQuery)\n    })\n  }\n\n\n  chosenPools = sortPools(chosenPools).slice(0, numberOfPoolsVisible)\n  chosenPoolsLength.current = chosenPools.length\n  console.log(\"choosen\",chosenPools)\nconst indexx = chosenPools.map((pool, index) => index)\n  const cardLayout = (\n    <CardLayout>\n      {chosenPools.map((pool, index) =>\n        pool.isAutoVault ? (\n          <CakeVaultCard key=\"auto-dena\" pool={pool} showStakedOnly={stakedOnly} index={index} />\n        ) : (\n          <PoolCard key={pool.sousId} pool={pool} account={account} index={index}  />\n        ),\n      )}\n    </CardLayout>\n  )\n\n  interface tokenIdI {\n    room1: any\n    room2: any\n    room3: any\n  }\n  const initialState: tokenIdI = {\n    room1: [],\n    room2: [],\n    room3: []\n  }\n  const [tokenId, setTokenId] = useState<tokenIdI>(initialState)\n  const { currentStatics } = useStore((state) => state)\n  const gladiatorNftContract = useGladiatorNft()\n  // console.log('withdrawal', gladiatorNftContract)\n// console.log(\"tokenIdtokenIdtokenId\", tokenId, indexx);\n  const withdrawalStake = async () => {\n    // console.log('store', currentStatics)\n\n    const data = await gladiatorNftContract.getUserGladiator(account)\n    // console.log('dataaaa', data)\n    for (let i = 0; i < data.length; i++) {\n      console.log('FUNCTION WORKING')\n      const userInfo = await gladiatorNftContract.userInfo(account, data[i]._hex.toString())\n      const claim = userInfo.spot\n      console.log('USER INFO===>', userInfo)\n      const tokenIdCopy = {...tokenId}\n      if(claim === \"room1\"){\n        tokenIdCopy.room1.push(parseInt(data[i]._hex.toString(), 16))\n      }\n      if(claim === \"room2\"){\n        tokenIdCopy.room2.push(parseInt(data[i]._hex.toString(), 16))\n      }\n      if(claim === \"room3\"){\n        tokenIdCopy.room3.push(parseInt(data[i]._hex.toString(), 16))\n      }\n      setTokenId(tokenIdCopy)\n\n  }\n\n}\n\n//   useEffect(()=>{\n//     console.log('useeffffffffffffffffff')\n// withdrawalStake()\n//   },[gladiatorNftContract, account])\n\n\n\n\n  const tableLayout = <PoolsTable pools={chosenPools} account={account} userDataLoaded={userDataLoaded} />\n  return (\n    <>\n      {/* <PageHeader>\n        <Flex justifyContent=\"space-between\" flexDirection={['column', null, null, 'row']}>\n          <Flex flex=\"1\" flexDirection=\"column\" mr={['8px', 0]}>\n            <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\n              {t('Syrup Pools')}\n            </Heading>\n            <Heading scale=\"md\" color=\"text\">\n              {t('Just stake some tokens to earn.')}\n            </Heading>\n            <Heading scale=\"md\" color=\"text\">\n              {t('High APR, low risk.')}\n            </Heading>\n          </Flex>\n          <Flex flex=\"1\" height=\"fit-content\" justifyContent=\"center\" alignItems=\"center\" mt={['24px', null, '0']}>\n            <HelpButton />\n            <BountyCard />\n          </Flex>\n        </Flex>\n      </PageHeader> */}\n      <StyledHeader>\n        <Flex flexDirection={['column-reverse', null, 'row']}>\n          <Left>\n            <Heading as=\"h1\" scale=\"xxl\" my=\"24px\">\n              {t('Room Pools')}\n            </Heading>\n            <Text color=\"textSubtle\" mb=\"24px\">\n              {t('Browse through our waiting room pools and find one that your Gladiator can benefit the most and start earning.')}\n            </Text>\n            <Text color=\"textSubtle\">{t('Our waiting room area works as pools where you’ll stake your tokens and receive Denas.')}</Text>\n            <Text color=\"textSubtle\" mb=\"24px\">\n              {t(\n                'Denarius (DENA) is our ecosystem’s token! Earn as much as you can so you can enjoy our platform the most, and obviously monetize it.',\n              )}\n            </Text>\n            {/* <Link external href={FORM_ADDRESS}>\n              <Button>\n                <Text color=\"white\" bold fontSize=\"16px\" mr=\"4px\">\n                  {t('Apply for a Farm/Pool')}\n                </Text>\n              </Button>\n            </Link> */}\n          </Left>\n          <Right>\n            <StakeGladiatorCard />\n          </Right>\n        </Flex>\n      </StyledHeader>\n      <NewPageSection\n        innerProps={{ style: { margin: '0', width: '100%' } }}\n        background={theme.colors.background}\n        p=\"24px 0\"\n        index={2}\n        hasCurvedDivider={false}\n        dividerPosition=\"top\"\n      >\n        <FilterContainer flexDirection={['column', null, null, 'row']}>\n          <Flex flex=\"1\" flexDirection=\"column\" width=\"100%\" minWidth=\"288px\">\n            <FilterCard\n              handleChangeQuery={handleChangeSearchQuery}\n              handleSortOptionChange={handleSortOptionChange}\n            // freshwaterOnly={freshwaterOnly}\n            // saltwaterOnly={saltwaterOnly}\n            // setFreshwaterOnly={setFreshwaterOnly}\n            // setSaltwaterOnly={setSaltwaterOnly}\n            />\n          </Flex>\n\n          {cardLayout}\n          {account && !userDataLoaded && stakedOnly && (\n            <Flex justifyContent=\"center\" mb=\"4px\">\n              <Loading />\n            </Flex>\n          )}\n        </FilterContainer>\n        <div ref={observerRef} />\n        <StyledImage src=\"/images/decorations/3dpan.png\" alt=\"Gladiators illustration\" width={175} height={226} />\n      </NewPageSection>\n      {/* <Page>\n        <PoolControls>\n          <PoolTabButtons\n            stakedOnly={stakedOnly}\n            setStakedOnly={setStakedOnly}\n            hasStakeInFinishedPools={hasStakeInFinishedPools}\n            viewMode={viewMode}\n            setViewMode={setViewMode}\n          />\n          <FilterContainer>\n            <LabelWrapper>\n              <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\">\n                {t('Sort by')}\n              </Text>\n              <ControlStretch>\n                <Select\n                  options={[\n                    {\n                      label: t('Hot'),\n                      value: 'hot',\n                    },\n                    {\n                      label: t('APR'),\n                      value: 'apr',\n                    },\n                    {\n                      label: t('Earned'),\n                      value: 'earned',\n                    },\n                    {\n                      label: t('Total staked'),\n                      value: 'totalStaked',\n                    },\n                  ]}\n                  onOptionChange={handleSortOptionChange}\n                />\n              </ControlStretch>\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\">\n                {t('Search')}\n              </Text>\n              <SearchInput onChange={handleChangeSearchQuery} placeholder=\"Search Pools\" />\n            </LabelWrapper>\n          </FilterContainer>\n        </PoolControls>\n        {showFinishedPools && (\n          <Text fontSize=\"20px\" color=\"failure\" pb=\"32px\">\n            {t('These pools are no longer distributing rewards. Please unstake your tokens.')}\n          </Text>\n        )}\n        {account && !userDataLoaded && stakedOnly && (\n          <Flex justifyContent=\"center\" mb=\"4px\">\n            <Loading />\n          </Flex>\n        )}\n        {viewMode === ViewMode.CARD ? cardLayout : tableLayout}\n        <div ref={observerRef} />\n        <Image\n          mx=\"auto\"\n          mt=\"12px\"\n          src=\"/images/decorations/3d-syrup-bunnies.png\"\n          alt=\"Pancake illustration\"\n          width={192}\n          height={184.5}\n        />\n      </Page> */}\n    </>\n  )\n}\n\nexport default ArenaPools\n","import create from 'zustand';\n\nexport const useCountStore = create((set, get) => ({\n\tshowStatics: false,\n\tupdateShowStatics: ( value ) => {\n\t\tset({ showStatics: value });\n\t},\n\tcurrentStatics: null,\n\tupdateCurrentStatics: (value) => {\n\t\tset({ currentStatics: value });\n\t},\n\tcurrentHoverModel: null,\n\tupdateCurrentHoverModel: (value) => {\n\t\tset({ currentHoverModel: value });\n\t},\n\tmyGladiators: null,\n\tsetMyGladiators: data => {\n\t\tset({myGladiators: data})\n\t},\n\tschoolGladiators: null,\n\tsetSchoolGladiators: data => {\n\t\tset({schoolGladiators: data})\n\t},\n\tusersGladiators: null,\n\tsetUsersGladiators: data => {\n\t\tset({usersGladiators: data})\n\t},\n\tuserNftHashes: [],\n\tsettingUserNFTHashes: data => {\n\t\tset({userNftHashes: data})\n\t},\n\tschoolNftHashes: [],\n\tsettingSchoolNFTHashes: data => {\n\t\tset({schoolNftHashes: data})\n\t},\n\tnftHashes: [],\n\tsettingNFTHashes: data => {\n\t\tset({nftHashes: data})\n\t},\n\ttotalSupplies: 0,\n\tsetTotalSupplies: data => {\n\t\tset({totalSupplies: data})\n\t}\n}))\n\nexport default useCountStore;"],"sourceRoot":""}