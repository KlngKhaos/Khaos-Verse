{"version":3,"sources":["components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/hooks/useUnstakeFarms.ts","views/Farms/hooks/useStakeFarms.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/hooks/useApproveFarm.ts","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/types.ts","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx","components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx"],"names":["Wrapper","styled","div","theme","colors","primary","ExpandableSectionButton","onClick","expanded","t","useTranslation","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBnbAddress","tokens","wbnb","address","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","width","height","href","symbol","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","token","quoteToken","alignItems","mb","variant","primaryToken","secondaryToken","flexDirection","split","ml","AnnualRoiContainer","AnnualRoiDisplay","Text","DepositModal","max","stakedBalance","onConfirm","onDismiss","tokenName","displayApr","lpPrice","apr","cakePrice","useState","val","setVal","useToast","toastSuccess","toastError","pendingTx","setPendingTx","showRoiCalculator","setShowRoiCalculator","fullBalance","useMemo","getFullDisplayBalance","lpTokensToStake","BigNumber","fullBalanceNumber","usdToStake","times","interestBreakdown","getInterestBreakdown","principalInUSD","isNaN","toNumber","earningTokenPrice","annualRoi","formattedAnnualRoi","formatNumber","gt","handleChange","useCallback","e","currentTarget","validity","valid","value","replace","handleSelectMax","RoiCalculatorModal","linkLabel","stakingTokenBalance","plus","stakingTokenSymbol","stakingTokenPrice","linkHref","isFarm","initialValue","onBack","title","Modal","onSelectMax","onChange","inputTitle","mt","mr","scale","disabled","isFinite","eq","a","console","error","style","alignSelf","WithdrawModal","valNumber","useUnstakeFarms","pid","masterChefContract","useMasterchef","onUnstake","amount","unstakeFarm","useStakeFarms","onStake","stakeFarm","txHash","info","IconButtonWrapper","StakeAction","tokenBalance","location","useLocation","dispatch","useAppDispatch","account","useWeb3React","useLpTokenPrice","handleStake","fetchFarmUserDataAsync","pids","handleUnstake","displayBalance","stakedBalanceBigNumber","getBalanceAmount","lt","toFixed","ROUND_DOWN","useModal","onPresentDeposit","onPresentWithdraw","Balance","fontSize","decimals","getBalanceNumber","unit","prefix","some","item","pathname","includes","useHarvestFarm","farmPid","onReward","harvestFarm","HarvestAction","earnings","usePriceCakeBusd","rawEarningsBalance","BIG_ZERO","earningsBusd","multipliedBy","useApproveFarm","lpContract","callWithGasPrice","useCallWithGasPrice","onApprove","ethers","constants","MaxUint256","tx","wait","receipt","status","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","lpAddress","getAddress","isApproved","isGreaterThan","useERC20","handleApprove","textTransform","pr","lpSymbol","ConnectWalletButton","ApyLabelContainer","ApyButton","useFarmUser","onPresentApyModal","event","stopPropagation","StyledCard","Card","FarmCardInnerContainer","ExpandingWrapper","cardBorder","FarmCard","showExpandableSection","setShowExpandableSection","liquidity","toLocaleString","undefined","maximumFractionDigits","toUpperCase","earnLabel","dual","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","isPromotedFarm","isActive","isCommunity","display","CardActionsContainer","getBscScanLink","Container","text","textSubtle","AprWrapper","Apr","originalValue","hideButton","mediaQueries","sm","TokenWrapper","Farm","label","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isDesktop","useMatchBreakpoints","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","my","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","input","xl","ActionTitles","ActionContent","earningsBigNumber","isZero","Staked","marginBottom","marginTop","expandAnimation","keyframes","collapseAnimation","css","background","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","bsc","StakedAction","Label","ContentContainer","CellLayout","children","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","props","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","useDelayedUnmount","toggleActionPanel","useEffect","isMobile","isSmallerScreen","tableSchema","columnNames","map","column","Object","keys","key","columnIndex","indexOf","React","createElement","colSpan","card","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","useRef","data","columns","rows","useTable","sortColumn","row","original","current","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","show","ToggleView","viewMode","onToggle","handleToggle","mode","ViewMode","CARD","TABLE","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledImage","Image","getDisplayApr","cakeRewardsApr","lpRewardsApr","Farms","path","useFarms","farmsLP","userDataLoaded","query","setQuery","useUserFarmsViewMode","setViewMode","sortOption","setSortOption","useIntersectionObserver","observerRef","isIntersecting","chosenFarmsLength","isArchived","isInactive","usePollFarmsWithUserData","useUserFarmStakedOnly","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","quoteTokenPriceBusd","totalLiquidity","getFarmApr","poolWeight","ChainId","MAINNET","lowercaseQuery","latinise","numberOfFarmsVisible","setNumberOfFarmsVisible","chosenFarmsMemoized","chosenFarms","farms","orderBy","slice","sortFarms","length","farmsCurrentlyVisible","rowData","PageHeader","Page","checked","Select","options","onOptionChange","option","marginLeft","SearchInput","target","placeholder","sort","b","exact","renderContent","Loading","src","alt","StyledSpacer","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","l","Children","toArray","child","i","StyledTokenInput","isWarning","shadows","warning","inset","StyledInput","Input","xs","StyledErrorMessage","ModalInput","isBalanceZero","position","pl","balance","balanceUnits","parseUnits","formatBigNumber","pattern","inputMode","step","min","external"],"mappings":"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","file":"static/js/50.7589e64b.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? t('Hide') : t('Details')}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport tokens from 'config/constants/tokens'\n\nconst getLiquidityUrlPathParts = ({\n  quoteTokenAddress,\n  tokenAddress,\n}: {\n  quoteTokenAddress: string\n  tokenAddress: string\n}): string => {\n  const wBnbAddress = tokens.wbnb.address\n  const firstPart = !quoteTokenAddress || quoteTokenAddress === wBnbAddress ? 'BNB' : quoteTokenAddress\n  const secondPart = !tokenAddress || tokenAddress === wBnbAddress ? 'BNB' : tokenAddress\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  infoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  infoAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )}\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Skeleton } from '@pancakeswap/uikit'\nimport { Token } from '@pancakeswap/sdk'\nimport { CommunityTag, CoreTag } from 'components/Tags'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  token: Token\n  quoteToken: Token\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, isCommunityFarm, token, quoteToken }) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          {multiplier ? (\n            <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n          ) : (\n            <Skeleton ml=\"4px\" width={42} height={28} />\n          )}\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Button, Modal, LinkExternal, CalculateIcon, IconButton } from '@pancakeswap/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance, formatNumber } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\n\nconst AnnualRoiContainer = styled(Flex)`\n  cursor: pointer;\n`\n\nconst AnnualRoiDisplay = styled(Text)`\n  width: 72px;\n  max-width: 72px;\n  overflow: hidden;\n  text-align: right;\n  text-overflow: ellipsis;\n`\n\ninterface DepositModalProps {\n  max: BigNumber\n  stakedBalance: BigNumber\n  multiplier?: string\n  lpPrice: BigNumber\n  lpLabel?: string\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({\n  max,\n  stakedBalance,\n  onConfirm,\n  onDismiss,\n  tokenName = '',\n  multiplier,\n  displayApr,\n  lpPrice,\n  lpLabel,\n  apr,\n  addLiquidityUrl,\n  cakePrice,\n}) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const lpTokensToStake = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const usdToStake = lpTokensToStake.times(lpPrice)\n\n  const interestBreakdown = getInterestBreakdown({\n    principalInUSD: !lpTokensToStake.isNaN() ? usdToStake.toNumber() : 0,\n    apr,\n    earningTokenPrice: cakePrice.toNumber(),\n  })\n\n  const annualRoi = cakePrice.times(interestBreakdown[3])\n  const formattedAnnualRoi = formatNumber(\n    annualRoi.toNumber(),\n    annualRoi.gt(10000) ? 0 : 2,\n    annualRoi.gt(10000) ? 0 : 2,\n  )\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  if (showRoiCalculator) {\n    return (\n      <RoiCalculatorModal\n        linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n        stakingTokenBalance={stakedBalance.plus(max)}\n        stakingTokenSymbol={tokenName}\n        stakingTokenPrice={lpPrice.toNumber()}\n        earningTokenPrice={cakePrice.toNumber()}\n        apr={apr}\n        multiplier={multiplier}\n        displayApr={displayApr}\n        linkHref={addLiquidityUrl}\n        isFarm\n        initialValue={val}\n        onBack={() => setShowRoiCalculator(false)}\n      />\n    )\n  }\n\n  return (\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={t('Stake')}\n      />\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n        <Text mr=\"8px\" color=\"textSubtle\">\n          {t('Annual ROI at current rates')}:\n        </Text>\n        <AnnualRoiContainer alignItems=\"center\" onClick={() => setShowRoiCalculator(true)}>\n          <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\n          <IconButton variant=\"text\" scale=\"sm\">\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </AnnualRoiContainer>\n      </Flex>\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={\n            pendingTx || !lpTokensToStake.isFinite() || lpTokensToStake.eq(0) || lpTokensToStake.gt(fullBalanceNumber)\n          }\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {t('Get %symbol%', { symbol: tokenName })}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import { useCallback } from 'react'\nimport { unstakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useUnstakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      await unstakeFarm(masterChefContract, pid, amount)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstakeFarms\n","import { useCallback } from 'react'\nimport { stakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useStakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stakeFarm(masterChefContract, pid, amount)\n      console.info(txHash)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStakeFarms\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useLpTokenPrice } from 'state/farms/hooks'\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\nimport useStakeFarms from '../../hooks/useStakeFarms'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  multiplier?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n  lpLabel?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  multiplier,\n  apr,\n  displayApr,\n  addLiquidityUrl,\n  cakePrice,\n  lpLabel,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const lpPrice = useLpTokenPrice(tokenName)\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return '<0.0000001'\n    }\n    if (stakedBalanceBigNumber.gt(0)) {\n      return stakedBalanceBigNumber.toFixed(8, BigNumber.ROUND_DOWN)\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      stakedBalance={stakedBalance}\n      onConfirm={handleStake}\n      tokenName={tokenName}\n      multiplier={multiplier}\n      lpPrice={lpPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      addLiquidityUrl={addLiquidityUrl}\n      cakePrice={cakePrice}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <Button\n        onClick={onPresentDeposit}\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n      >\n        {t('Stake LP')}\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton\n          variant=\"tertiary\"\n          onClick={onPresentDeposit}\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n        >\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\n          <Balance\n            fontSize=\"12px\"\n            color=\"textSubtle\"\n            decimals={2}\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n        )}\n      </Flex>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import { useCallback } from 'react'\nimport { harvestFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useHarvestFarm = (farmPid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    await harvestFarm(masterChefContract, farmPid)\n  }, [farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport default useHarvestFarm\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport useToast from 'hooks/useToast'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useWeb3React } from '@web3-react/core'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport Balance from 'components/Balance'\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account } = useWeb3React()\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n        {earningsBusd > 0 && (\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n        )}\n      </Flex>\n      <Button\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          try {\n            await onReward()\n            toastSuccess(\n              `${t('Harvested')}!`,\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\n            )\n          } catch (e) {\n            toastError(\n              t('Error'),\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n            )\n            console.error(e)\n          } finally {\n            setPendingTx(false)\n          }\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n        }}\n      >\n        {t('Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import { useCallback } from 'react'\nimport { ethers, Contract } from 'ethers'\nimport { useMasterchef } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\n\nconst useApproveFarm = (lpContract: Contract) => {\n  const masterChefContract = useMasterchef()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await callWithGasPrice(lpContract, 'approve', [\n        masterChefContract.address,\n        ethers.constants.MaxUint256,\n      ])\n      const receipt = await tx.wait()\n      return receipt.status\n    } catch (e) {\n      return false\n    }\n  }, [lpContract, masterChefContract, callWithGasPrice])\n\n  return { onApprove: handleApprove }\n}\n\nexport default useApproveFarm\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { DeserializedFarm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\nimport useApproveFarm from '../../hooks/useApproveFarm'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends DeserializedFarm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n  lpLabel?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl, cakePrice, lpLabel }) => {\n  const { t } = useTranslation()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = farm\n  const { allowance, tokenBalance, stakedBalance, earnings } = farm.userData || {}\n  const lpAddress = getAddress(lpAddresses)\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const dispatch = useAppDispatch()\n\n  const lpContract = useERC20(lpAddress)\n\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={farm.lpSymbol}\n        pid={pid}\n        apr={farm.apr}\n        lpLabel={lpLabel}\n        cakePrice={cakePrice}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {t('Enable Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          DENA\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          {farm.lpSymbol}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Staked')}\n        </Text>\n      </Flex>\n      {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Flex, IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks'\n\nconst ApyLabelContainer = styled(Flex)`\n  cursor: pointer;\n\n  &:hover {\n    opacity: 0.5;\n  }\n`\n\nexport interface ApyButtonProps {\n  variant: 'text' | 'text-and-button'\n  pid: number\n  lpSymbol: string\n  lpLabel?: string\n  multiplier: string\n  cakePrice?: BigNumber\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  variant,\n  pid,\n  lpLabel,\n  lpSymbol,\n  cakePrice,\n  apr,\n  multiplier,\n  displayApr,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const { tokenBalance, stakedBalance } = useFarmUser(pid)\n  const [onPresentApyModal] = useModal(\n    <RoiCalculatorModal\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n      stakingTokenBalance={stakedBalance.plus(tokenBalance)}\n      stakingTokenSymbol={lpSymbol}\n      stakingTokenPrice={lpPrice.toNumber()}\n      earningTokenPrice={cakePrice.toNumber()}\n      apr={apr}\n      multiplier={multiplier}\n      displayApr={displayApr}\n      linkHref={addLiquidityUrl}\n      isFarm\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <ApyLabelContainer alignItems=\"center\" onClick={handleClickButton}>\n      {displayApr}%\n      {variant === 'text-and-button' && (\n        <IconButton variant=\"text\" scale=\"sm\" ml=\"4px\">\n          <CalculateIcon width=\"18px\" />\n        </IconButton>\n      )}\n    </ApyLabelContainer>\n  )\n}\n\nexport default ApyButton\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Card, Flex, Text, Skeleton } from '@pancakeswap/uikit'\nimport { DeserializedFarm } from 'state/types'\nimport { getBscScanLink } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends DeserializedFarm {\n  apr?: number\n  lpRewardsApr?: number\n  liquidity?: BigNumber\n}\n\nconst StyledCard = styled(Card)`\n  align-self: baseline;\n`\n\nconst FarmCardInnerContainer = styled(Flex)`\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n`\n\nconst ExpandingWrapper = styled.div`\n  padding: 24px;\n  border-top: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  displayApr: string\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const totalValueFormatted =\n    farm.liquidity && farm.liquidity.gt(0)\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n      : ''\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t('DENA + Fees')\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const lpAddress = getAddress(farm.lpAddresses)\n  const isPromotedFarm = farm.token.symbol === 'DENA'\n\n  return (\n    <StyledCard isActive={isPromotedFarm}>\n      <FarmCardInnerContainer>\n        <CardHeading\n          lpLabel={lpLabel}\n          multiplier={farm.multiplier}\n          isCommunityFarm={farm.isCommunity}\n          token={farm.token}\n          quoteToken={farm.quoteToken}\n        />\n        {!removed && (\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\n            <Text>{t('APR')}:</Text>\n            <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n              {farm.apr ? (\n                <ApyButton\n                  variant=\"text-and-button\"\n                  pid={farm.pid}\n                  lpSymbol={farm.lpSymbol}\n                  multiplier={farm.multiplier}\n                  lpLabel={lpLabel}\n                  addLiquidityUrl={addLiquidityUrl}\n                  cakePrice={cakePrice}\n                  apr={farm.apr}\n                  displayApr={displayApr}\n                />\n              ) : (\n                <Skeleton height={24} width={80} />\n              )}\n            </Text>\n          </Flex>\n        )}\n        <Flex justifyContent=\"space-between\">\n          <Text>{t('Earn')}:</Text>\n          <Text bold>{earnLabel}</Text>\n        </Flex>\n        <CardActionsContainer\n          farm={farm}\n          lpLabel={lpLabel}\n          account={account}\n          cakePrice={cakePrice}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </FarmCardInnerContainer>\n\n      <ExpandingWrapper>\n        <ExpandableSectionButton\n          onClick={() => setShowExpandableSection(!showExpandableSection)}\n          expanded={showExpandableSection}\n        />\n        {showExpandableSection && (\n          <DetailsSection\n            removed={removed}\n            bscScanAddress={getBscScanLink(lpAddress, 'address')}\n            infoAddress={`/info/pool/${lpAddress}`}\n            totalValueFormatted={totalValueFormatted}\n            lpLabel={lpLabel}\n            addLiquidityUrl={addLiquidityUrl}\n          />\n        )}\n      </ExpandingWrapper>\n    </StyledCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  pid: number\n  lpLabel: string\n  lpSymbol: string\n  tokenAddress?: string\n  quoteTokenAddress?: string\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  pid,\n  lpLabel,\n  lpSymbol,\n  multiplier,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <ApyButton\n          variant={hideButton ? 'text' : 'text-and-button'}\n          pid={pid}\n          lpSymbol={lpSymbol}\n          lpLabel={lpLabel}\n          multiplier={multiplier}\n          cakePrice={cakePrice}\n          apr={originalValue}\n          displayApr={value}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/farms/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from '@pancakeswap/uikit'\nimport { Token } from '@pancakeswap/sdk'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  token: Token\n  quoteToken: Token\n}\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst TokenWrapper = styled.div`\n  padding-right: 8px;\n  width: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Farming')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <TokenWrapper>\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\n      </TokenWrapper>\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\n  if (userDataReady) {\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\n  }\n  return (\n    <Amount earned={0}>\n      <Skeleton width={60} />\n    </Amount>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isDesktop } = useMatchBreakpoints()\n\n  return (\n    <Container>\n      {!isDesktop && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <>\n      <Text color=\"primary\">\n        {t(\n          'The Multiplier represents the proportion of DENA rewards each farm receives, as a proportion of the DENA produced each block.',\n        )}\n      </Text>\n      <Text my=\"24px\" color=\"primary\">\n        {t('For example, if a 1x farm received 1 DENA per block, a 40x farm would receive 40 DENA per block.')}\n      </Text>\n      <Text color=\"primary\">{t('This amount is already included in all APR calculations for the farm.')}</Text>\n    </>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity =\n    liquidity && liquidity.gt(0) ? (\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    ) : (\n      <Skeleton width={60} />\n    )\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Total value of the funds in this farm’s liquidity pool'),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n","import React, { useState } from 'react'\nimport { Button, Heading, Skeleton, Text } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport Balance from 'components/Balance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\n\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\n\ninterface HarvestActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\n  const { toastSuccess, toastError } = useToast()\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const cakePrice = usePriceCakeBusd()\n  let earnings = BIG_ZERO\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber)\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          DENA\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Heading>{displayBalance}</Heading>\n          {earningsBusd > 0 && (\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n          )}\n        </div>\n        <Button\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onReward()\n              toastSuccess(\n                `${t('Harvested')}!`,\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\n              )\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n          }}\n          ml=\"4px\"\n        >\n          {t('Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text, Heading } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport { BigNumber } from 'bignumber.js'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport Balance from 'components/Balance'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser, useLpTokenPrice, usePriceCakeBusd } from 'state/farms/hooks'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport useStakeFarms from '../../../hooks/useStakeFarms'\nimport useApproveFarm from '../../../hooks/useApproveFarm'\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n  lpLabel?: string\n  displayApr?: string\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  apr,\n  multiplier,\n  lpSymbol,\n  lpLabel,\n  lpAddresses,\n  quoteToken,\n  token,\n  userDataReady,\n  displayApr,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const cakePrice = usePriceCakeBusd()\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = getAddress(lpAddresses)\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\n    }\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      lpPrice={lpPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      stakedBalance={stakedBalance}\n      onConfirm={handleStake}\n      tokenName={lpSymbol}\n      multiplier={multiplier}\n      addLiquidityUrl={addLiquidityUrl}\n      cakePrice={cakePrice}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\n  )\n  const lpContract = useERC20(lpAddress)\n  const dispatch = useAppDispatch()\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <ConnectWalletButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n              {lpSymbol}\n            </Text>\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n              {t('Staked')}\n            </Text>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Heading>{displayBalance()}</Heading>\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\n                  unit=\" USD\"\n                  prefix=\"~\"\n                />\n              )}\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\n            {t('Stake').toUpperCase()}\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\n            {lpSymbol}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Enable Farm')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBscScanLink } from 'utils'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  multiplier,\n  liquidity,\n  userDataReady,\n  expanded,\n}) => {\n  const farm = details\n\n  const { t } = useTranslation()\n  const isActive = farm.multiplier !== '0X'\n  const { quoteToken, token, dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const lpAddress = getAddress(farm.lpAddresses)\n  const bsc = getBscScanLink(lpAddress, 'address')\n  const info = `/info/pool/${lpAddress}`\n\n  return (\n    <Container expanded={expanded}>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`/add/${liquidityUrlPathParts}`}>\n              {t('Get %symbol%', { symbol: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\n        <TagsContainer>\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{t('APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} userDataReady={userDataReady} />\n        <StakedAction {...farm} userDataReady={userDataReady} lpLabel={lpLabel} displayApr={apr.value} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useFarmUser } from 'state/farms/hooks'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { details, userDataReady } = props\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  }\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount])\n\n  const { isDesktop, isMobile } = useMatchBreakpoints()\n\n  const isSmallerScreen = !isDesktop\n  const tableSchema = isSmallerScreen ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n\n  const handleRenderRow = () => {\n    if (!isMobile) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('APR')}>\n                        <Apr {...props.apr} hideButton={isSmallerScreen} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={t('Earned')}>\n                <Earned {...props.earned} userDataReady={userDataReady} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={t('APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n  scroll-margin-top: 64px;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container id=\"farms-table\">\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface FarmTabButtonsProps {\n  hasStakeInFinishedFarms: boolean\n}\n\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\n  const { url } = useRouteMatch()\n  const location = useLocation()\n  const { t } = useTranslation()\n\n  let activeIndex\n  switch (location.pathname) {\n    case '/farms':\n      activeIndex = 0\n      break\n    case '/farms/history':\n      activeIndex = 1\n      break\n    case '/farms/archived':\n      activeIndex = 2\n      break\n    default:\n      activeIndex = 0\n      break\n  }\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {t('Live')}\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedFarms}>\n          <ButtonMenuItem id=\"finished-farms-button\" as={Link} to={`${url}/history`}>\n            {t('Finished')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\nimport { ViewMode } from 'state/user/actions'\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text, Button, ArrowForwardIcon, Flex } from '@pancakeswap/uikit'\nimport { ChainId } from '@pancakeswap/sdk'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/Layout/Flex'\nimport Page from 'components/Layout/Page'\nimport { useFarms, usePollFarmsWithUserData, usePriceCakeBusd } from 'state/farms/hooks'\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\nimport { DeserializedFarm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getFarmApr } from 'utils/apr'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport { useUserFarmStakedOnly, useUserFarmsViewMode } from 'state/user/hooks'\nimport { ViewMode } from 'state/user/actions'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport Loading from 'components/Loading'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema } from './components/types'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\n  if (cakeRewardsApr && lpRewardsApr) {\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  if (cakeRewardsApr) {\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  return null\n}\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = useUserFarmsViewMode()\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n  const { observerRef, isIntersecting } = useIntersectionObserver()\n  const chosenFarmsLength = useRef(0)\n\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n\n  usePollFarmsWithUserData(isArchived)\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive)\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: DeserializedFarm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteTokenPriceBusd) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteTokenPriceBusd)\n        const { cakeRewardsApr, lpRewardsApr } = isActive\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET])\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\n\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n\n  const chosenFarmsMemoized = useMemo(() => {\n    let chosenFarms = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  chosenFarmsLength.current = chosenFarmsMemoized.length\n\n  useEffect(() => {\n    if (isIntersecting) {\n      setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\n        if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\n          return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\n        }\n        return farmsCurrentlyVisible\n      })\n    }\n  }, [isIntersecting])\n\n  const rowData = chosenFarmsMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\n        pid: farm.pid,\n        multiplier: farm.multiplier,\n        lpLabel,\n        lpSymbol: farm.lpSymbol,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n\n    return (\n      <FlexLayout>\n        <Route exact path={`${path}`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed={false}\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/history`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/archived`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n      </FlexLayout>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <PageHeader>\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\n          {t('Farms')}\n        </Heading>\n        <Heading scale=\"lg\" color=\"text\">\n          {t('Stake LP tokens to earn.')}\n        </Heading>\n      </PageHeader>\n      <Page>\n        <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle\n                id=\"staked-only-farms\"\n                checked={stakedOnly}\n                onChange={() => setStakedOnly(!stakedOnly)}\n                scale=\"sm\"\n              />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\n              <Select\n                options={[\n                  {\n                    label: t('Hot'),\n                    value: 'hot',\n                  },\n                  {\n                    label: t('APR'),\n                    value: 'apr',\n                  },\n                  {\n                    label: t('Multiplier'),\n                    value: 'multiplier',\n                  },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Liquidity'),\n                    value: 'liquidity',\n                  },\n                ]}\n                onOptionChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        {renderContent()}\n        {account && !userDataLoaded && stakedOnly && (\n          <Flex justifyContent=\"center\">\n            <Loading />\n          </Flex>\n        )}\n        <div ref={observerRef} />\n        <StyledImage src=\"/images/decorations/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\nimport Spacer from './Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n\n  @media (min-width: 320px) and (max-width: 480px) {\n    display: flex;\n    flex-direction: column !important;\n  }\n  @media (min-width: 480px) and (max-width: 786px) {\n    display: flex;\n    flex-direction: column !important;\n  }\n  @media (min-width: 786px) and (max-width: 1224px) {\n    display: flex;\n    flex-direction: column !important;\n  }\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  width: 100%;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { parseUnits } from 'ethers/lib/utils'\nimport { formatBigNumber } from 'utils/formatBalance'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n  border: none;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = (balance: string) => {\n    if (isBalanceZero) {\n      return '0'\n    }\n\n    const balanceUnits = parseUnits(balance, decimals)\n    return formatBigNumber(balanceUnits, decimals, decimals)\n  }\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {t('Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n"],"sourceRoot":""}