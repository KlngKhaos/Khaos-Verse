{"version":3,"sources":["../node_modules/date-fns/esm/compareAsc/index.js","../node_modules/date-fns/esm/_lib/cloneObject/index.js","../node_modules/date-fns/esm/differenceInSeconds/index.js","views/ProfileCreation/config.ts","views/ProfileCreation/contexts/ProfileCreationProvider.tsx","views/ProfileCreation/Header.tsx","views/ProfileCreation/WalletNotConnected.tsx","views/ProfileCreation/NextStepButton.tsx","views/ProfileCreation/contexts/hook.ts","views/ProfileCreation/Mint.tsx","views/ProfileCreation/ProfilePicture.tsx","views/ProfileCreation/TeamSelection.tsx","../node_modules/date-fns/esm/isLastDayOfMonth/index.js","../node_modules/date-fns/esm/differenceInMonths/index.js","../node_modules/date-fns/esm/formatDistance/index.js","views/ProfileCreation/UserName.tsx","utils/fetchWithTimeout.ts","views/ProfileCreation/ConfirmProfileCreationModal.tsx","views/ProfileCreation/Steps.tsx","views/ProfileCreation/index.tsx","state/nftMarket/hooks.ts","hooks/useApproveConfirmTransaction.ts","components/ApproveConfirmButtons.tsx","../node_modules/lodash/_shuffleSelf.js","../node_modules/date-fns/esm/differenceInMilliseconds/index.js","state/teams/hooks.ts","views/Nft/market/Profile/hooks/useFetchUserNfts.tsx","views/ProfileCreation/SelectionCard.tsx","../node_modules/lodash/shuffle.js","../node_modules/lodash/_arrayShuffle.js","../node_modules/lodash/_baseShuffle.js"],"names":["compareAsc","dirtyDateLeft","dirtyDateRight","requiredArgs","arguments","dateLeft","toDate","dateRight","diff","getTime","cloneObject","dirtyObject","assign","differenceInSeconds","differenceInMilliseconds","Math","floor","ceil","MINT_COST","parseUnits","REGISTER_COST","STARTER_NFT_GLADIATOR_COLLECTIBLE_IDS","totalCost","add","allowance","mul","initialState","isInitialized","currentStep","teamId","selectedNft","collectionAddress","tokenId","userName","minimumNrtRequired","reducer","state","action","type","step","ProfileCreationContext","createContext","ProfileCreationProvider","children","useReducer","dispatch","account","useWeb3React","useEffect","isSubscribed","a","GladiatorCollectibleFactoryContract","getGladiatorCollectibleFactoryContract","canMint","fetchData","actions","useMemo","nextStep","setTeamId","setSelectedNft","setUserName","Provider","value","Wrapper","styled","div","theme","colors","textSubtle","steps","Header","t","useTranslation","useContext","as","scale","color","mb","id","href","nftsBaseUrl","variant","map","translationKey","index","WalletNotConnected","ConnectWalletButton","NextStepButton","props","endIcon","useProfileCreation","Mint","useState","selectedBunnyId","setSelectedBunnyId","starterNfts","setStarterNfts","collections","useGetCollections","toastSuccess","useToast","useAppDispatch","nrtContract","useNrt","gladiatorCollectibleFactoryContract","useGladiatorCollectibleFactory","useGetNrtBalance","nrtBalance","balance","hasMinimumNrtRequired","fetchStatus","FetchStatus","Fetched","gte","callWithGasPrice","useCallWithGasPrice","getStarterNfts","getNftsFromCollectionApi","gladiatorCollectiblesAddress","allPbTokens","data","nfts","gladiatorCollectibleId","length","useApproveConfirmTransaction","onRequiresApproval","address","response","onApprove","toString","onConfirm","onApproveSuccess","onSuccess","fetchUserNfts","isApproving","isApproved","isConfirmed","isConfirming","handleApprove","handleConfirm","fontSize","bold","num","formatUnits","nft","SelectionCard","name","image","thumbnail","isChecked","onChange","disabled","ApproveConfirmButtons","isApproveDisabled","isConfirmDisabled","onClick","Link","RouterLink","primary","NftWrapper","ProfilePicture","library","setIsApproved","setIsApproving","userProfileCreationNfts","setUserProfileCreationNfts","profileContract","useProfileContract","useUserNfts","userNftsInitializationState","fetchUserGladiatorCollectibles","nftsByCollection","Array","from","reduce","acc","Set","NFT_ROLE","nftRole","collectionsNftRoleCalls","params","multicall","profileABI","collectionRolesRaw","collectionRoles","flat","filter","indexOf","console","error","UserNftInitializationState","INITIALIZED","toastError","contract","getErc721Contract","getSigner","getGladiatorProfileAddress","tx","Toast","txHash","hash","wait","status","to","style","marginLeft","walletNft","location","NftLocation","WALLET","width","height","isLoading","spin","undefined","Team","currentTeamId","teams","useTeams","handleTeamSelection","parseInt","teamValues","shuffle","Object","values","team","images","md","isJoinable","mr","users","toLocaleString","isLastDayOfMonth","dirtyDate","date","endOfDay","endOfMonth","differenceInMonths","result","sign","difference","abs","differenceInCalendarMonths","getMonth","getDate","setDate","setMonth","isLastMonthNotFull","Number","MINUTES_IN_DAY","MINUTES_IN_MONTH","formatDistance","dirtyBaseDate","options","locale","defaultLocale","RangeError","comparison","isNaN","localizeOptions","addSuffix","Boolean","months","seconds","offsetInSeconds","getTimezoneOffsetInMilliseconds","minutes","round","includeSeconds","hours","days","nearestMonth","monthsSinceStartOfYear","years","ExistingUserState","fetchWithTimeout","url","timeout","fetchOptions","Promise","race","fetch","_","reject","setTimeout","Error","ConfirmProfileCreationModal","onDismiss","toJSON","receipt","fetchProfile","transactionHash","title","justifyContent","InputWrap","Input","UIKitInput","Indicator","Flex","UserName","isAcknowledged","setIsAcknowledged","useWeb3Provider","connector","IDLE","existingUserState","setExistingUserState","isValid","setIsValid","setIsLoading","message","setMessage","fetchAbortSignal","useRef","useModal","onPresentConfirmProfileCreation","isUserCreated","CREATED","usernameToCheck","setUsernameToCheck","debouncedUsernameToCheck","useDebounce","fetchUsernameToCheck","abortSignal","current","API_PROFILE","method","signal","res","ok","abort","AbortController","signMessage","signature","headers","body","JSON","stringify","username","password","email","json","dateCreated","parseISO","created_at","Date","NEW","fetchUser","event","target","isWarning","isSuccess","minLength","maxLength","placeholder","py","minHeight","htmlFor","display","cursor","marginBottom","alignItems","flex","checked","ml","mt","Steps","TeamSelection","ProfileCreation","useProfile","hasProfile","useFetchUserNfts","useFetchCollections","PageLoader","toLowerCase","Page","fetchCollections","useFetchCollection","fetchCollection","useFetchByGladiatorCollectibleIdAndUpdate","bunnyId","useSelector","nftMarket","loadingState","latestGladiatorCollectiblesUpdateAt","isUpdatingGladiatorCollectibles","existingGladiatorCollectibleInState","useGetAllGladiatorCollectibleByGladiatorCollectibleId","existingTokensWithGladiatorCollectibleId","allGladiatorCollectibles","useNftsFromCollection","allExistingPBTokenIds","firstGladiatorCollectible","existingMetadata","description","collection","collectionName","fetchMoreGladiatorCollectibles","orderDirection","fetchNewPBAndUpdateExisting","useLoadingState","useGetCollection","checksummedCollectionAddress","isAddress","attributes","marketData","isTradable","useGetNFTInitializationState","initializationState","user","useGetNftFilters","collectionFilter","filters","activeFilters","useGetNftFilterLoadingState","Idle","useGetNftOrdering","ordering","field","direction","useGetNftShowOnlyOnSale","showOnlyOnSale","useGetNftActivityFilters","activityFilters","typeFilters","collectionFilters","approvalState","confirmState","noop","handlePreApprove","then","log","ButtonArrangement","StyledApproveConfirmButtonRow","mediaQueries","Button","UIKitButton","iconAttrs","ChevronRight","ChevronRightIcon","attrs","ChevronBottom","ChevronDownIcon","spinnerIcon","buttonArrangement","ROW","confirmLabel","confirmId","confirmButtonText","baseRandom","require","module","exports","array","size","lastIndex","rand","useTeam","fetchTeam","fetchTeams","profile","isProfileInitialized","isProfileLoading","hasProfileNft","profileNftTokenId","profileNftCollectionAddress","profileNftWithCollectionAddress","nftLocation","PROFILE","previousProfileNftTokenId","usePreviousValue","shouldFetch","UNINITIALIZED","hasAccountSwitched","isEmpty","Label","label","isDisabled","Body","Children","StyledBackgroundImage","src","e","arrayShuffle","baseShuffle","isArray","copyArray","shuffleSelf"],"mappings":"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","file":"static/js/19.dbd58ee0.chunk.js","sourcesContent":["import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\n\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","import assign from \"../assign/index.js\";\nexport default function cloneObject(dirtyObject) {\n  return assign({}, dirtyObject);\n}","import differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of seconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\n\nexport default function differenceInSeconds(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / 1000;\n  return diff > 0 ? Math.floor(diff) : Math.ceil(diff);\n}","import { parseUnits } from '@ethersproject/units'\n\nexport const MINT_COST = parseUnits('1')\nexport const REGISTER_COST = parseUnits('0.5')\nexport const ALLOWANCE_MULTIPLIER = 5\nexport const STARTER_NFT_GLADIATOR_COLLECTIBLE_IDS = ['0', '1', '2', '3'] \nexport const USERNAME_MIN_LENGTH = 3\nexport const USERNAME_MAX_LENGTH = 15\n","import React, { createContext, useEffect, useMemo, useReducer } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { getGladiatorCollectibleFactoryContract } from 'utils/contractHelpers'\nimport { MINT_COST, REGISTER_COST, ALLOWANCE_MULTIPLIER } from '../config'\nimport { Actions, State, ContextType } from './types'\n\nconst totalCost = MINT_COST.add(REGISTER_COST)\nconst allowance = totalCost.mul(ALLOWANCE_MULTIPLIER)\n\nconst initialState: State = {\n  isInitialized: false,\n  currentStep: 0,\n  teamId: null,\n  selectedNft: {\n    collectionAddress: null,\n    tokenId: null,\n  },\n  userName: '',\n  minimumNrtRequired: totalCost,\n  allowance,\n}\n\nconst reducer = (state: State, action: Actions): State => {\n  switch (action.type) {\n    case 'initialize':\n      return {\n        ...state,\n        isInitialized: true,\n        currentStep: action.step,\n      }\n    case 'next_step':\n      return {\n        ...state,\n        currentStep: state.currentStep + 1,\n      }\n    case 'set_team':\n      return {\n        ...state,\n        teamId: action.teamId,\n      }\n    case 'set_selected_nft':\n      return {\n        ...state,\n        selectedNft: {\n          tokenId: action.tokenId,\n          collectionAddress: action.collectionAddress,\n        },\n      }\n    case 'set_username':\n      return {\n        ...state,\n        userName: action.userName,\n      }\n    default:\n      return state\n  }\n}\n\nexport const ProfileCreationContext = createContext<ContextType>(null)\n\nconst ProfileCreationProvider: React.FC = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const { account } = useWeb3React()\n\n  // Initial checks\n  useEffect(() => {\n    let isSubscribed = true\n\n    const fetchData = async () => {\n      const GladiatorCollectibleFactoryContract = getGladiatorCollectibleFactoryContract()\n      const canMint = await GladiatorCollectibleFactoryContract.canMint(account)\n      dispatch({ type: 'initialize', step: canMint ? 0 : 1 })\n\n      // When changing wallets quickly unmounting before the hasClaim finished causes a React error\n      if (isSubscribed) {\n        dispatch({ type: 'initialize', step: canMint ? 0 : 1 })\n      }\n    }\n\n    if (account) {\n      fetchData()\n    }\n\n    return () => {\n      isSubscribed = false\n    }\n  }, [account, dispatch])\n\n  const actions: ContextType['actions'] = useMemo(\n    () => ({\n      nextStep: () => dispatch({ type: 'next_step' }),\n      setTeamId: (teamId: number) => dispatch({ type: 'set_team', teamId }),\n      setSelectedNft: (tokenId: string, collectionAddress: string) =>\n        dispatch({ type: 'set_selected_nft', tokenId, collectionAddress }),\n      setUserName: (userName: string) => dispatch({ type: 'set_username', userName }),\n    }),\n    [dispatch],\n  )\n\n  return <ProfileCreationContext.Provider value={{ ...state, actions }}>{children}</ProfileCreationContext.Provider>\n}\n\nexport default ProfileCreationProvider\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { Breadcrumbs, Heading, Text, Link, Button } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\nimport { ProfileCreationContext } from './contexts/ProfileCreationProvider'\n\nconst Wrapper = styled.div`\n  border-bottom: 2px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-top: 32px;\n  margin-bottom: 24px;\n  padding-bottom: 24px;\n`\n\nconst steps = ['Get Starter Collectible', 'Set Profile Picture', 'Join Team', 'Set Name']\n\nconst Header: React.FC = () => {\n  const { t } = useTranslation()\n  const { currentStep } = useContext(ProfileCreationContext)\n\n  return (\n    <Wrapper>\n      <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"8px\" id=\"profile-setup-title\">\n        {t('Profile Setup')}\n      </Heading>\n      <Heading as=\"h2\" scale=\"lg\" mb=\"8px\">\n        {t('Show off your stats and collectibles with your unique profile')}\n      </Heading>\n      <Text color=\"textSubtle\" mb=\"8px\">\n        {t('Total cost: 1.5 NRT')}\n      </Text>\n      <Link href={`${nftsBaseUrl}/profile`}>\n        <Button mb=\"24px\" scale=\"sm\" variant=\"secondary\">\n          {t('Back to profile')}\n        </Button>\n      </Link>\n      <Breadcrumbs>\n        {steps.map((translationKey, index) => {\n          return (\n            <Text key={translationKey} color={index <= currentStep ? 'text' : 'textDisabled'}>\n              {t(translationKey)}\n            </Text>\n          )\n        })}\n      </Breadcrumbs>\n    </Wrapper>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport { Heading, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\n\nconst WalletNotConnected = () => {\n  const { t } = useTranslation()\n\n  return (\n    <div>\n      <Heading scale=\"xl\" mb=\"8px\">\n        {t('Oops!')}\n      </Heading>\n      <Text as=\"p\" mb=\"16px\">\n        {t('Please connect your wallet to continue')}\n      </Text>\n      <ConnectWalletButton />\n    </div>\n  )\n}\n\nexport default WalletNotConnected\n","import React from 'react'\nimport { ArrowForwardIcon, Button, ButtonProps } from '@pancakeswap/uikit'\n\nconst NextStepButton: React.FC<ButtonProps> = (props) => {\n  return <Button endIcon={<ArrowForwardIcon color=\"currentColor\" />} {...props} />\n}\n\nexport default NextStepButton\n","import { useContext } from 'react'\nimport { ProfileCreationContext } from './ProfileCreationProvider'\n\nconst useProfileCreation = () => {\n  return useContext(ProfileCreationContext)\n}\n\nexport default useProfileCreation\n","import React, { useState, useEffect } from 'react'\nimport { formatUnits } from '@ethersproject/units'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { useNrt, useGladiatorCollectibleFactory } from 'hooks/useContract'\nimport { useGetNrtBalance } from 'hooks/useTokenBalance'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport ApproveConfirmButtons from 'components/ApproveConfirmButtons'\nimport useToast from 'hooks/useToast'\nimport { useAppDispatch } from 'state'\nimport { fetchUserNfts } from 'state/nftMarket/reducer'\nimport { useGetCollections } from 'state/nftMarket/hooks'\nimport { getNftsFromCollectionApi } from 'state/nftMarket/helpers'\nimport { ApiSingleTokenData } from 'state/nftMarket/types'\nimport { gladiatorCollectiblesAddress } from 'views/Nft/market/constants'\nimport { FetchStatus } from 'config/constants/types'\nimport SelectionCard from './SelectionCard'\nimport NextStepButton from './NextStepButton'\nimport useProfileCreation from './contexts/hook'\nimport { MINT_COST, STARTER_NFT_GLADIATOR_COLLECTIBLE_IDS } from './config'\n\ninterface MintNftData extends ApiSingleTokenData {\n  gladiatorCollectibleId?: string\n}\n\nconst Mint: React.FC = () => {\n  const [selectedBunnyId, setSelectedBunnyId] = useState<string>('')\n  const [starterNfts, setStarterNfts] = useState<MintNftData[]>([])\n  const { actions, minimumNrtRequired, allowance } = useProfileCreation()\n  const collections = useGetCollections()\n  const { toastSuccess } = useToast()\n  const dispatch = useAppDispatch()\n\n  const { account } = useWeb3React()\n  const nrtContract = useNrt()\n  const gladiatorCollectibleFactoryContract = useGladiatorCollectibleFactory()\n  const { t } = useTranslation()\n  const { balance: nrtBalance, fetchStatus } = useGetNrtBalance()\n  const hasMinimumNrtRequired = fetchStatus === FetchStatus.Fetched && nrtBalance.gte(MINT_COST)\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  useEffect(() => {\n    const getStarterNfts = async () => {\n      const { data: allPbTokens } = await getNftsFromCollectionApi(gladiatorCollectiblesAddress)\n      const nfts = STARTER_NFT_GLADIATOR_COLLECTIBLE_IDS.map((gladiatorCollectibleId) => {\n        if (allPbTokens && allPbTokens[gladiatorCollectibleId]) {\n          return { ...allPbTokens[gladiatorCollectibleId], gladiatorCollectibleId }\n        }\n        return undefined\n      })\n      setStarterNfts(nfts)\n    }\n    if (starterNfts.length === 0) {\n      getStarterNfts()\n    }\n  }, [starterNfts])\n\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\n    useApproveConfirmTransaction({\n      onRequiresApproval: async () => {\n        // TODO: Move this to a helper, this check will be probably be used many times\n        try {\n          const response = await nrtContract.allowance(account, gladiatorCollectibleFactoryContract.address)\n          return response.gte(minimumNrtRequired)\n        } catch (error) {\n          return false\n        }\n      },\n      onApprove: () => {\n        return callWithGasPrice(nrtContract, 'approve', [gladiatorCollectibleFactoryContract.address, allowance.toString()])\n      },\n      onConfirm: () => {\n        return callWithGasPrice(gladiatorCollectibleFactoryContract, 'mintNFT', [selectedBunnyId])\n      },\n      onApproveSuccess: () => {\n        toastSuccess(t('Enabled'), t(\"Press 'confirm' to mint this NFT\"))\n      },\n      onSuccess: () => {\n        toastSuccess(t('Success'), t('You have minted your starter NFT'))\n        dispatch(fetchUserNfts({ account, collections }))\n        actions.nextStep()\n      },\n    })\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {t('Step %num%', { num: 1 })}\n      </Text>\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\n        {t('Get Starter Collectible')}\n      </Heading>\n      <Text as=\"p\">{t('Every profile starts by making a “starter” collectible (NFT).')}</Text>\n      <Text as=\"p\">{t('This starter will also become your first profile picture.')}</Text>\n      <Text as=\"p\" mb=\"24px\">\n        {t('You can change your profile pic later if you get another approved Gladiators Collectible.')}\n      </Text>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Choose your Starter!')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\">\n            {t('Choose wisely: you can only ever make one starter collectible!')}\n          </Text>\n          <Text as=\"p\" mb=\"24px\" color=\"textSubtle\">\n            {t('Cost: %num% NRT', { num: formatUnits(MINT_COST) })}\n          </Text>\n          {starterNfts.map((nft) => {\n            const handleChange = (value: string) => setSelectedBunnyId(value)\n\n            return (\n              <SelectionCard\n                key={nft?.name}\n                name=\"mintStarter\"\n                value={nft?.gladiatorCollectibleId}\n                image={nft?.image.thumbnail}\n                isChecked={selectedBunnyId === nft?.gladiatorCollectibleId}\n                onChange={handleChange}\n                disabled={isApproving || isConfirming || isConfirmed || !hasMinimumNrtRequired}\n              >\n                <Text bold>{nft?.name}</Text>\n              </SelectionCard>\n            )\n          })}\n          {!hasMinimumNrtRequired && (\n            <Text color=\"failure\" mb=\"16px\">\n              {t('A minimum of %num% NRT is required', { num: formatUnits(MINT_COST) })}\n            </Text>\n          )}\n          <ApproveConfirmButtons\n            isApproveDisabled={selectedBunnyId === null || isConfirmed || isConfirming || isApproved}\n            isApproving={isApproving}\n            isConfirmDisabled={!isApproved || isConfirmed || !hasMinimumNrtRequired}\n            isConfirming={isConfirming}\n            onApprove={handleApprove}\n            onConfirm={handleConfirm}\n          />\n        </CardBody>\n      </Card>\n      <NextStepButton onClick={actions.nextStep} disabled={!isConfirmed}>\n        {t('Next Step')}\n      </NextStepButton>\n    </>\n  )\n}\n\nexport default Mint\n","import React, { useContext, useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { AutoRenewIcon, Button, Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { getGladiatorProfileAddress } from 'utils/addressHelpers'\nimport { getErc721Contract } from 'utils/contractHelpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport useToast from 'hooks/useToast'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\nimport { NftLocation, UserNftInitializationState } from 'state/nftMarket/types'\nimport SelectionCard from './SelectionCard'\nimport NextStepButton from './NextStepButton'\nimport { ProfileCreationContext } from './contexts/ProfileCreationProvider'\nimport { useProfileContract } from '../../hooks/useContract'\nimport multicall from '../../utils/multicall'\nimport profileABI from '../../config/abi/gladiatorProfile.json'\n\nconst Link = styled(RouterLink)`\n  color: ${({ theme }) => theme.colors.primary};\n`\n\nconst NftWrapper = styled.div`\n  margin-bottom: 24px;\n`\n\nconst ProfilePicture: React.FC = () => {\n  const { library } = useWeb3React()\n  const [isApproved, setIsApproved] = useState(false)\n  const [isApproving, setIsApproving] = useState(false)\n  const [userProfileCreationNfts, setUserProfileCreationNfts] = useState(null)\n  const { selectedNft, actions } = useContext(ProfileCreationContext)\n  const profileContract = useProfileContract(false)\n\n  const { nfts, userNftsInitializationState } = useUserNfts()\n\n  useEffect(() => {\n    const fetchUserGladiatorCollectibles = async () => {\n      try {\n        const nftsByCollection = Array.from(\n          nfts.reduce((acc, value) => {\n            acc.add(value.collectionAddress)\n            return acc\n          }, new Set<string>()),\n        )\n\n        if (nftsByCollection.length > 0) {\n          const nftRole = await profileContract.NFT_ROLE()\n          const collectionsNftRoleCalls = nftsByCollection.map((collectionAddress) => {\n            return {\n              address: profileContract.address,\n              name: 'hasRole',\n              params: [nftRole, collectionAddress],\n            }\n          })\n          const collectionRolesRaw = await multicall(profileABI, collectionsNftRoleCalls)\n          const collectionRoles = collectionRolesRaw.flat()\n          setUserProfileCreationNfts(\n            nfts.filter((nft) => collectionRoles[nftsByCollection.indexOf(nft.collectionAddress)]),\n          )\n        }\n      } catch (e) {\n        console.error(e)\n      }\n    }\n    if (userNftsInitializationState === UserNftInitializationState.INITIALIZED) {\n      fetchUserGladiatorCollectibles()\n    }\n  }, [nfts, profileContract, userNftsInitializationState])\n\n  const { t } = useTranslation()\n  const { toastError, toastSuccess } = useToast()\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  const handleApprove = async () => {\n    const contract = getErc721Contract(selectedNft.collectionAddress, library.getSigner())\n    const tx = await callWithGasPrice(contract, 'approve', [getGladiatorProfileAddress(), selectedNft.tokenId])\n    toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\n    setIsApproving(true)\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      toastSuccess(t('Enabled'), t('Please progress to the next step.'))\n      setIsApproving(false)\n      setIsApproved(true)\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setIsApproving(false)\n    }\n  }\n\n  if (userProfileCreationNfts?.length === 0) {\n    return (\n      <>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {t('Oops!')}\n        </Heading>\n        <Text bold fontSize=\"20px\" mb=\"24px\">\n          {t('We couldn’t find any Gladiator Collectibles in your wallet.')}\n        </Text>\n        <Text as=\"p\">\n          {t(\n            'You need a Gladiator Collectible to finish setting up your profile. If you sold or transferred your starter collectible to another wallet, you’ll need to get it back or acquire a new one somehow. You can’t make a new starter with this wallet address.',\n          )}\n        </Text>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {t('Step %num%', { num: 2 })}\n      </Text>\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\n        {t('Set Profile Picture')}\n      </Heading>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Choose collectible')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\">\n            {t('Choose a profile picture from the eligible collectibles (NFT) in your wallet, shown below.')}\n          </Text>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t('Only approved Gladiator Collectibles can be used.')}\n            <Link to={`${nftsBaseUrl}/collections`} style={{ marginLeft: '4px' }}>\n              {t('See the list >')}\n            </Link>\n          </Text>\n          <NftWrapper>\n            {userProfileCreationNfts?.length > 0 ? (\n              userProfileCreationNfts\n                .filter((walletNft) => walletNft.location === NftLocation.WALLET)\n                .map((walletNft) => {\n                  return (\n                    <SelectionCard\n                      name=\"profilePicture\"\n                      key={`${walletNft.collectionAddress}#${walletNft.tokenId}`}\n                      value={walletNft.tokenId}\n                      image={walletNft.image.thumbnail}\n                      isChecked={walletNft.tokenId === selectedNft.tokenId}\n                      onChange={(value: string) => actions.setSelectedNft(value, walletNft.collectionAddress)}\n                    >\n                      <Text bold>{walletNft.name}</Text>\n                    </SelectionCard>\n                  )\n                })\n            ) : (\n              <Skeleton width=\"100%\" height=\"64px\" />\n            )}\n          </NftWrapper>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Allow collectible to be locked')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"16px\">\n            {t(\n              \"The collectible you've chosen will be locked in a smart contract while it’s being used as your profile picture. Don't worry - you'll be able to get it back at any time.\",\n            )}\n          </Text>\n          <Button\n            isLoading={isApproving}\n            disabled={isApproved || isApproving || selectedNft.tokenId === null}\n            onClick={handleApprove}\n            endIcon={isApproving ? <AutoRenewIcon spin color=\"currentColor\" /> : undefined}\n            id=\"approveStarterCollectible\"\n          >\n            {t('Enable')}\n          </Button>\n        </CardBody>\n      </Card>\n      <NextStepButton onClick={actions.nextStep} disabled={selectedNft.tokenId === null || !isApproved || isApproving}>\n        {t('Next Step')}\n      </NextStepButton>\n    </>\n  )\n}\n\nexport default ProfilePicture\n","import React, { useMemo } from 'react'\nimport { Card, CardBody, CommunityIcon, Flex, Heading, Text } from '@pancakeswap/uikit'\nimport shuffle from 'lodash/shuffle'\nimport { useTeams } from 'state/teams/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport SelectionCard from './SelectionCard'\nimport NextStepButton from './NextStepButton'\nimport useProfileCreation from './contexts/hook'\n\nconst Team: React.FC = () => {\n  const { teamId: currentTeamId, actions } = useProfileCreation()\n  const { t } = useTranslation()\n  const { teams } = useTeams()\n  const handleTeamSelection = (value: string) => actions.setTeamId(parseInt(value, 10))\n  const teamValues = useMemo(() => shuffle(Object.values(teams)), [teams])\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {t('Step %num%', { num: 3 })}\n      </Text>\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\n        {t('Join a Team')}\n      </Heading>\n      <Text as=\"p\" mb=\"24px\">\n        {t('It won’t be possible to undo the choice you make for the foreseeable future!')}\n      </Text>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Join a Team')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t(\n              'There’s currently no big difference between teams, and no benefit of joining one team over another for now. So pick whichever one you like!',\n            )}\n          </Text>\n          {teamValues &&\n            teamValues.map((team) => {\n              return (\n                <SelectionCard\n                  key={team.name}\n                  name=\"teams-selection\"\n                  value={team.id}\n                  isChecked={currentTeamId === team.id}\n                  image={`/images/teams/${team.images.md}`}\n                  onChange={handleTeamSelection}\n                  disabled={!team.isJoinable}\n                >\n                  <Text bold>{team.name}</Text>\n                  <Flex>\n                    <CommunityIcon mr=\"8px\" />\n                    <Text>{team.users.toLocaleString()}</Text>\n                  </Flex>\n                </SelectionCard>\n              )\n            })}\n        </CardBody>\n      </Card>\n      <NextStepButton onClick={actions.nextStep} disabled={currentTeamId === null}>\n        {t('Next Step')}\n      </NextStepButton>\n    </>\n  )\n}\n\nexport default Team\n","import toDate from \"../toDate/index.js\";\nimport endOfDay from \"../endOfDay/index.js\";\nimport endOfMonth from \"../endOfMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is the last day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * var result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\n\nexport default function isLastDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return endOfDay(date).getTime() === endOfMonth(date).getTime();\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarMonths from \"../differenceInCalendarMonths/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport isLastDayOfMonth from \"../isLastDayOfMonth/index.js\";\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * var result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\n\nexport default function differenceInMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));\n  var result; // Check for the difference of less than month\n\n  if (difference < 1) {\n    result = 0;\n  } else {\n    if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {\n      // This will check if the date is end of Feb and assign a higher end of month date\n      // to compare it with Jan\n      dateLeft.setDate(30);\n    }\n\n    dateLeft.setMonth(dateLeft.getMonth() - sign * difference); // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n    // If so, result must be decreased by 1 in absolute value\n\n    var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign; // Check for cases of one full calendar month\n\n    if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {\n      isLastMonthNotFull = false;\n    }\n\n    result = sign * (difference - Number(isLastMonthNotFull));\n  } // Prevent negative zero\n\n\n  return result === 0 ? 0 : result;\n}","import compareAsc from \"../compareAsc/index.js\";\nimport differenceInMonths from \"../differenceInMonths/index.js\";\nimport differenceInSeconds from \"../differenceInSeconds/index.js\";\nimport defaultLocale from \"../locale/en-US/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport cloneObject from \"../_lib/cloneObject/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MINUTES_IN_DAY = 1440;\nvar MINUTES_IN_ALMOST_TWO_DAYS = 2520;\nvar MINUTES_IN_MONTH = 43200;\nvar MINUTES_IN_TWO_MONTHS = 86400;\n/**\n * @name formatDistance\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `distanceInWords ` to `formatDistance`\n *   to make its name consistent with `format` and `formatRelative`.\n *\n * - The order of arguments is swapped to make the function\n *   consistent with `differenceIn...` functions.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWords(\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     new Date(1986, 3, 4, 11, 32, 0),\n *     { addSuffix: true }\n *   ) //=> 'in about 1 hour'\n *\n *   // v2.0.0 onward\n *\n *   formatDistance(\n *     new Date(1986, 3, 4, 11, 32, 0),\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     { addSuffix: true }\n *   ) //=> 'in about 1 hour'\n *   ```\n *\n * @param {Date|Number} date - the date\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * const result = formatDistance(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   { includeSeconds: true }\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> 'pli ol 1 jaro'\n */\n\nexport default function formatDistance(dirtyDate, dirtyBaseDate) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  requiredArgs(2, arguments);\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain formatDistance property');\n  }\n\n  var comparison = compareAsc(dirtyDate, dirtyBaseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var localizeOptions = cloneObject(options);\n  localizeOptions.addSuffix = Boolean(options.addSuffix);\n  localizeOptions.comparison = comparison;\n  var dateLeft;\n  var dateRight;\n\n  if (comparison > 0) {\n    dateLeft = toDate(dirtyBaseDate);\n    dateRight = toDate(dirtyDate);\n  } else {\n    dateLeft = toDate(dirtyDate);\n    dateRight = toDate(dirtyBaseDate);\n  }\n\n  var seconds = differenceInSeconds(dateRight, dateLeft);\n  var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1000;\n  var minutes = Math.round((seconds - offsetInSeconds) / 60);\n  var months; // 0 up to 2 mins\n\n  if (minutes < 2) {\n    if (options.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance('lessThanXSeconds', 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance('lessThanXSeconds', 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance('lessThanXSeconds', 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance('halfAMinute', null, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', minutes, localizeOptions);\n      }\n    } // 2 mins up to 0.75 hrs\n\n  } else if (minutes < 45) {\n    return locale.formatDistance('xMinutes', minutes, localizeOptions); // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance('aboutXHours', 1, localizeOptions); // 1.5 hrs up to 24 hrs\n  } else if (minutes < MINUTES_IN_DAY) {\n    var hours = Math.round(minutes / 60);\n    return locale.formatDistance('aboutXHours', hours, localizeOptions); // 1 day up to 1.75 days\n  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {\n    return locale.formatDistance('xDays', 1, localizeOptions); // 1.75 days up to 30 days\n  } else if (minutes < MINUTES_IN_MONTH) {\n    var days = Math.round(minutes / MINUTES_IN_DAY);\n    return locale.formatDistance('xDays', days, localizeOptions); // 1 month up to 2 months\n  } else if (minutes < MINUTES_IN_TWO_MONTHS) {\n    months = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('aboutXMonths', months, localizeOptions);\n  }\n\n  months = differenceInMonths(dateRight, dateLeft); // 2 months up to 12 months\n\n  if (months < 12) {\n    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('xMonths', nearestMonth, localizeOptions); // 1 year up to max Date\n  } else {\n    var monthsSinceStartOfYear = months % 12;\n    var years = Math.floor(months / 12); // N years up to 1 years 3 months\n\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance('aboutXYears', years, localizeOptions); // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance('overXYears', years, localizeOptions); // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance('almostXYears', years + 1, localizeOptions);\n    }\n  }\n}","import React, { ChangeEvent, useEffect, useRef, useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Text,\n  Input as UIKitInput,\n  Button,\n  AutoRenewIcon,\n  CheckmarkIcon,\n  Flex,\n  WarningIcon,\n  useModal,\n  Skeleton,\n  Checkbox,\n} from '@pancakeswap/uikit'\nimport { parseISO, formatDistance } from 'date-fns'\nimport { useWeb3React } from '@web3-react/core'\nimport { formatUnits } from '@ethersproject/units'\nimport { API_PROFILE } from 'config/constants/endpoints'\nimport useToast from 'hooks/useToast'\nimport { useGetNrtBalance } from 'hooks/useTokenBalance'\nimport { signMessage } from 'utils/web3React'\nimport fetchWithTimeout from 'utils/fetchWithTimeout'\nimport useWeb3Provider from 'hooks/useActiveWeb3React'\nimport { useTranslation } from 'contexts/Localization'\nimport { FetchStatus } from 'config/constants/types'\nimport ConfirmProfileCreationModal from './ConfirmProfileCreationModal'\nimport useProfileCreation from './contexts/hook'\nimport { USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH, REGISTER_COST } from './config'\nimport useDebounce from '../../hooks/useDebounce'\n\nenum ExistingUserState {\n  IDLE = 'idle', // initial state\n  CREATED = 'created', // username has already been created\n  NEW = 'new', // username has not been created\n}\n\nconst InputWrap = styled.div`\n  position: relative;\n  max-width: 240px;\n`\n\nconst Input = styled(UIKitInput)`\n  padding-right: 40px;\n`\n\nconst Indicator = styled(Flex)`\n  align-items: center;\n  height: 24px;\n  justify-content: center;\n  margin-top: -12px;\n  position: absolute;\n  right: 16px;\n  top: 50%;\n  width: 24px;\n`\n\nconst UserName: React.FC = () => {\n  const [isAcknowledged, setIsAcknowledged] = useState(false)\n  const { teamId, selectedNft, userName, actions, minimumNrtRequired, allowance } = useProfileCreation()\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { toastError } = useToast()\n  const { library, connector } = useWeb3Provider()\n  const [existingUserState, setExistingUserState] = useState<ExistingUserState>(ExistingUserState.IDLE)\n  const [isValid, setIsValid] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n  const [message, setMessage] = useState('')\n  const fetchAbortSignal = useRef<AbortController>(null)\n  const { balance: nrtBalance, fetchStatus } = useGetNrtBalance()\n  const hasMinimumNrtRequired = fetchStatus === FetchStatus.Fetched && nrtBalance.gte(REGISTER_COST)\n  const [onPresentConfirmProfileCreation] = useModal(\n    <ConfirmProfileCreationModal\n      userName={userName}\n      selectedNft={selectedNft}\n      account={account}\n      teamId={teamId}\n      minimumNrtRequired={minimumNrtRequired}\n      allowance={allowance}\n    />,\n    false,\n  )\n  const isUserCreated = existingUserState === ExistingUserState.CREATED\n\n  const [usernameToCheck, setUsernameToCheck] = useState<string>(undefined)\n  const debouncedUsernameToCheck = useDebounce(usernameToCheck, 200)\n\n  useEffect(() => {\n    const fetchUsernameToCheck = async (abortSignal) => {\n      try {\n        setIsLoading(true)\n        if (!debouncedUsernameToCheck) {\n          setIsValid(false)\n          setMessage('')\n          fetchAbortSignal.current = null\n        } else {\n          const res = await fetchWithTimeout(`${API_PROFILE}/users/findOne?filter=%7B%22where%22%3A%7B%22username%22%3A%22${debouncedUsernameToCheck}%22%7D%7D`, {\n            method: 'get',\n            signal: abortSignal,\n            timeout: 30000,\n          })\n\n          fetchAbortSignal.current = null\n\n          if (res.ok) {\n            setIsValid(false)\n            setMessage(\"Username taken\")\n          } else {\n            setIsValid(true)\n            setMessage('')\n          }\n        }\n      } catch (e) {\n        setIsValid(false)\n        if (e instanceof Error && e.name !== 'AbortError') {\n          setMessage(t('Error fetching data'))\n          console.error(e)\n        }\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    if (fetchAbortSignal.current) {\n      fetchAbortSignal.current.abort()\n    }\n\n    fetchAbortSignal.current = new AbortController()\n\n    fetchUsernameToCheck(fetchAbortSignal.current.signal)\n  }, [debouncedUsernameToCheck, t])\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target\n    actions.setUserName(value)\n    setUsernameToCheck(value)\n  }\n\n  const handleConfirm = async () => {\n    try {\n      setIsLoading(true)\n\n      const signature = await signMessage(connector, library, account, userName)\n      const response = await fetch(`${API_PROFILE}/users`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          address: account,\n          username: userName,\n          signature,\n          password: account,\n          email: `${account}@nomatter.com`\n        })\n      })\n\n      if (response.ok) {\n        setExistingUserState(ExistingUserState.CREATED)\n      } else {\n        const data = await response.json()\n        toastError(t('Error'), data?.error?.message)\n      }\n    } catch (error) {\n      toastError(error instanceof Error && error?.message ? error.message : JSON.stringify(error))\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleAcknowledge = () => setIsAcknowledged(!isAcknowledged)\n\n  // Perform an initial check to see if the wallet has already created a username\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const response = await fetch(`${API_PROFILE}/users/findOne?filter=%7B%22where%22%3A%7B%22address%22%3A%22${account}%22%7D%7D`)\n        const data = await response.json()\n\n        if (response.ok) {\n          const dateCreated = formatDistance(parseISO(data.created_at), new Date())\n          setMessage(t('Created %dateCreated% ago', { dateCreated }))\n\n          actions.setUserName(data.username)\n          setExistingUserState(ExistingUserState.CREATED)\n          setIsValid(true)\n        } else {\n          setExistingUserState(ExistingUserState.NEW)\n        }\n      } catch (error) {\n        toastError(t('Error'), t('Unable to verify username'))\n      }\n    }\n\n    if (account) {\n      fetchUser()\n    }\n  }, [account, setExistingUserState, setIsValid, setMessage, actions, toastError, t])\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {t('Step %num%', { num: 4 })}\n      </Text>\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\n        {t('Set Your Name')}\n      </Heading>\n      <Text as=\"p\" mb=\"24px\">\n        {t('This name will be shown in team leaderboards and search results as long as your profile is active.')}\n      </Text>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Set Your Name')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t(\n              'Your name must be at least 3 and at most 15 standard letters and numbers long. You can’t change this once you click Confirm.',\n            )}\n          </Text>\n          {existingUserState === ExistingUserState.IDLE ? (\n            <Skeleton height=\"40px\" width=\"240px\" />\n          ) : (\n            <InputWrap>\n              <Input\n                onChange={handleChange}\n                isWarning={userName && !isValid}\n                isSuccess={userName && isValid}\n                minLength={USERNAME_MIN_LENGTH}\n                maxLength={USERNAME_MAX_LENGTH}\n                disabled={isUserCreated}\n                placeholder={t('Enter your name...')}\n                value={userName}\n              />\n              <Indicator>\n                {isLoading && <AutoRenewIcon spin />}\n                {!isLoading && isValid && userName && <CheckmarkIcon color=\"success\" />}\n                {!isLoading && !isValid && userName && <WarningIcon color=\"failure\" />}\n              </Indicator>\n            </InputWrap>\n          )}\n          <Text color=\"textSubtle\" fontSize=\"14px\" py=\"4px\" mb=\"16px\" style={{ minHeight: '30px' }}>\n            {message}\n          </Text>\n          <Text as=\"p\" color=\"primary\" mb=\"8px\">\n            {t(\n              \"Only reuse a name from other social media if you're OK with people viewing your wallet. You can't change your name once you click Confirm.\",\n            )}\n          </Text>\n          <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox\" scale=\"sm\" checked={isAcknowledged} onChange={handleAcknowledge} />\n              </div>\n              <Text ml=\"8px\">{t('I understand that people can view my wallet if they know my username')}</Text>\n            </Flex>\n          </label>\n          <Button onClick={handleConfirm} disabled={!isValid || isUserCreated || isLoading || !isAcknowledged}>\n            {t('Confirm')}\n          </Button>\n        </CardBody>\n      </Card>\n      <Button\n        onClick={onPresentConfirmProfileCreation}\n        disabled={!isValid || !isUserCreated}\n        id=\"completeProfileCreation\"\n      >\n        {t('Complete Profile')}\n      </Button>\n      {!hasMinimumNrtRequired && (\n        <Text color=\"failure\" mt=\"16px\">\n          {t('A minimum of %num% NRT is required', { num: formatUnits(REGISTER_COST) })}\n        </Text>\n      )}\n    </>\n  )\n}\n\nexport default UserName\n","interface FetchTimeoutOptions extends RequestInit {\n  timeout?: number\n}\n\nconst fetchWithTimeout = (url, options: FetchTimeoutOptions = {}): Promise<Response> => {\n  const { timeout = 10000, ...fetchOptions } = options\n\n  return Promise.race([\n    fetch(url, fetchOptions),\n    new Promise((_, reject) => {\n      setTimeout(() => {\n        reject(new Error(`Request for ${url} timed out after ${timeout} milliseconds`))\n      }, timeout)\n    }),\n  ]) as Promise<Response>\n}\n\nexport default fetchWithTimeout\n","import React from 'react'\nimport { Modal, Flex, Text } from '@pancakeswap/uikit'\nimport { ethers } from 'ethers'\nimport { formatUnits } from '@ethersproject/units'\nimport { useAppDispatch } from 'state'\nimport { useTranslation } from 'contexts/Localization'\nimport { useNrt, useProfileContract } from 'hooks/useContract'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { fetchProfile } from 'state/profile'\nimport useToast from 'hooks/useToast'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport ApproveConfirmButtons from 'components/ApproveConfirmButtons'\nimport { REGISTER_COST } from './config'\nimport { State } from './contexts/types'\n\ninterface Props {\n  userName: string\n  selectedNft: State['selectedNft']\n  account: string\n  teamId: number\n  minimumNrtRequired: ethers.BigNumber\n  allowance: ethers.BigNumber\n  onDismiss?: () => void\n}\n\nconst ConfirmProfileCreationModal: React.FC<Props> = ({\n  account,\n  teamId,\n  selectedNft,\n  minimumNrtRequired,\n  allowance,\n  onDismiss,\n}) => {\n  const { t } = useTranslation()\n  const profileContract = useProfileContract()\n  const dispatch = useAppDispatch()\n  const { toastSuccess } = useToast()\n  const nrtContract = useNrt()\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\n    useApproveConfirmTransaction({\n      onRequiresApproval: async () => {\n        try {\n          const response = await nrtContract.allowance(account, profileContract.address)\n          return response.gte(minimumNrtRequired)\n        } catch (error) {\n          return false\n        }\n      },\n      onApprove: () => {\n        return callWithGasPrice(nrtContract, 'approve', [profileContract.address, allowance.toJSON()])\n      },\n      onConfirm: () => {\n        return callWithGasPrice(profileContract, 'createProfile', [\n          teamId,\n          selectedNft.collectionAddress,\n          selectedNft.tokenId,\n        ])\n      },\n      onSuccess: async ({ receipt }) => {\n        await dispatch(fetchProfile(account))\n        onDismiss()\n        toastSuccess(t('Profile created!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n      },\n    })\n\n  return (\n    <Modal title={t('Complete Profile')} onDismiss={onDismiss}>\n      <Text color=\"textSubtle\" mb=\"8px\">\n        {t('Submitting NFT to contract and confirming User Name and Team.')}\n      </Text>\n      <Flex justifyContent=\"space-between\" mb=\"16px\">\n        <Text>{t('Cost')}</Text>\n        <Text>{t('%num% NRT', { num: formatUnits(REGISTER_COST) })}</Text>\n      </Flex>\n      <ApproveConfirmButtons\n        isApproveDisabled={isConfirmed || isConfirming || isApproved}\n        isApproving={isApproving}\n        isConfirmDisabled={!isApproved || isConfirmed}\n        isConfirming={isConfirming}\n        onApprove={handleApprove}\n        onConfirm={handleConfirm}\n      />\n    </Modal>\n  )\n}\n\nexport default ConfirmProfileCreationModal\n","import React, { useContext } from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport NoWalletConnected from './WalletNotConnected'\nimport { ProfileCreationContext } from './contexts/ProfileCreationProvider'\nimport Mint from './Mint'\nimport ProfilePicture from './ProfilePicture'\nimport TeamSelection from './TeamSelection'\nimport UserName from './UserName'\n\nconst Steps = () => {\n  const { t } = useTranslation()\n  const { isInitialized, currentStep } = useContext(ProfileCreationContext)\n  const { account } = useWeb3React()\n\n  if (!account) {\n    return <NoWalletConnected />\n  }\n\n  if (!isInitialized) {\n    return <div>{t('Loading...')}</div>\n  }\n\n  if (currentStep === 0) {\n    return <Mint />\n  }\n\n  if (currentStep === 1) {\n    return <ProfilePicture />\n  }\n\n  if (currentStep === 2) {\n    return <TeamSelection />\n  }\n\n  if (currentStep === 3) {\n    return <UserName />\n  }\n\n  return null\n}\n\nexport default Steps\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Redirect } from 'react-router'\nimport Page from 'components/Layout/Page'\nimport { useProfile } from 'state/profile/hooks'\nimport PageLoader from 'components/Loader/PageLoader'\nimport useFetchUserNfts from 'views/Nft/market/Profile/hooks/useFetchUserNfts'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\nimport { useFetchCollections } from 'state/nftMarket/hooks'\nimport Header from './Header'\nimport ProfileCreationProvider from './contexts/ProfileCreationProvider'\nimport Steps from './Steps'\n\nconst ProfileCreation = () => {\n  const { account } = useWeb3React()\n  const { isInitialized, isLoading, hasProfile } = useProfile()\n\n  useFetchUserNfts()\n  useFetchCollections()\n\n  if (!isInitialized || isLoading) {\n    return <PageLoader />\n  }\n\n  if (account && hasProfile) {\n    return <Redirect to={`${nftsBaseUrl}/profile/${account.toLowerCase()}`} />\n  }\n\n  return (\n    <>\n      <ProfileCreationProvider>\n        <Page>\n          <Header />\n          <Steps />\n        </Page>\n      </ProfileCreationProvider>\n    </>\n  )\n}\n\nexport default ProfileCreation\n","import { useEffect, useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { gladiatorCollectiblesAddress } from 'views/Nft/market/constants'\nimport { isAddress } from 'utils'\nimport { FetchStatus } from 'config/constants/types'\nimport { fetchCollection, fetchCollections, fetchNewPBAndUpdateExisting } from './reducer'\nimport { State } from '../types'\nimport { NftActivityFilter, NftFilter, NftToken, UserNftsState } from './types'\n\nconst MAX_GEN0_ID = 4\n\nexport const useFetchCollections = () => {\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    dispatch(fetchCollections())\n  }, [dispatch])\n}\n\nexport const useFetchCollection = (collectionAddress: string) => {\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    dispatch(fetchCollection(collectionAddress))\n  }, [dispatch, collectionAddress])\n}\n\n// Returns a function that fetches more NFTs for specified bunny id\n// as well as updating existing PB NFTs in state\n// Note: GladiatorCollectible specific\nexport const useFetchByGladiatorCollectibleIdAndUpdate = (bunnyId: string) => {\n  const dispatch = useAppDispatch()\n\n  const { latestGladiatorCollectiblesUpdateAt, isUpdatingGladiatorCollectibles } = useSelector(\n    (state: State) => state.nftMarket.data.loadingState,\n  )\n\n  // Extra guard in case market data shifts\n  // we don't wanna fetch same tokens multiple times\n  const existingGladiatorCollectibleInState = useGetAllGladiatorCollectibleByGladiatorCollectibleId(bunnyId)\n  const existingTokensWithGladiatorCollectibleId = existingGladiatorCollectibleInState ? existingGladiatorCollectibleInState.map((nft) => nft.tokenId) : []\n\n  const allGladiatorCollectibles = useNftsFromCollection(gladiatorCollectiblesAddress)\n  const allExistingPBTokenIds = allGladiatorCollectibles ? allGladiatorCollectibles.map((nft) => nft.tokenId) : []\n\n  const firstGladiatorCollectible = existingGladiatorCollectibleInState.length > 0 ? existingGladiatorCollectibleInState[0] : null\n\n  // If we already have NFT with this bunny id in state - we can reuse its metadata without making API request\n  const existingMetadata = useMemo(() => {\n    return firstGladiatorCollectible\n      ? {\n          name: firstGladiatorCollectible.name,\n          description: firstGladiatorCollectible.description,\n          collection: { name: firstGladiatorCollectible.collectionName },\n          image: firstGladiatorCollectible.image,\n        }\n      : null\n  }, [firstGladiatorCollectible])\n\n  // This fetches more bunnies when called\n  const fetchMoreGladiatorCollectibles = (orderDirection: 'asc' | 'desc') => {\n    dispatch(\n      fetchNewPBAndUpdateExisting({\n        bunnyId,\n        existingTokensWithGladiatorCollectibleId,\n        allExistingPBTokenIds,\n        existingMetadata,\n        orderDirection,\n      }),\n    )\n  }\n\n  return { isUpdatingGladiatorCollectibles, latestGladiatorCollectiblesUpdateAt, fetchMoreGladiatorCollectibles }\n}\n\nexport const useLoadingState = () => {\n  return useSelector((state: State) => state.nftMarket.data.loadingState)\n}\n\nexport const useGetCollections = () => {\n  return useSelector((state: State) => state.nftMarket.data.collections)\n}\n\nexport const useGetCollection = (collectionAddress: string) => {\n  const checksummedCollectionAddress = isAddress(collectionAddress) || ''\n  const collections = useGetCollections()\n  return collections[checksummedCollectionAddress]\n}\n\nexport const useNftsFromCollection = (collectionAddress: string) => {\n  const checksummedCollectionAddress = isAddress(collectionAddress) || ''\n  const nfts: NftToken[] = useSelector((state: State) => state.nftMarket.data.nfts[checksummedCollectionAddress])\n  return nfts\n}\n\nexport const useGetAllGladiatorCollectibleByGladiatorCollectibleId = (bunnyId: string) => {\n  const nfts: NftToken[] = useSelector((state: State) => state.nftMarket.data.nfts[gladiatorCollectiblesAddress])\n  return nfts ? nfts.filter((nft) => nft.attributes[0].value === bunnyId && nft.marketData.isTradable) : []\n}\n\nexport const useGetNFTInitializationState = () => {\n  return useSelector((state: State) => state.nftMarket.initializationState)\n}\n\nexport const useUserNfts = (): UserNftsState => {\n  return useSelector((state: State) => state.nftMarket.data.user)\n}\n\nexport const useHasGen0Nfts = (): boolean => {\n  const userNfts = useSelector((state: State) => state.nftMarket.data.user)\n  return userNfts.nfts.some((nft) => nft.attributes && Number(nft.attributes[0]?.value) <= MAX_GEN0_ID)\n}\n\nexport const useGetNftFilters = (collectionAddress: string) => {\n  const collectionFilter: NftFilter = useSelector((state: State) => state.nftMarket.data.filters[collectionAddress])\n  return collectionFilter ? collectionFilter.activeFilters : {}\n}\n\nexport const useGetNftFilterLoadingState = (collectionAddress: string) => {\n  const collectionFilter: NftFilter = useSelector((state: State) => state.nftMarket.data.filters[collectionAddress])\n  return collectionFilter ? collectionFilter.loadingState : FetchStatus.Idle\n}\n\nexport const useGetNftOrdering = (collectionAddress: string) => {\n  const collectionFilter: NftFilter = useSelector((state: State) => state.nftMarket.data.filters[collectionAddress])\n  return collectionFilter ? collectionFilter.ordering : { field: 'currentAskPrice', direction: 'asc' as 'asc' | 'desc' }\n}\n\nexport const useGetNftShowOnlyOnSale = (collectionAddress: string) => {\n  const collectionFilter: NftFilter = useSelector((state: State) => state.nftMarket.data.filters[collectionAddress])\n  return collectionFilter ? collectionFilter.showOnlyOnSale : true\n}\n\nexport const useGetNftActivityFilters = (collectionAddress: string) => {\n  const collectionFilter: NftActivityFilter = useSelector(\n    (state: State) => state.nftMarket.data.activityFilters[collectionAddress],\n  )\n  return collectionFilter || { typeFilters: [], collectionFilters: [] }\n}\n","import { useEffect, useReducer, useRef } from 'react'\nimport { noop } from 'lodash'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers } from 'ethers'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\n\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\n\ntype Action =\n  | { type: 'requires_approval' }\n  | { type: 'approve_sending' }\n  | { type: 'approve_receipt' }\n  | { type: 'approve_error' }\n  | { type: 'confirm_sending' }\n  | { type: 'confirm_receipt' }\n  | { type: 'confirm_error' }\n\ninterface State {\n  approvalState: LoadingState\n  confirmState: LoadingState\n}\n\nconst initialState: State = {\n  approvalState: 'idle',\n  confirmState: 'idle',\n}\n\nconst reducer = (state: State, actions: Action): State => {\n  switch (actions.type) {\n    case 'requires_approval':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_sending':\n      return {\n        ...state,\n        approvalState: 'loading',\n      }\n    case 'approve_receipt':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_error':\n      return {\n        ...state,\n        approvalState: 'fail',\n      }\n    case 'confirm_sending':\n      return {\n        ...state,\n        confirmState: 'loading',\n      }\n    case 'confirm_receipt':\n      return {\n        ...state,\n        confirmState: 'success',\n      }\n    case 'confirm_error':\n      return {\n        ...state,\n        confirmState: 'fail',\n      }\n    default:\n      return state\n  }\n}\n\ninterface OnSuccessProps {\n  state: State\n  receipt: ethers.providers.TransactionReceipt\n}\n\ninterface ApproveConfirmTransaction {\n  onApprove: () => Promise<ethers.providers.TransactionResponse>\n  onConfirm: () => Promise<ethers.providers.TransactionResponse>\n  onRequiresApproval?: () => Promise<boolean>\n  onSuccess: ({ state, receipt }: OnSuccessProps) => void\n  onApproveSuccess?: ({ state, receipt }: OnSuccessProps) => void\n}\n\nconst useApproveConfirmTransaction = ({\n  onApprove,\n  onConfirm,\n  onRequiresApproval,\n  onSuccess = noop,\n  onApproveSuccess = noop,\n}: ApproveConfirmTransaction) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const handlePreApprove = useRef(onRequiresApproval)\n  const { toastError } = useToast()\n\n  // Check if approval is necessary, re-check if account changes\n  useEffect(() => {\n    if (account && handlePreApprove.current) {\n      handlePreApprove.current().then((result) => {\n        if (result) {\n          dispatch({ type: 'requires_approval' })\n        }\n      })\n    }\n  }, [account, handlePreApprove, dispatch])\n\n  return {\n    isApproving: state.approvalState === 'loading',\n    isApproved: state.approvalState === 'success',\n    isConfirming: state.confirmState === 'loading',\n    isConfirmed: state.confirmState === 'success',\n    handleApprove: async () => {\n      try {\n        const tx = await onApprove()\n        dispatch({ type: 'approve_sending' })\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          dispatch({ type: 'approve_receipt' })\n          onApproveSuccess({ state, receipt })\n        }\n      } catch (error) {\n        // console.log(\"eeerrrrrrroooooorrrrrrr\", error)\n        dispatch({ type: 'approve_error' })\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    },\n    handleConfirm: async () => {\n      dispatch({ type: 'confirm_sending' })\n      // console.log(\"hiiiiiiiiiii\")\n      try {\n        const tx = await onConfirm()\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          dispatch({ type: 'confirm_receipt' })\n          onSuccess({ state, receipt })\n        }\n      } catch (error: any) {\n        console.log(\"erorrrrrrrrrrrrrrrrrrrrrrr\", error)\n        dispatch({ type: 'confirm_error' })\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    },\n  }\n}\n\nexport default useApproveConfirmTransaction","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronRightIcon, Button as UIKitButton, AutoRenewIcon, ChevronDownIcon, Box, Flex } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport enum ButtonArrangement {\n  ROW = 'row',\n  SEQUENTIAL = 'sequential',\n}\n\ninterface ApproveConfirmButtonsProps {\n  isApproveDisabled: boolean\n  isApproving: boolean\n  isConfirming: boolean\n  isConfirmDisabled: boolean\n  onApprove: () => void\n  onConfirm: () => void\n  buttonArrangement?: ButtonArrangement\n  confirmLabel?: string\n  confirmId?: string\n}\n\nconst StyledApproveConfirmButtonRow = styled.div`\n  align-items: center;\n  display: grid;\n  grid-template-columns: 1fr;\n  justify-content: center;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: 1fr 24px 1fr;\n  }\n`\n\nconst Button = styled(UIKitButton)`\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    min-width: 160px;\n  }\n`\n\nconst iconAttrs = { width: '24px', color: 'textDisabled' }\n\nconst ChevronRight = styled(ChevronRightIcon).attrs(iconAttrs)`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: block;\n  }\n`\n\nconst ChevronBottom = styled(ChevronDownIcon).attrs(iconAttrs)`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: none;\n  }\n`\n\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\n\nconst ApproveConfirmButtons: React.FC<ApproveConfirmButtonsProps> = ({\n  isApproveDisabled,\n  isApproving,\n  isConfirming,\n  isConfirmDisabled,\n  onApprove,\n  onConfirm,\n  buttonArrangement = ButtonArrangement.ROW,\n  confirmLabel,\n  confirmId,\n}) => {\n  const { t } = useTranslation()\n  const confirmButtonText = confirmLabel ?? t('Confirm')\n\n  const ApproveConfirmRow = () => {\n    return (\n      <StyledApproveConfirmButtonRow>\n        <Box>\n          <Button\n            disabled={isApproveDisabled}\n            onClick={onApprove}\n            endIcon={isApproving ? spinnerIcon : undefined}\n            isLoading={isApproving}\n          >\n            {isApproving ? t('Enabling') : t('Enable')}\n          </Button>\n        </Box>\n        <Flex justifyContent=\"center\">\n          <ChevronRight />\n          <ChevronBottom />\n        </Flex>\n        <Box>\n          <Button\n            id={confirmId}\n            onClick={onConfirm}\n            disabled={isConfirmDisabled}\n            isLoading={isConfirming}\n            endIcon={isConfirming ? spinnerIcon : undefined}\n          >\n            {isConfirming ? t('Confirming') : confirmButtonText}\n          </Button>\n        </Box>\n      </StyledApproveConfirmButtonRow>\n    )\n  }\n\n  const ApproveConfirmSequential = () => {\n    return (\n      <>\n        {isApproveDisabled ? (\n          <Box>\n            <Button\n              id={confirmId}\n              onClick={onConfirm}\n              disabled={isConfirmDisabled}\n              isLoading={isConfirming}\n              endIcon={isConfirming ? spinnerIcon : undefined}\n            >\n              {isConfirming ? t('Confirming') : confirmButtonText}\n            </Button>\n          </Box>\n        ) : (\n          <Box>\n            <Button onClick={onApprove} endIcon={isApproving ? spinnerIcon : undefined} isLoading={isApproving}>\n              {isApproving ? t('Enabling') : t('Enable')}\n            </Button>\n          </Box>\n        )}\n      </>\n    )\n  }\n\n  return buttonArrangement === ButtonArrangement.ROW ? ApproveConfirmRow() : ApproveConfirmSequential()\n}\n\nexport default ApproveConfirmButtons\n","var baseRandom = require('./_baseRandom');\n\n/**\n * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @param {number} [size=array.length] The size of `array`.\n * @returns {Array} Returns `array`.\n */\nfunction shuffleSelf(array, size) {\n  var index = -1,\n      length = array.length,\n      lastIndex = length - 1;\n\n  size = size === undefined ? length : size;\n  while (++index < size) {\n    var rand = baseRandom(index, lastIndex),\n        value = array[rand];\n\n    array[rand] = array[index];\n    array[index] = value;\n  }\n  array.length = size;\n  return array;\n}\n\nmodule.exports = shuffleSelf;\n","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of milliseconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\n\nexport default function differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getTime() - dateRight.getTime();\n}","import { useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { Team } from 'config/constants/types'\nimport { State, TeamsState } from '../types'\nimport { fetchTeam, fetchTeams } from '.'\n\nexport const useTeam = (id: number) => {\n  const team: Team = useSelector((state: State) => state.teams.data[id])\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchTeam(id))\n  }, [id, dispatch])\n\n  return team\n}\n\nexport const useTeams = () => {\n  const { isInitialized, isLoading, data }: TeamsState = useSelector((state: State) => state.teams)\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchTeams())\n  }, [dispatch])\n\n  return { teams: data, isInitialized, isLoading }\n}\n","import { useEffect, useMemo } from 'react'\nimport isEmpty from 'lodash/isEmpty'\nimport { useAppDispatch } from 'state'\nimport { fetchUserNfts } from 'state/nftMarket/reducer'\nimport { useGetCollections, useUserNfts } from 'state/nftMarket/hooks'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport { useProfile } from 'state/profile/hooks'\nimport { NftLocation, UserNftInitializationState } from 'state/nftMarket/types'\nimport { useWeb3React } from '@web3-react/core'\n\nconst useFetchUserNfts = () => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const { profile, isInitialized: isProfileInitialized, isLoading: isProfileLoading } = useProfile()\n  const { userNftsInitializationState } = useUserNfts()\n  const collections = useGetCollections()\n\n  const hasProfileNft = profile?.tokenId\n  const profileNftTokenId = profile?.tokenId?.toString()\n  const profileNftCollectionAddress = profile?.collectionAddress\n\n  const profileNftWithCollectionAddress = useMemo(() => {\n    if (hasProfileNft) {\n      return {\n        tokenId: profileNftTokenId,\n        collectionAddress: profileNftCollectionAddress,\n        nftLocation: NftLocation.PROFILE,\n      }\n    }\n    return null\n  }, [profileNftTokenId, profileNftCollectionAddress, hasProfileNft])\n\n  const previousProfileNftTokenId = usePreviousValue(profileNftTokenId)\n\n  // Fetch on first load when profile fetch is resolved\n  const shouldFetch =\n    account &&\n    userNftsInitializationState === UserNftInitializationState.UNINITIALIZED &&\n    isProfileInitialized &&\n    !isProfileLoading\n\n  // Fetch on account / profile change, once profile fetch is resolved\n  const hasAccountSwitched = previousProfileNftTokenId !== profileNftTokenId && !isProfileLoading && account\n\n  useEffect(() => {\n    if ((shouldFetch || hasAccountSwitched) && !isEmpty(collections)) {\n      dispatch(fetchUserNfts({ account, collections, profileNftWithCollectionAddress }))\n    }\n  }, [\n    dispatch,\n    account,\n    shouldFetch,\n    hasAccountSwitched,\n    profileNftTokenId,\n    collections,\n    profileNftWithCollectionAddress,\n  ])\n}\n\nexport default useFetchUserNfts\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, Radio } from '@pancakeswap/uikit'\n\ninterface SelectionCardProps {\n  name: string\n  value: string | number\n  isChecked?: boolean\n  onChange: (val: any) => void\n  image: string\n  disabled?: boolean\n}\n\nconst Label = styled.label<{ isDisabled: boolean }>`\n  cursor: ${({ isDisabled }) => (isDisabled ? 'not-allowed' : 'pointer')};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  opacity: ${({ isDisabled }) => (isDisabled ? '0.6' : '1')};\n`\n\nconst Body = styled.div`\n  align-items: center;\n  display: flex;\n  flex-grow: 1;\n  height: 80px;\n  padding: 8px 16px;\n`\n\nconst Children = styled.div`\n  margin-left: 16px;\n`\n\nconst StyledBackgroundImage = styled.div<{ src: string }>`\n  align-self: stretch;\n  background-image: url('${({ src }) => src}');\n  background-size: contain;\n  background-position: center;\n  background-repeat: no-repeat;\n  flex: none;\n  width: 80px;\n`\n\nconst SelectionCard: React.FC<SelectionCardProps> = ({\n  name,\n  value,\n  isChecked = false,\n  image,\n  onChange,\n  disabled,\n  children,\n  ...props\n}) => {\n  return (\n    <Card isSuccess={isChecked} isDisabled={disabled} mb=\"16px\" {...props}>\n      <Label isDisabled={disabled}>\n        <Body>\n          <Radio\n            name={name}\n            checked={isChecked}\n            value={value}\n            onChange={(e) => onChange(e.target.value)}\n            disabled={disabled}\n            style={{ flex: 'none' }}\n          />\n          <Children>{children}</Children>\n        </Body>\n        <StyledBackgroundImage src={image} />\n      </Label>\n    </Card>\n  )\n}\n\nexport default SelectionCard\n","var arrayShuffle = require('./_arrayShuffle'),\n    baseShuffle = require('./_baseShuffle'),\n    isArray = require('./isArray');\n\n/**\n * Creates an array of shuffled values, using a version of the\n * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n * @example\n *\n * _.shuffle([1, 2, 3, 4]);\n * // => [4, 1, 3, 2]\n */\nfunction shuffle(collection) {\n  var func = isArray(collection) ? arrayShuffle : baseShuffle;\n  return func(collection);\n}\n\nmodule.exports = shuffle;\n","var copyArray = require('./_copyArray'),\n    shuffleSelf = require('./_shuffleSelf');\n\n/**\n * A specialized version of `_.shuffle` for arrays.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction arrayShuffle(array) {\n  return shuffleSelf(copyArray(array));\n}\n\nmodule.exports = arrayShuffle;\n","var shuffleSelf = require('./_shuffleSelf'),\n    values = require('./values');\n\n/**\n * The base implementation of `_.shuffle`.\n *\n * @private\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction baseShuffle(collection) {\n  return shuffleSelf(values(collection));\n}\n\nmodule.exports = baseShuffle;\n"],"sourceRoot":""}