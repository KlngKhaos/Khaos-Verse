{"version":3,"sources":["views/Configurator/utils/constant.ts","views/PoolTour3D/components/THREE/Model/index.tsx","views/School/index.tsx","views/PoolTour3D/store/index.js"],"names":["ambientLightProps","intensity","cameraProps","fov","position","pointLightProps","decay","shadowMapSize","controlsProps","maxPolarAngle","Math","PI","minPolarAngle","target","maxDistance","minDistance","BackPaths","Model","props","data","setModel","setCurName","curSpeed","nodes","colors","animations","nft","group","useRef","actions","useState","THREE","mixer","showStatics","useStore","state","currentStatics","updateShowStatics","updateCurrentStatics","currentHoverModel","updateCurrentHoverModel","useEffect","current","length","idle","clipAction","glTFAnimationIndex","play","forEach","clip","uncacheClip","useFrame","_","delta","update","positionX","x","positionY","y","positionZ","z","scaleX","glTFScale","scaleY","scaleZ","rotationX","glTFRotation","rotationY","rotationZ","setModelStatics","temp","model","isSelected","hash","ref","dispose","scale","rotation","glTFRootNode","object","Object","keys","map","name","isSkinnedMesh","castShadow","geometry","material","skeleton","morphTargetDictionary","morphTargetInfluences","onClick","e","stopPropagation","onPointerMove","onPointerOut","uuid","isMesh","StyledMain","styled","div","StyledPage","StaticsPane","isStaticsPaneOpen","School","gladiatorNftContract","useGladiatorNft","account","useWeb3React","id","useParams","useTranslation","t","localStorage","getItem","curColor","setCurColor","curName","setColors","setCurrentName","setItem","nftHashes","settingNFTHashes","userNftHashes","settingUserNFTHashes","schoolNftHashes","settingSchoolNFTHashes","myGladiators","setMyGladiators","usersGladiators","setUsersGladiators","schoolGladiators","setSchoolGladiators","getNftHash","a","newNftHashes","newUserNftHashes","newSchoolNftHashes","getUserGladiator","i","userInfo","_hex","toString","push","parseInt","getAllGladiators","response","finalizedData","userFinalizedData","schoolFinalizedData","gladiator","find","item","tokenId","finalizedNFT","ipfsJson","console","log","setColor","col","JSON","stringify","setCurrentColor","curBack","nftHash","useCountStore","create","set","get","value","totalSupplies","setTotalSupplies"],"mappings":"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","file":"static/js/41.b1c5cd95.chunk.js","sourcesContent":["export const ambientLightProps = { intensity: 0.55 };\nexport const cameraProps = { fov: 20, position: [40, 0, 0] };\nexport const pixelRatio = 1;\nexport const pointLightProps = { decay: 2, position: [10, 20, 15], shadowMapSize: 512 };\n\nexport const controlsProps = { maxPolarAngle: 2 *Math.PI, minPolarAngle: 0, target: [0, 0, 0], maxDistance: 130, minDistance: 10 };\n\nexport const modelProps = { position: [0, 1, 8] };\n\nexport const groundProps = { posiiton: [0, 0, 0], rotation: [-Math.PI / 2, 0, 0] };\n\nexport const BackPaths = [\n    \"/images/gallery/arena1.jpg\",\n    \"/images/gallery/arena2.jpg\",\n    \"/images/gallery/arena3.jpg\"\n];","import React, { useEffect, useRef, useState } from 'react';\nimport { MeshProps, useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport useStore from '../../../store';\n\ninterface ModelProps extends MeshProps {\n  data: {\n    setModel: (model: any) => void;\n    setColor: (col: any) => void;\n    setCurName: (name: any) => void;\n    curSpeed: any;\n    nodes: any;\n    colors: any;\n    animations: any;\n    nft?: any;\n    position: any;\n  };\n}\n\ninterface actions {\n  current: {\n    idle: {\n      play: () => void,\n    };\n  };\n}\n\nconst Model: (props: ModelProps) => JSX.Element | null = (props) => {\n  const {\n    data: { setModel, setCurName, curSpeed, nodes, colors, animations, nft, position },\n  } = props;\n  const group = useRef()\n\n  const actions: actions = useRef();\n\n  const [mixer] = useState(() => new THREE.AnimationMixer(group));\n\n  const showStatics = useStore(state => state.showStatics);\n  const updateShowStatics = useStore(state => state.updateShowStatics);\n  const currentStatics = useStore(state => state.currentStatics);\n  const updateCurrentStatics = useStore(state => state.updateCurrentStatics);\n  const currentHoverModel = useStore(state => state.currentHoverModel);\n  const updateCurrentHoverModel = useStore(state => state.updateCurrentHoverModel);\n\n  useEffect(() => {\n    setModel({ 'scene': group.current });\n  }, [setModel]);\n\n  useEffect(() => {\n    if (animations.length) {\n      actions.current = {\n        idle: mixer.clipAction(animations[nft.glTFAnimationIndex || 0], group.current),\n      };\n      actions.current.idle.play();\n    }\n\n    return () => animations.forEach((clip) => mixer.uncacheClip(clip))\n\n  }, [animations, mixer]);\n\n  useFrame((_, delta) => mixer.update(delta * curSpeed));\n  const positionX = position?.x || 0;\n  const positionY = position?.y || 0;\n  const positionZ = position?.z || 0;\n\n  const scaleX = nft.glTFScale?.x || 1;\n  const scaleY = nft.glTFScale?.y || 1;\n  const scaleZ = nft.glTFScale?.z || 1;\n\n  const rotationX = nft.glTFRotation?.x || -Math.PI / 2;\n  const rotationY = nft.glTFRotation?.y || 0;\n  const rotationZ = nft.glTFRotation?.z || 0;\n\n  const setModelStatics = () => {\n    const temp = { ...nft };\n    delete temp.model;\n    updateCurrentStatics(temp);\n  }\n  const isSelected = () => (!showStatics && !currentHoverModel) || currentHoverModel?.hash === nft.hash || nft.hash === currentStatics?.hash;\n\n  return (\n    <group position={[positionX, positionY, positionZ]}>\n      <group ref={group} dispose={null} scale={[scaleX, scaleY, scaleZ]}>\n        <group rotation={[rotationX, rotationY, rotationZ]}>\n          <group >\n            {nodes[nft.glTFRootNode || 'Armature_rootJoint'] ?\n              <primitive object={nodes[nft.glTFRootNode || 'Armature_rootJoint']} /> : null\n            }\n            {\n              Object.keys(nodes).map((name) => {\n                return nodes[name].isSkinnedMesh ? (\n                  <skinnedMesh\n                    castShadow\n                    key={nodes[name].uuid}\n                    geometry={nodes[name].geometry}\n                    material={nodes[name].material}\n                    skeleton={nodes[name].skeleton}\n                    morphTargetDictionary={nodes[name].morphTargetDictionary}\n                    morphTargetInfluences={nodes[name].morphTargetInfluences}\n                    material-color={isSelected() ? (colors[name] ? colors[name] : '#ffffff') : '#111111'}\n                    onClick={(e) => { setCurName(name); setModelStatics(); e.stopPropagation(); }}\n                    onPointerMove={() => updateCurrentHoverModel(nft)}\n                    onPointerOut={() => updateCurrentHoverModel(null)}\n                  />\n                ) : nodes[name].isMesh ? (\n                  <mesh\n                    castShadow\n                    key={nodes[name].uuid}\n                    material={nodes[name].material}\n                    material-color={isSelected() ? (colors[name] ? colors[name] : '#ffffff') : '#111111'}\n                    morphTargetDictionary={nodes[name].morphTargetDictionary}\n                    morphTargetInfluences={nodes[name].morphTargetInfluences}\n                    onClick={(e) => { setCurName(name); setModelStatics(); e.stopPropagation() }}\n                    onPointerMove={() => updateCurrentHoverModel(nft)}\n                    onPointerOut={() => updateCurrentHoverModel(null)}\n                  />\n                ) : null;\n              })\n            }\n          </group>\n        </group>\n      </group>\n    </group>\n  );\n};\n\nexport default Model;","import React, { useState , useEffect} from 'react'\nimport styled from 'styled-components'\nimport { useParams } from 'react-router-dom'\nimport { useTranslation } from 'contexts/Localization'\nimport Viewer from './components/Viewer';\nimport Statics from '../PoolTour3D/components/UI/Statics';\nimport useStore from '../PoolTour3D/store';\nimport { useGladiatorNft } from 'hooks/useContract'\nimport { useWeb3React } from '@web3-react/core'\nimport axios from \"axios\"\nimport { useAppDispatch } from 'state'\nimport { fetchWalletGalleryNfts } from 'state/gallery'\nimport NftCard from '../Gallery/components/GalleryModelCard/NftCard/index'\nimport Configurator3DNftModal from \"../Gallery/components/Configurator3DNftModal\"\nimport ViewerSolo from 'views/Configurator/components/ViewerSolo'\nimport { getAllGladiators } from '../../state/nftMarket/helpers'\n\nconst StyledMain = styled.div`\n  display: flex;\n  align-items: center;\n  overflow: hidden;\n`\n\nconst StyledPage = styled.div`\n  text-align: center;\n`\n\nconst StaticsPane = styled.div<{ isStaticsPaneOpen: boolean }>`\n  flex: none;\n  overflow: hidden;\n  transition: width 200ms ease-in-out;\n  width: ${({ isStaticsPaneOpen }) => (isStaticsPaneOpen ? '384px' : 0)};\n  position: absolute;\n  right: 0;\n`\n\nconst School = () => {\n    const gladiatorNftContract = useGladiatorNft()\n    const { account } = useWeb3React()\n\n    const { id }: { id: string } = useParams()\n    const { t } = useTranslation()\n    const [curColor, setCurColor] = useState(localStorage.getItem('con_curColor') ? localStorage.getItem('con_curColor') : '#ffffff');\n    const [curName, setCurName] = useState(localStorage.getItem('con_curName') ? localStorage.getItem('con_curName') : 'None selected.');\n    const [curSpeed, setCurSpeed] = useState(localStorage.getItem('con_curSpeed') ? localStorage.getItem('con_curSpeed') : 1);\n    const [curBack, setCurBack] = useState(localStorage.getItem('con_curBack') ? localStorage.getItem('con_curBack') : 0);\n    const [colors, setColors] = useState( {} );\n    const showStatics = useStore( state => state.showStatics );\n  \n    const setCurrentColor = (col) => {\n        setCurColor(col);\n        localStorage.setItem('con_curColor', col);\n    \n        const temp = {...colors};\n        temp[curName] = col;\n        setColors(temp);\n        localStorage.setItem('con_colors', JSON.stringify(colors));\n    }\n  \n    const setCurrentName = (name) => {\n        setCurName(name);\n        setCurColor(colors[name] ? colors[name] : '#ffffff');\n    \n        localStorage.setItem('con_curName', name);\n    }\n\n    const {\n      nftHashes,\n      settingNFTHashes,\n      userNftHashes,\n      settingUserNFTHashes,\n      schoolNftHashes,\n      settingSchoolNFTHashes,\n      myGladiators,\n      setMyGladiators,\n      usersGladiators,\n      setUsersGladiators,\n      schoolGladiators,\n      setSchoolGladiators,\n    } = useStore((state) => state)\n    const getNftHash = async () => {\n      try {\n        if (!nftHashes.length || !userNftHashes.length || !schoolNftHashes.length) {\n          // console.log(\"nothing found\")\n          const newNftHashes = []\n          const newUserNftHashes = []\n          const newSchoolNftHashes = []\n          const data = await gladiatorNftContract.getUserGladiator(account)\n          //  console.log(\"data<><><><><><>\", data)\n          for (let i = 0; i < data.length; i++) {\n            // console.log(\"newNftHashes\", i)\n            const userInfo = await gladiatorNftContract.userInfo(account, data[i]._hex.toString())\n            newNftHashes.push(parseInt(data[i]._hex, 16))\n            if (userInfo['spot'] === 'user') {\n              // console.log(\"newUserNftHashes\" , i)\n              newUserNftHashes.push(parseInt(data[i]._hex, 16))\n            }\n            if (userInfo['spot'] === 'school') {\n              // console.log(\"newSchoolNftHashes\" , i)\n              newSchoolNftHashes.push(parseInt(data[i]._hex, 16))\n            }\n          }\n          const response = await getAllGladiators()\n          // console.log(\"response\", response);\n          // console.log(\"response.length\", response.length);\n  \n          const finalizedData = []\n          const userFinalizedData = []\n          const schoolFinalizedData = []\n  \n          if (response && response.length !== 0) {\n            if (!myGladiators) {\n              // console.log(\"no myGladiators\");\n              for (let i = 0; i < newNftHashes.length; i++) {\n                let gladiator = null\n                gladiator = response.find((item) => item.tokenId == newNftHashes[i])\n                // console.log(\"iiiiiiiiiiiiiii\", i);\n                if (gladiator) {\n                  // console.log(\"gladiator mygladiator\", gladiator)\n                  const finalizedNFT = gladiator.ipfsJson.nft\n                  // console.log(\"inside gladiatorrrrrrrrrr\", gladiator);\n                  finalizedData.push({ ...finalizedNFT, tokenId: gladiator.tokenId })\n                }\n              }\n              // console.log(\"setMyGladiators\", finalizedData);\n              setMyGladiators(finalizedData)\n            }\n            if (!usersGladiators) {\n              // console.log(\"no usersGladiators\");\n              for (let i = 0; i < newUserNftHashes.length; i++) {\n                let gladiator = null\n                gladiator = response.find((item) => item.tokenId == newUserNftHashes[i])\n                // console.log(\"iiiiiiiiiiiiiii\", i);\n                if (gladiator) {\n                  // console.log(\"gladiator mygladiator\", gladiator)\n                  const finalizedNFT = gladiator.ipfsJson.nft\n                  // console.log(\"inside gladiatorrrrrrrrrr\", gladiator);\n                  userFinalizedData.push({ ...finalizedNFT, tokenId: gladiator.tokenId })\n                }\n              }\n              // console.log(\"setUsersGladiators\", userFinalizedData);\n              setUsersGladiators(userFinalizedData)\n            }\n            if (!schoolGladiators) {\n              // console.log(\"no schoolGladiators\");\n              for (let i = 0; i < newSchoolNftHashes.length; i++) {\n                let gladiator = null\n                gladiator = response.find((item) => item.tokenId == newSchoolNftHashes[i])\n                // console.log(\"iiiiiiiiiiiiiii\", i);\n                if (gladiator) {\n                  // console.log(\"gladiator mygladiator\", gladiator)\n                  const finalizedNFT = gladiator.ipfsJson.nft\n                  // console.log(\"inside gladiatorrrrrrrrrr\", gladiator);\n                  schoolFinalizedData.push({ ...finalizedNFT, tokenId: gladiator.tokenId })\n                }\n              }\n              // console.log(\"setSchoolGladiators\", schoolFinalizedData);\n            setSchoolGladiators(schoolFinalizedData)\n            }\n          }\n  \n          setSchoolGladiators()\n          settingNFTHashes(newNftHashes)\n          settingUserNFTHashes(newUserNftHashes)\n          settingSchoolNFTHashes(newSchoolNftHashes)\n        }\n      } catch (error) {\n        console.log('errrrrrrrrrrrrrooooooooooooorrrrrrrrrrrrrrrr', error)\n      }\n    }\n    useEffect(() => {\n      getNftHash()\n    }, [])\n\n    return (\n        <StyledPage>\n            <StyledMain>\n                <Viewer \n                    curColor={curColor}\n                    setColor={(col) => setCurrentColor(col)}\n                    curName={curName}\n                    setCurName={(name) => setCurrentName(name)}\n                    curSpeed={curSpeed}\n                    curBack={id}\n                    colors={colors}\n                    nftHash={nftHashes || []}\n                />\n                <StaticsPane isStaticsPaneOpen={showStatics}>\n                    <Statics />\n                </StaticsPane>\n            </StyledMain>\n        </StyledPage>\n    )\n}\n\nexport default School\n","import create from 'zustand';\n\nexport const useCountStore = create((set, get) => ({\n\tshowStatics: false,\n\tupdateShowStatics: ( value ) => {\n\t\tset({ showStatics: value });\n\t},\n\tcurrentStatics: null,\n\tupdateCurrentStatics: (value) => {\n\t\tset({ currentStatics: value });\n\t},\n\tcurrentHoverModel: null,\n\tupdateCurrentHoverModel: (value) => {\n\t\tset({ currentHoverModel: value });\n\t},\n\tmyGladiators: null,\n\tsetMyGladiators: data => {\n\t\tset({myGladiators: data})\n\t},\n\tschoolGladiators: null,\n\tsetSchoolGladiators: data => {\n\t\tset({schoolGladiators: data})\n\t},\n\tusersGladiators: null,\n\tsetUsersGladiators: data => {\n\t\tset({usersGladiators: data})\n\t},\n\tuserNftHashes: [],\n\tsettingUserNFTHashes: data => {\n\t\tset({userNftHashes: data})\n\t},\n\tschoolNftHashes: [],\n\tsettingSchoolNFTHashes: data => {\n\t\tset({schoolNftHashes: data})\n\t},\n\tnftHashes: [],\n\tsettingNFTHashes: data => {\n\t\tset({nftHashes: data})\n\t},\n\ttotalSupplies: 0,\n\tsetTotalSupplies: data => {\n\t\tset({totalSupplies: data})\n\t}\n}))\n\nexport default useCountStore;"],"sourceRoot":""}