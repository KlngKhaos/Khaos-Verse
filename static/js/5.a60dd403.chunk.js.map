{"version":3,"sources":["components/ApproveConfirmButtons.tsx","views/Nft/market/components/BuySellModals/shared/styles.tsx","views/Nft/market/components/Activity/NoNftsImage.tsx","views/Nft/market/components/BuySellModals/SellModal/types.ts","views/Nft/market/components/BuySellModals/SellModal/SellStage.tsx","views/Nft/market/components/BuySellModals/SellModal/styles.tsx","views/Nft/market/components/BuySellModals/SellModal/SetPriceStage.tsx","views/Nft/market/components/BuySellModals/SellModal/EditStage.tsx","views/Nft/market/components/BuySellModals/SellModal/RemoveStage.tsx","views/Nft/market/components/BuySellModals/SellModal/TransferStage.tsx","views/Nft/market/components/BuySellModals/SellModal/index.tsx","views/Nft/market/Profile/hooks/useFetchUserNfts.tsx","views/ProfileCreation/SelectionCard.tsx","views/Nft/market/components/PaginationButtons.tsx","views/Nft/market/components/ProfileCell.tsx","views/Nft/market/Profile/components/EditProfileModal/reducer.ts","views/Nft/market/Profile/hooks/useGetProfileCosts.ts","views/Nft/market/Profile/components/EditProfileModal/StartView.tsx","views/Nft/market/Profile/components/EditProfileModal/PauseProfileView.tsx","views/Nft/market/Profile/components/EditProfileModal/ChangeProfilePicView.tsx","views/Nft/market/Profile/components/EditProfileModal/ApproveNrtView.tsx","views/Nft/market/Profile/components/EditProfileModal/index.tsx","components/ProfileAvatarWithTeam.tsx","components/TableLoader.tsx","views/Nft/market/components/Activity/ActivityEventText.tsx","views/Nft/market/components/Activity/MobileModal.tsx","views/Nft/market/components/Activity/ActivityPrice.tsx","views/Nft/market/components/Activity/ActivityRow.tsx","views/Nft/market/components/ProfileNftModal.tsx","views/Nft/market/components/BuySellModals/shared/ApproveAndConfirmStage.tsx","views/Nft/market/components/BuySellModals/shared/TransactionConfirmed.tsx","views/Nft/market/components/BuySellModals/shared/ConfirmStage.tsx","hooks/useApproveConfirmTransaction.ts"],"names":["ButtonArrangement","StyledApproveConfirmButtonRow","styled","div","theme","mediaQueries","md","Button","UIKitButton","iconAttrs","width","color","ChevronRight","ChevronRightIcon","attrs","ChevronBottom","ChevronDownIcon","spinnerIcon","spin","ApproveConfirmButtons","isApproveDisabled","isApproving","isConfirming","isConfirmDisabled","onApprove","onConfirm","buttonArrangement","ROW","confirmLabel","confirmId","t","useTranslation","confirmButtonText","disabled","onClick","endIcon","undefined","isLoading","justifyContent","id","RoundedImage","Image","radii","small","Divider","colors","cardBorder","HorizontalDivider","StepIndicator","Flex","success","secondary","textDisabled","NoNftsImage","SellingStage","SellStage","nftToSell","lowestPrice","continueToNextStage","continueToTransferStage","hasProfile","useProfile","itemPageUrlId","tokenId","useModal","EditProfileModal","onEditProfileModal","p","src","image","thumbnail","height","mr","flex","gridTemplateColumns","alignItems","bold","name","fontSize","textAlign","collectionName","toLocaleString","minimumFractionDigits","maximumFractionDigits","px","mt","as","Link","external","variant","href","nftsBaseUrl","collectionAddress","getBscScanLinkForNft","flexDirection","pb","mb","stagesWithBackButton","SET_PRICE","ADJUST_PRICE","APPROVE_AND_CONFIRM_SELL","CONFIRM_ADJUST_PRICE","REMOVE_FROM_MARKET","CONFIRM_REMOVE_FROM_MARKET","TRANSFER","CONFIRM_TRANSFER","StyledModal","Modal","stage","includes","textSubtle","GreyedOutContainer","Box","dropdown","RightAlignedInput","Input","BnbAmountCell","bnbAmount","bnbBusdPrice","useBNBBusdPrice","usdAmount","multiplyPriceByAmount","FeeAmountCell","creatorFee","tradingFee","totalFee","feeAmount","SetPriceStage","currentPrice","price","setPrice","inputRef","useRef","adjustedPriceIsTheSame","parseFloat","priceIsValid","Number","isNaN","useGetCollection","creatorFeeAsNumber","tradingFeeAsNumber","bnbPrice","priceAsFloat","priceInUsd","priceIsOutOfRange","useTooltip","percentage","placement","tooltip","tooltipVisible","targetRef","useEffect","current","focus","textTransform","scale","type","inputMode","value","ref","isWarning","onChange","e","target","minPrice","maxPrice","maxWidth","alignSelf","EditStage","continueToAdjustPriceStage","continueToRemoveFromMarketStage","toLowerCase","gladiatorCollectiblesAddress","attributes","marketData","currentAskPrice","RemoveStage","TransferStage","transferAddress","setTransferAddress","isInvalidTransferAddress","account","useWeb3React","transferAddressEqualsConnectedAddress","pt","placeholder","length","modalTitles","SELL","EDIT","TX_CONFIRMED","getToastText","SellModal","onDismiss","useState","setStage","confirmedTxHash","setConfirmedTxHash","useTheme","callWithGasPrice","useCallWithGasPrice","toastSuccess","useToast","collectionContract","useErc721CollectionContract","nftMarketContract","useNftMarketContract","dispatch","useAppDispatch","isAddress","useGetLowestPriceFromNft","dispatchSuccessAction","updateUserNft","location","NftLocation","WALLET","removeUserNft","FORSALE","useApproveConfirmTransaction","onRequiresApproval","a","isApprovedForAll","address","approvedForContract","onApproveSuccess","receipt","Toast","txHash","transactionHash","methodName","askPrice","parseUnits","onSuccess","isApproved","handleApprove","handleConfirm","showBackButton","title","onBack","headerBackground","gradients","cardHeader","ApproveAndConfirmStage","TransactionConfirmed","ConfirmStage","useFetchUserNfts","profile","isProfileInitialized","isInitialized","isProfileLoading","userNftsInitializationState","useUserNfts","collections","useGetCollections","hasProfileNft","profileNftTokenId","toString","profileNftCollectionAddress","profileNftWithCollectionAddress","useMemo","nftLocation","PROFILE","previousProfileNftTokenId","usePreviousValue","shouldFetch","UserNftInitializationState","UNINITIALIZED","hasAccountSwitched","isEmpty","fetchUserNfts","Label","label","isDisabled","Body","Children","StyledBackgroundImage","SelectionCard","isChecked","children","props","isSuccess","checked","style","PageButtons","Arrow","primary","Avatar","img","StyledFlex","ProfileCell","accountAddress","useGetProfileAvatar","username","profileNft","nft","usernameFetchStatus","avatarFetchStatus","profileName","sellerProfilePicComponent","FetchStatus","Fetched","to","display","lineHeight","truncateHash","Views","reducer","state","action","currentView","view","previousView","useEditProfile","useReducer","START","goToStart","goToChange","CHANGE","goToRemove","REMOVE","goToApprove","APPROVE","goPrevious","useGetProfileCosts","setIsLoading","numberNrtToReactivate","ethers","BigNumber","from","numberNrtToRegister","numberNrtToUpdate","costs","setCosts","toastError","calls","map","method","getGladiatorProfileAddress","multicallv2","profileABI","fetchCosts","DangerOutline","failure","AvatarWrapper","sm","StartPage","nrtContract","useNrt","useGetNrtBalance","nrtBalance","balance","fetchStatus","isProfileCostsLoading","needsApproval","setNeedsApproval","minimumNrtRequired","isActive","hasMinimumCakeRequired","gte","allowance","response","lt","checkApprovalStatus","ProfileAvatarWithTeam","minimum","formatBigNumber","PauseProfilePage","isAcknowledged","setIsAcknowledged","setIsConfirming","pancakeProfileContract","useProfileContract","handleDeactivateProfile","tx","hash","wait","status","fetchProfile","cost","htmlFor","cursor","marginBottom","ml","ChangeProfilePicPage","selectedNft","setSelectedNft","nfts","profileContract","library","nftsInWallet","filter","contract","getErc721Contract","getSigner","isConfirmed","maxHeight","overflowY","walletNft","ApproveNrtPage","setIsApproving","approve","mul","viewTitle","isStartView","handleBack","hideCloseButton","StartView","PauseProfileView","ChangeProfilePicView","ApproveNrtView","TeamAvatar","card","background","bg","AvatarInactive","NoProfileAvatarIcon","team","images","alt","GridItem","LoadingRow","useMatchBreakpoints","isXs","isSm","TableLoader","ActivityEventText","marketEvent","events","MarketEvent","NEW","text","CANCEL","MODIFY","BUY","MobileModal","activity","localeTimestamp","isUserActivity","chainId","useActiveWeb3React","NFTMedia","otherParty","seller","buyer","getBscScanLink","ActivityPrice","justifySelf","ActivityRow","isNftActivity","timestampAsMs","timestamp","Date","year","month","day","hour","minute","onPresentMobileModal","isPBCollection","find","attribute","traitType","event","stopPropagation","RouterLink","TextWrapper","ProfileNftModal","py","size","initialState","approvalState","confirmState","actions","noop","handlePreApprove","then","result","console","log"],"mappings":"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","file":"static/js/5.a60dd403.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronRightIcon, Button as UIKitButton, AutoRenewIcon, ChevronDownIcon, Box, Flex } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport enum ButtonArrangement {\n  ROW = 'row',\n  SEQUENTIAL = 'sequential',\n}\n\ninterface ApproveConfirmButtonsProps {\n  isApproveDisabled: boolean\n  isApproving: boolean\n  isConfirming: boolean\n  isConfirmDisabled: boolean\n  onApprove: () => void\n  onConfirm: () => void\n  buttonArrangement?: ButtonArrangement\n  confirmLabel?: string\n  confirmId?: string\n}\n\nconst StyledApproveConfirmButtonRow = styled.div`\n  align-items: center;\n  display: grid;\n  grid-template-columns: 1fr;\n  justify-content: center;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: 1fr 24px 1fr;\n  }\n`\n\nconst Button = styled(UIKitButton)`\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    min-width: 160px;\n  }\n`\n\nconst iconAttrs = { width: '24px', color: 'textDisabled' }\n\nconst ChevronRight = styled(ChevronRightIcon).attrs(iconAttrs)`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: block;\n  }\n`\n\nconst ChevronBottom = styled(ChevronDownIcon).attrs(iconAttrs)`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: none;\n  }\n`\n\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\n\nconst ApproveConfirmButtons: React.FC<ApproveConfirmButtonsProps> = ({\n  isApproveDisabled,\n  isApproving,\n  isConfirming,\n  isConfirmDisabled,\n  onApprove,\n  onConfirm,\n  buttonArrangement = ButtonArrangement.ROW,\n  confirmLabel,\n  confirmId,\n}) => {\n  const { t } = useTranslation()\n  const confirmButtonText = confirmLabel ?? t('Confirm')\n\n  const ApproveConfirmRow = () => {\n    return (\n      <StyledApproveConfirmButtonRow>\n        <Box>\n          <Button\n            disabled={isApproveDisabled}\n            onClick={onApprove}\n            endIcon={isApproving ? spinnerIcon : undefined}\n            isLoading={isApproving}\n          >\n            {isApproving ? t('Enabling') : t('Enable')}\n          </Button>\n        </Box>\n        <Flex justifyContent=\"center\">\n          <ChevronRight />\n          <ChevronBottom />\n        </Flex>\n        <Box>\n          <Button\n            id={confirmId}\n            onClick={onConfirm}\n            disabled={isConfirmDisabled}\n            isLoading={isConfirming}\n            endIcon={isConfirming ? spinnerIcon : undefined}\n          >\n            {isConfirming ? t('Confirming') : confirmButtonText}\n          </Button>\n        </Box>\n      </StyledApproveConfirmButtonRow>\n    )\n  }\n\n  const ApproveConfirmSequential = () => {\n    return (\n      <>\n        {isApproveDisabled ? (\n          <Box>\n            <Button\n              id={confirmId}\n              onClick={onConfirm}\n              disabled={isConfirmDisabled}\n              isLoading={isConfirming}\n              endIcon={isConfirming ? spinnerIcon : undefined}\n            >\n              {isConfirming ? t('Confirming') : confirmButtonText}\n            </Button>\n          </Box>\n        ) : (\n          <Box>\n            <Button onClick={onApprove} endIcon={isApproving ? spinnerIcon : undefined} isLoading={isApproving}>\n              {isApproving ? t('Enabling') : t('Enable')}\n            </Button>\n          </Box>\n        )}\n      </>\n    )\n  }\n\n  return buttonArrangement === ButtonArrangement.ROW ? ApproveConfirmRow() : ApproveConfirmSequential()\n}\n\nexport default ApproveConfirmButtons\n","import styled from 'styled-components'\nimport { Flex, Image } from '@pancakeswap/uikit'\n\nexport const RoundedImage = styled(Image)`\n  border-radius: ${({ theme }) => theme.radii.small};\n  overflow: hidden;\n`\n\nexport const Divider = styled.div`\n  margin: 16px 0;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nexport const HorizontalDivider = styled.div`\n  border-right: 1px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nexport const StepIndicator = styled(Flex)<{ success: boolean; disabled?: boolean }>`\n  border-radius: 50%;\n  background-color: ${({ theme, success, disabled }) => {\n    if (disabled) {\n      return 'none'\n    }\n    return success ? theme.colors.success : theme.colors.secondary\n  }};\n  border: ${({ theme, disabled }) => (disabled ? `1px solid ${theme.colors.textDisabled}` : 'none')};\n  height: 32px;\n  width: 32px;\n  justify-content: center;\n  align-items: center;\n  margin-right: 8px;\n`\n","import styled from 'styled-components'\n\nconst NoNftsImage = styled.div`\n  background: url('/images/nfts/no-profile-md.png');\n  background-repeat: no-repeat;\n  background-size: cover;\n  border-radius: 50%;\n  position: relative;\n  width: 96px;\n  height: 96px;\n\n  & > img {\n    border-radius: 50%;\n  }\n`\n\nexport default NoNftsImage\n","export enum SellingStage {\n  // Sell flow\n  SELL,\n  SET_PRICE,\n  APPROVE_AND_CONFIRM_SELL,\n  // Adjust price flow\n  EDIT,\n  ADJUST_PRICE,\n  CONFIRM_ADJUST_PRICE,\n  // Remove from market flow\n  REMOVE_FROM_MARKET,\n  CONFIRM_REMOVE_FROM_MARKET,\n  // Transfer flow\n  TRANSFER,\n  CONFIRM_TRANSFER,\n  // Common\n  TX_CONFIRMED,\n}\n","import React from 'react'\nimport { Flex, Grid, Text, Button, Link, BinanceIcon, LinkExternal, useModal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { nftsBaseUrl, gladiatorCollectiblesAddress } from 'views/Nft/market/constants'\nimport { NftToken } from 'state/nftMarket/types'\nimport { getBscScanLinkForNft } from 'utils'\nimport EditProfileModal from 'views/Nft/market/Profile/components/EditProfileModal'\nimport { useProfile } from 'state/profile/hooks'\nimport { Divider, HorizontalDivider, RoundedImage } from '../shared/styles'\n\ninterface SellStageProps {\n  nftToSell: NftToken\n  lowestPrice: number\n  continueToNextStage: () => void\n  continueToTransferStage: () => void\n}\n\n// Initial stage when user wants to put their NFT for sale or transfer to another wallet\nconst SellStage: React.FC<SellStageProps> = ({\n  nftToSell,\n  lowestPrice,\n  continueToNextStage,\n  continueToTransferStage,\n}) => {\n  const { t } = useTranslation()\n  const { hasProfile } = useProfile()\n  const itemPageUrlId = nftToSell.tokenId\n\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\n\n  return (\n    <>\n      <Flex p=\"16px\">\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\n          <Text bold>{nftToSell.name}</Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n            {nftToSell.collectionName}\n          </Text>\n          {lowestPrice && (\n            <>\n              <Text small color=\"textSubtle\">\n                {t('Lowest price')}\n              </Text>\n              <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n                <BinanceIcon width={16} height={16} mr=\"4px\" />\n                <Text small>\n                  {lowestPrice.toLocaleString(undefined, {\n                    minimumFractionDigits: 3,\n                    maximumFractionDigits: 3,\n                  })}\n                </Text>\n              </Flex>\n            </>\n          )}\n        </Grid>\n      </Flex>\n      <Flex justifyContent=\"space-between\" px=\"16px\" mt=\"8px\">\n        <Flex flex=\"2\">\n          <Text small color=\"textSubtle\">\n            {t('Token ID: %id%', { id: nftToSell.tokenId })}\n          </Text>\n        </Flex>\n        <Flex justifyContent=\"space-between\" flex=\"3\">\n          <Button\n            as={Link}\n            p=\"0px\"\n            height=\"16px\"\n            external\n            variant=\"text\"\n            href={`${nftsBaseUrl}/collections/${nftToSell.collectionAddress}/${itemPageUrlId}`}\n          >\n            {t('View Item')}\n          </Button>\n          <HorizontalDivider />\n          <LinkExternal\n            p=\"0px\"\n            height=\"16px\"\n            href={getBscScanLinkForNft(nftToSell.collectionAddress, nftToSell.tokenId)}\n          >\n            BscScan\n          </LinkExternal>\n        </Flex>\n      </Flex>\n      <Divider />\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\n        <Button mb=\"8px\" onClick={continueToNextStage}>\n          {t('Sell')}\n        </Button>\n        <Button mb=\"8px\" variant=\"secondary\" onClick={continueToTransferStage}>\n          {t('Transfer')}\n        </Button>\n        {hasProfile && (\n          <Button variant=\"secondary\" onClick={onEditProfileModal}>\n            {t('Set as Profile Pic')}\n          </Button>\n        )}\n      </Flex>\n    </>\n  )\n}\n\nexport default SellStage\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Modal, Box, Flex, Text, BinanceIcon, Input } from '@pancakeswap/uikit'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { SellingStage } from './types'\n\nexport const stagesWithBackButton = [\n  SellingStage.SET_PRICE,\n  SellingStage.ADJUST_PRICE,\n  SellingStage.APPROVE_AND_CONFIRM_SELL,\n  SellingStage.CONFIRM_ADJUST_PRICE,\n  SellingStage.REMOVE_FROM_MARKET,\n  SellingStage.CONFIRM_REMOVE_FROM_MARKET,\n  SellingStage.TRANSFER,\n  SellingStage.CONFIRM_TRANSFER,\n]\n\nexport const StyledModal = styled(Modal)<{ stage: SellingStage }>`\n  width: 360px;\n  & > div:last-child {\n    padding: 0;\n  }\n  & h2:first-of-type {\n    ${({ stage, theme }) => (stagesWithBackButton.includes(stage) ? `color: ${theme.colors.textSubtle}` : null)};\n  }\n  & svg:first-of-type {\n    ${({ stage, theme }) => (stagesWithBackButton.includes(stage) ? `fill: ${theme.colors.textSubtle}` : null)};\n  }\n`\n\nexport const GreyedOutContainer = styled(Box)`\n  background-color: ${({ theme }) => theme.colors.dropdown};\n  padding: 16px;\n`\n\nexport const RightAlignedInput = styled(Input)`\n  text-align: right;\n`\n\ninterface BnbAmountCellProps {\n  bnbAmount: number\n}\n\nexport const BnbAmountCell: React.FC<BnbAmountCellProps> = ({ bnbAmount }) => {\n  const bnbBusdPrice = useBNBBusdPrice()\n  if (!bnbAmount || bnbAmount === 0) {\n    return (\n      <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n        <BinanceIcon width={16} height={16} mr=\"4px\" />\n        <Text bold mr=\"4px\">\n          -\n        </Text>\n      </Flex>\n    )\n  }\n  const usdAmount = multiplyPriceByAmount(bnbBusdPrice, bnbAmount)\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n      <BinanceIcon width={16} height={16} mr=\"4px\" />\n      <Text bold mr=\"4px\">{`${bnbAmount.toLocaleString(undefined, {\n        minimumFractionDigits: 3,\n        maximumFractionDigits: 3,\n      })}`}</Text>\n      <Text small color=\"textSubtle\" textAlign=\"right\">\n        {`($${usdAmount.toLocaleString(undefined, {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2,\n        })})`}\n      </Text>\n    </Flex>\n  )\n}\n\ninterface FeeAmountCellProps {\n  bnbAmount: number\n  creatorFee: number\n  tradingFee: number\n}\n\nexport const FeeAmountCell: React.FC<FeeAmountCellProps> = ({ bnbAmount, creatorFee, tradingFee }) => {\n  if (!bnbAmount || bnbAmount === 0) {\n    return (\n      <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n        <BinanceIcon width={16} height={16} mr=\"4px\" />\n        <Text bold mr=\"4px\">\n          -\n        </Text>\n      </Flex>\n    )\n  }\n\n  const totalFee = creatorFee + tradingFee\n  const totalFeeAsDecimal = totalFee / 100\n  const feeAmount = bnbAmount * totalFeeAsDecimal\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n      <BinanceIcon width={16} height={16} mr=\"4px\" />\n      <Text bold mr=\"4px\">{`${feeAmount.toLocaleString(undefined, {\n        minimumFractionDigits: 3,\n        maximumFractionDigits: 6,\n      })}`}</Text>\n      <Text small color=\"textSubtle\" textAlign=\"right\">\n        ({totalFee}%)\n      </Text>\n    </Flex>\n  )\n}\n","import React, { useEffect, useRef } from 'react'\nimport { Flex, Grid, Box, Text, Button, BinanceIcon, ErrorIcon, useTooltip } from '@pancakeswap/uikit'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport { useTranslation } from 'contexts/Localization'\nimport { NftToken } from 'state/nftMarket/types'\nimport { useGetCollection } from 'state/nftMarket/hooks'\nimport { Divider } from '../shared/styles'\nimport { GreyedOutContainer, BnbAmountCell, RightAlignedInput, FeeAmountCell } from './styles'\n\ninterface SetPriceStageProps {\n  nftToSell: NftToken\n  variant: 'set' | 'adjust'\n  currentPrice?: string\n  lowestPrice?: number\n  price: string\n  setPrice: React.Dispatch<React.SetStateAction<string>>\n  continueToNextStage: () => void\n}\n\nconst MIN_PRICE = 0.005\nconst MAX_PRICE = 10000\n\n// Stage where user puts price for NFT they're about to put on sale\n// Also shown when user wants to adjust the price of already listed NFT\nconst SetPriceStage: React.FC<SetPriceStageProps> = ({\n  nftToSell,\n  variant,\n  lowestPrice,\n  currentPrice,\n  price,\n  setPrice,\n  continueToNextStage,\n}) => {\n  const { t } = useTranslation()\n  const inputRef = useRef<HTMLInputElement>()\n  const adjustedPriceIsTheSame = variant === 'adjust' && parseFloat(currentPrice) === parseFloat(price)\n  const priceIsValid = !price || Number.isNaN(parseFloat(price)) || parseFloat(price) <= 0\n\n  const { creatorFee, tradingFee } = useGetCollection(nftToSell.collectionAddress)\n  const creatorFeeAsNumber = parseFloat(creatorFee)\n  const tradingFeeAsNumber = parseFloat(tradingFee)\n  const bnbPrice = useBNBBusdPrice()\n  const priceAsFloat = parseFloat(price)\n  const priceInUsd = multiplyPriceByAmount(bnbPrice, priceAsFloat)\n\n  const priceIsOutOfRange = priceAsFloat > MAX_PRICE || priceAsFloat < MIN_PRICE\n\n  const { tooltip, tooltipVisible, targetRef } = useTooltip(\n    <>\n      <Text>\n        {t(\n          'When selling NFTs from this collection, a portion of the BNB paid will be diverted before reaching the seller:',\n        )}\n      </Text>\n      {creatorFeeAsNumber > 0 && (\n        <Text>{t('%percentage%% royalties to the collection owner', { percentage: creatorFee })}</Text>\n      )}\n      <Text>{t('%percentage%% trading fee will be used to buy & burn CAKE', { percentage: tradingFee })}</Text>\n    </>,\n    { placement: 'auto' },\n  )\n\n  useEffect(() => {\n    if (inputRef && inputRef.current) {\n      inputRef.current.focus()\n    }\n  }, [inputRef])\n\n  const getButtonText = () => {\n    if (variant === 'adjust') {\n      if (adjustedPriceIsTheSame || priceIsValid) {\n        return t('Input New Sale Price')\n      }\n      return t('Confirm')\n    }\n    return t('Enable Listing')\n  }\n  return (\n    <>\n      <Text fontSize=\"24px\" bold p=\"16px\">\n        {variant === 'set' ? t('Set Price') : t('Adjust Sale Price')}\n      </Text>\n      <GreyedOutContainer>\n        <Text fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" bold>\n          {t('Set Price')}\n        </Text>\n        <Flex>\n          <Flex flex=\"1\" alignItems=\"center\">\n            <BinanceIcon width={24} height={24} mr=\"4px\" />\n            <Text bold>WBNB</Text>\n          </Flex>\n          <Flex flex=\"2\">\n            <RightAlignedInput\n              scale=\"sm\"\n              type=\"number\"\n              inputMode=\"decimal\"\n              value={price}\n              ref={inputRef}\n              isWarning={priceIsOutOfRange}\n              onChange={(e) => setPrice(e.target.value)}\n            />\n          </Flex>\n        </Flex>\n        <Flex alignItems=\"center\" height=\"21px\" justifyContent=\"flex-end\">\n          {!Number.isNaN(priceInUsd) && (\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`$${priceInUsd.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`}\n            </Text>\n          )}\n        </Flex>\n        {priceIsOutOfRange && (\n          <Text fontSize=\"12px\" color=\"failure\">\n            {t('Allowed price range is between %minPrice% and %maxPrice% WBNB', {\n              minPrice: MIN_PRICE,\n              maxPrice: MAX_PRICE,\n            })}\n          </Text>\n        )}\n        <Flex mt=\"8px\">\n          <Text small color=\"textSubtle\" mr=\"8px\">\n            {t('Seller pays %percentage%% platform fee on sale', {\n              percentage: creatorFeeAsNumber + tradingFeeAsNumber,\n            })}\n          </Text>\n          <span ref={targetRef}>\n            <ErrorIcon />\n          </span>\n          {tooltipVisible && tooltip}\n        </Flex>\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mt=\"16px\">\n          <Text small color=\"textSubtle\">\n            {t('Platform fee if sold')}\n          </Text>\n          <FeeAmountCell bnbAmount={priceAsFloat} creatorFee={creatorFeeAsNumber} tradingFee={tradingFeeAsNumber} />\n        </Flex>\n        {lowestPrice && (\n          <Flex justifyContent=\"space-between\" alignItems=\"center\" mt=\"16px\">\n            <Text small color=\"textSubtle\">\n              {t('Lowest price on market')}\n            </Text>\n            <BnbAmountCell bnbAmount={lowestPrice} />\n          </Flex>\n        )}\n      </GreyedOutContainer>\n      <Grid gridTemplateColumns=\"32px 1fr\" p=\"16px\" maxWidth=\"360px\">\n        <Flex alignSelf=\"flex-start\">\n          <ErrorIcon width={24} height={24} color=\"textSubtle\" />\n        </Flex>\n        <Box>\n          <Text small color=\"textSubtle\">\n            {t('The NFT will be removed from your wallet and put on sale at this price.')}\n          </Text>\n          <Text small color=\"textSubtle\">\n            {t('Sales are in WBNB. You can swap WBNB to BNB 1:1 for free with PancakeSwap.')}\n          </Text>\n        </Box>\n      </Grid>\n      <Divider />\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\n        <Button\n          mb=\"8px\"\n          onClick={continueToNextStage}\n          disabled={priceIsValid || adjustedPriceIsTheSame || priceIsOutOfRange}\n        >\n          {getButtonText()}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default SetPriceStage\n","import React from 'react'\nimport { Flex, Grid, Text, Button, Link, LinkExternal, BinanceIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { nftsBaseUrl, gladiatorCollectiblesAddress } from 'views/Nft/market/constants'\nimport { NftToken } from 'state/nftMarket/types'\nimport { getBscScanLinkForNft } from 'utils'\nimport { Divider, HorizontalDivider, RoundedImage } from '../shared/styles'\n\ninterface EditStageProps {\n  nftToSell: NftToken\n  lowestPrice: number\n  continueToAdjustPriceStage: () => void\n  continueToRemoveFromMarketStage: () => void\n}\n\n// Initial stage when user wants to edit already listed NFT (i.e. adjust price or remove from sale)\nconst EditStage: React.FC<EditStageProps> = ({\n  nftToSell,\n  lowestPrice,\n  continueToAdjustPriceStage,\n  continueToRemoveFromMarketStage,\n}) => {\n  const { t } = useTranslation()\n  const itemPageUrlId =\n    nftToSell.collectionAddress.toLowerCase() === gladiatorCollectiblesAddress.toLowerCase()\n      ? nftToSell.attributes[0].value\n      : nftToSell.tokenId\n\n  return (\n    <>\n      <Flex p=\"16px\">\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\n          <Text bold>{nftToSell.name}</Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n            {nftToSell.collectionName}\n          </Text>\n          {lowestPrice && (\n            <>\n              <Text small color=\"textSubtle\">\n                {t('Lowest price')}\n              </Text>\n\n              <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n                <BinanceIcon width={16} height={16} mr=\"4px\" />\n                <Text small>{lowestPrice}</Text>\n              </Flex>\n            </>\n          )}\n          <Text small color=\"textSubtle\">\n            {t('Your price')}\n          </Text>\n          <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n            <BinanceIcon width={16} height={16} mr=\"4px\" />\n            <Text small>{nftToSell.marketData.currentAskPrice}</Text>\n          </Flex>\n        </Grid>\n      </Flex>\n      <Flex justifyContent=\"space-between\" px=\"16px\" mt=\"8px\">\n        <Flex flex=\"2\">\n          <Text small color=\"textSubtle\">\n            {t('Token ID: %id%', { id: nftToSell.tokenId })}\n          </Text>\n        </Flex>\n        <Flex justifyContent=\"space-between\" flex=\"3\">\n          <Button\n            as={Link}\n            p=\"0px\"\n            height=\"16px\"\n            external\n            variant=\"text\"\n            href={`${nftsBaseUrl}/collections/${nftToSell.collectionAddress}/${itemPageUrlId}`}\n          >\n            {t('View Item')}\n          </Button>\n          <HorizontalDivider />\n          <LinkExternal\n            p=\"0px\"\n            height=\"16px\"\n            href={getBscScanLinkForNft(nftToSell.collectionAddress, nftToSell.tokenId)}\n          >\n            BscScan\n          </LinkExternal>\n        </Flex>\n      </Flex>\n      <Divider />\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\n        <Button mb=\"8px\" onClick={continueToAdjustPriceStage}>\n          {t('Adjust Sale Price')}\n        </Button>\n        <Button variant=\"danger\" onClick={continueToRemoveFromMarketStage}>\n          {t('Remove from Market')}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default EditStage\n","import React from 'react'\nimport { Flex, Box, Text, Button } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Divider } from '../shared/styles'\n\ninterface RemoveStageProps {\n  continueToNextStage: () => void\n}\n\nconst RemoveStage: React.FC<RemoveStageProps> = ({ continueToNextStage }) => {\n  const { t } = useTranslation()\n  return (\n    <>\n      <Box p=\"16px\" maxWidth=\"360px\">\n        <Text fontSize=\"24px\" bold>\n          {t('Remove from Market')}\n        </Text>\n        <Text mt=\"24px\" color=\"textSubtle\">\n          {t('Removing this NFT from the marketplace will return it to your wallet.')}\n        </Text>\n        <Text mt=\"16px\" color=\"textSubtle\">\n          {t('Continue?')}\n        </Text>\n      </Box>\n      <Divider />\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\n        <Button mb=\"8px\" onClick={continueToNextStage}>\n          {t('Confirm')}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default RemoveStage\n","import React from 'react'\nimport { Flex, Grid, Text, Button, Input, BinanceIcon, ErrorIcon } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { NftToken } from 'state/nftMarket/types'\nimport { Divider, RoundedImage } from '../shared/styles'\nimport { GreyedOutContainer } from './styles'\n\ninterface TransferStageProps {\n  nftToSell: NftToken\n  lowestPrice: number\n  transferAddress: string\n  setTransferAddress: React.Dispatch<React.SetStateAction<string>>\n  isInvalidTransferAddress: boolean\n  continueToNextStage: () => void\n}\n\nconst TransferStage: React.FC<TransferStageProps> = ({\n  nftToSell,\n  lowestPrice,\n  transferAddress,\n  setTransferAddress,\n  isInvalidTransferAddress,\n  continueToNextStage,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const transferAddressEqualsConnectedAddress = transferAddress.toLowerCase() === account.toLowerCase()\n  const getErrorText = () => {\n    if (isInvalidTransferAddress) {\n      return t('That’s not a Binance Smart Chain wallet address.')\n    }\n    if (transferAddressEqualsConnectedAddress) {\n      return t('This address is the one that is currently connected')\n    }\n    return null\n  }\n  return (\n    <>\n      <Text fontSize=\"24px\" bold px=\"16px\" pt=\"16px\">\n        {t('Transfer to New Wallet')}\n      </Text>\n      <Flex p=\"16px\">\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\n          <Text bold>{nftToSell.name}</Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n            {nftToSell.collectionName}\n          </Text>\n          {lowestPrice && (\n            <>\n              <Text small color=\"textSubtle\">\n                {t('Lowest price')}\n              </Text>\n              <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n                <BinanceIcon width={16} height={16} mr=\"4px\" />\n                <Text small>{lowestPrice}</Text>\n              </Flex>\n            </>\n          )}\n        </Grid>\n      </Flex>\n      <GreyedOutContainer>\n        <Text fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" bold>\n          {t('Receiving address')}\n        </Text>\n        <Input\n          scale=\"sm\"\n          isWarning={isInvalidTransferAddress || transferAddressEqualsConnectedAddress}\n          placeholder={t('Paste BSC address')}\n          value={transferAddress}\n          onChange={(e) => setTransferAddress(e.target.value)}\n        />\n        {isInvalidTransferAddress ||\n          (transferAddressEqualsConnectedAddress && (\n            <Text fontSize=\"12px\" color=\"failure\" mt=\"4px\">\n              {getErrorText()}\n            </Text>\n          ))}\n      </GreyedOutContainer>\n      <Grid gridTemplateColumns=\"32px 1fr\" p=\"16px\" maxWidth=\"360px\">\n        <Flex alignSelf=\"flex-start\">\n          <ErrorIcon width={24} height={24} color=\"textSubtle\" />\n        </Flex>\n        <Text small color=\"textSubtle\">\n          {t('This action will send your NFT to the address you have indicated above. Make sure it’s the correct')}\n        </Text>\n      </Grid>\n      <Divider />\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\n        <Button\n          mb=\"8px\"\n          onClick={continueToNextStage}\n          disabled={isInvalidTransferAddress || transferAddress.length === 0 || transferAddressEqualsConnectedAddress}\n        >\n          {t('Confirm')}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default TransferStage\n","import React, { useState } from 'react'\nimport { InjectedModalProps } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { parseUnits } from 'ethers/lib/utils'\nimport useTheme from 'hooks/useTheme'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport useToast from 'hooks/useToast'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { useTranslation } from 'contexts/Localization'\nimport { ContextApi } from 'contexts/Localization/types'\nimport { isAddress } from 'utils'\nimport { useErc721CollectionContract, useNftMarketContract } from 'hooks/useContract'\nimport { useAppDispatch } from 'state'\nimport { removeUserNft, updateUserNft } from 'state/nftMarket/reducer'\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\nimport { useGetLowestPriceFromNft } from 'views/Nft/market/hooks/useGetLowestPrice'\nimport SellStage from './SellStage'\nimport SetPriceStage from './SetPriceStage'\nimport EditStage from './EditStage'\nimport ApproveAndConfirmStage from '../shared/ApproveAndConfirmStage'\nimport TransactionConfirmed from '../shared/TransactionConfirmed'\nimport { StyledModal, stagesWithBackButton } from './styles'\nimport { SellingStage } from './types'\nimport ConfirmStage from '../shared/ConfirmStage'\nimport RemoveStage from './RemoveStage'\nimport TransferStage from './TransferStage'\n\nexport const modalTitles = (stage: SellingStage, t: ContextApi['t']) => {\n  switch (stage) {\n    // Sell flow\n    case SellingStage.SELL:\n      return t('Details')\n    case SellingStage.SET_PRICE:\n    case SellingStage.APPROVE_AND_CONFIRM_SELL:\n      return t('Back')\n    // Adjust price flow\n    case SellingStage.EDIT:\n      return t('Details')\n    case SellingStage.ADJUST_PRICE:\n      return t('Back')\n    case SellingStage.CONFIRM_ADJUST_PRICE:\n      return t('Confirm transaction')\n    // Remove from market flow\n    case SellingStage.REMOVE_FROM_MARKET:\n      return t('Back')\n    case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\n      return t('Confirm transaction')\n    // Transfer flow\n    case SellingStage.TRANSFER:\n      return t('Back')\n    case SellingStage.CONFIRM_TRANSFER:\n      return t('Confirm transaction')\n    // Common\n    case SellingStage.TX_CONFIRMED:\n      return t('Transaction Confirmed')\n    default:\n      return ''\n  }\n}\n\nconst getToastText = (variant: string, stage: SellingStage, t: ContextApi['t']) => {\n  if (stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET) {\n    return t('Your NFT has been returned to your wallet')\n  }\n  if (stage === SellingStage.CONFIRM_TRANSFER) {\n    return t('Your NFT has been transferred to another wallet')\n  }\n  if (variant === 'sell') {\n    return t('Your NFT has been listed for sale!')\n  }\n  return t('Your NFT listing has been changed.')\n}\n\ninterface SellModalProps extends InjectedModalProps {\n  variant: 'sell' | 'edit'\n  nftToSell: NftToken\n}\n\nconst SellModal: React.FC<SellModalProps> = ({ variant, nftToSell, onDismiss }) => {\n  const [stage, setStage] = useState(variant === 'sell' ? SellingStage.SELL : SellingStage.EDIT)\n  const [price, setPrice] = useState(variant === 'sell' ? '' : nftToSell.marketData.currentAskPrice)\n  const [transferAddress, setTransferAddress] = useState('')\n  const [confirmedTxHash, setConfirmedTxHash] = useState('')\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { account } = useWeb3React()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const { toastSuccess } = useToast()\n  const collectionContract = useErc721CollectionContract(nftToSell.collectionAddress)\n  const nftMarketContract = useNftMarketContract()\n  const dispatch = useAppDispatch()\n\n  const isInvalidTransferAddress = transferAddress.length > 0 && !isAddress(transferAddress)\n\n  const { lowestPrice } = useGetLowestPriceFromNft(nftToSell)\n\n  const goBack = () => {\n    switch (stage) {\n      case SellingStage.SET_PRICE:\n        setStage(SellingStage.SELL)\n        break\n      case SellingStage.APPROVE_AND_CONFIRM_SELL:\n        setStage(SellingStage.SET_PRICE)\n        break\n      case SellingStage.ADJUST_PRICE:\n        setPrice(nftToSell.marketData.currentAskPrice)\n        setStage(SellingStage.EDIT)\n        break\n      case SellingStage.CONFIRM_ADJUST_PRICE:\n        setStage(SellingStage.ADJUST_PRICE)\n        break\n      case SellingStage.REMOVE_FROM_MARKET:\n        setStage(SellingStage.EDIT)\n        break\n      case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\n        setStage(SellingStage.REMOVE_FROM_MARKET)\n        break\n      case SellingStage.TRANSFER:\n        setStage(SellingStage.SELL)\n        break\n      case SellingStage.CONFIRM_TRANSFER:\n        setStage(SellingStage.TRANSFER)\n        break\n      default:\n        break\n    }\n  }\n\n  const continueToNextStage = () => {\n    switch (stage) {\n      case SellingStage.SELL:\n        setStage(SellingStage.SET_PRICE)\n        break\n      case SellingStage.SET_PRICE:\n        setStage(SellingStage.APPROVE_AND_CONFIRM_SELL)\n        break\n      case SellingStage.EDIT:\n        setStage(SellingStage.ADJUST_PRICE)\n        break\n      case SellingStage.ADJUST_PRICE:\n        setStage(SellingStage.CONFIRM_ADJUST_PRICE)\n        break\n      case SellingStage.REMOVE_FROM_MARKET:\n        setStage(SellingStage.CONFIRM_REMOVE_FROM_MARKET)\n        break\n      case SellingStage.TRANSFER:\n        setStage(SellingStage.CONFIRM_TRANSFER)\n        break\n      default:\n        break\n    }\n  }\n\n  const continueToRemoveFromMarketStage = () => {\n    setStage(SellingStage.REMOVE_FROM_MARKET)\n  }\n\n  const continueToTransferStage = () => {\n    setStage(SellingStage.TRANSFER)\n  }\n\n  const dispatchSuccessAction = () => {\n    switch (stage) {\n      // Remove from sale\n      case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\n        dispatch(\n          updateUserNft({\n            tokenId: nftToSell.tokenId,\n            collectionAddress: nftToSell.collectionAddress,\n            location: NftLocation.WALLET,\n          }),\n        )\n        break\n      // Transfer NFT\n      case SellingStage.CONFIRM_TRANSFER:\n        dispatch(\n          removeUserNft({\n            tokenId: nftToSell.tokenId,\n          }),\n        )\n        break\n      default:\n        // Modify listing OR list for sale\n        dispatch(\n          updateUserNft({\n            tokenId: nftToSell.tokenId,\n            collectionAddress: nftToSell.collectionAddress,\n            location: NftLocation.FORSALE,\n          }),\n        )\n        break\n    }\n  }\n\n  const { isApproving, isApproved, isConfirming, handleApprove, handleConfirm } = useApproveConfirmTransaction({\n    onRequiresApproval: async () => {\n      try {\n        const approvedForContract = await collectionContract.isApprovedForAll(account, nftMarketContract.address)\n        return approvedForContract\n      } catch (error) {\n        return false\n      }\n    },\n    onApprove: () => {\n      return callWithGasPrice(collectionContract, 'setApprovalForAll', [nftMarketContract.address, true])\n    },\n    onApproveSuccess: async ({ receipt }) => {\n      toastSuccess(\n        t('Contract approved - you can now put your NFT for sale!'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\n      )\n    },\n    onConfirm: () => {\n      if (stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET) {\n        return callWithGasPrice(nftMarketContract, 'cancelAskOrder', [nftToSell.collectionAddress, nftToSell.tokenId])\n      }\n      if (stage === SellingStage.CONFIRM_TRANSFER) {\n        return callWithGasPrice(collectionContract, 'safeTransferFrom(address,address,uint256)', [\n          account,\n          transferAddress,\n          nftToSell.tokenId,\n        ])\n      }\n      const methodName = variant === 'sell' ? 'createAskOrder' : 'modifyAskOrder'\n      const askPrice = parseUnits(price)\n      return callWithGasPrice(nftMarketContract, methodName, [nftToSell.collectionAddress, nftToSell.tokenId, askPrice])\n    },\n    onSuccess: async ({ receipt }) => {\n      toastSuccess(getToastText(variant, stage, t), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n      dispatchSuccessAction()\n      setConfirmedTxHash(receipt.transactionHash)\n      setStage(SellingStage.TX_CONFIRMED)\n    },\n  })\n\n  const showBackButton = stagesWithBackButton.includes(stage) && !isConfirming && !isApproving\n\n  return (\n    <StyledModal\n      title={modalTitles(stage, t)}\n      stage={stage}\n      onDismiss={onDismiss}\n      onBack={showBackButton ? goBack : null}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      {stage === SellingStage.SELL && (\n        <SellStage\n          nftToSell={nftToSell}\n          lowestPrice={lowestPrice}\n          continueToNextStage={continueToNextStage}\n          continueToTransferStage={continueToTransferStage}\n        />\n      )}\n      {stage === SellingStage.SET_PRICE && (\n        <SetPriceStage\n          nftToSell={nftToSell}\n          variant=\"set\"\n          continueToNextStage={continueToNextStage}\n          lowestPrice={lowestPrice}\n          price={price}\n          setPrice={setPrice}\n        />\n      )}\n      {stage === SellingStage.APPROVE_AND_CONFIRM_SELL && (\n        <ApproveAndConfirmStage\n          variant=\"sell\"\n          isApproved={isApproved}\n          isApproving={isApproving}\n          isConfirming={isConfirming}\n          handleApprove={handleApprove}\n          handleConfirm={handleConfirm}\n        />\n      )}\n      {stage === SellingStage.TX_CONFIRMED && <TransactionConfirmed txHash={confirmedTxHash} onDismiss={onDismiss} />}\n      {stage === SellingStage.EDIT && (\n        <EditStage\n          nftToSell={nftToSell}\n          lowestPrice={lowestPrice}\n          continueToAdjustPriceStage={continueToNextStage}\n          continueToRemoveFromMarketStage={continueToRemoveFromMarketStage}\n        />\n      )}\n      {stage === SellingStage.ADJUST_PRICE && (\n        <SetPriceStage\n          nftToSell={nftToSell}\n          variant=\"adjust\"\n          continueToNextStage={continueToNextStage}\n          currentPrice={nftToSell.marketData.currentAskPrice}\n          lowestPrice={lowestPrice}\n          price={price}\n          setPrice={setPrice}\n        />\n      )}\n      {stage === SellingStage.CONFIRM_ADJUST_PRICE && (\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\n      )}\n      {stage === SellingStage.REMOVE_FROM_MARKET && <RemoveStage continueToNextStage={continueToNextStage} />}\n      {stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET && (\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\n      )}\n      {stage === SellingStage.TRANSFER && (\n        <TransferStage\n          nftToSell={nftToSell}\n          lowestPrice={lowestPrice}\n          continueToNextStage={continueToNextStage}\n          transferAddress={transferAddress}\n          setTransferAddress={setTransferAddress}\n          isInvalidTransferAddress={isInvalidTransferAddress}\n        />\n      )}\n      {stage === SellingStage.CONFIRM_TRANSFER && (\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\n      )}\n    </StyledModal>\n  )\n}\n\nexport default SellModal\n","import { useEffect, useMemo } from 'react'\nimport isEmpty from 'lodash/isEmpty'\nimport { useAppDispatch } from 'state'\nimport { fetchUserNfts } from 'state/nftMarket/reducer'\nimport { useGetCollections, useUserNfts } from 'state/nftMarket/hooks'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport { useProfile } from 'state/profile/hooks'\nimport { NftLocation, UserNftInitializationState } from 'state/nftMarket/types'\nimport { useWeb3React } from '@web3-react/core'\n\nconst useFetchUserNfts = () => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const { profile, isInitialized: isProfileInitialized, isLoading: isProfileLoading } = useProfile()\n  const { userNftsInitializationState } = useUserNfts()\n  const collections = useGetCollections()\n\n  const hasProfileNft = profile?.tokenId\n  const profileNftTokenId = profile?.tokenId?.toString()\n  const profileNftCollectionAddress = profile?.collectionAddress\n\n  const profileNftWithCollectionAddress = useMemo(() => {\n    if (hasProfileNft) {\n      return {\n        tokenId: profileNftTokenId,\n        collectionAddress: profileNftCollectionAddress,\n        nftLocation: NftLocation.PROFILE,\n      }\n    }\n    return null\n  }, [profileNftTokenId, profileNftCollectionAddress, hasProfileNft])\n\n  const previousProfileNftTokenId = usePreviousValue(profileNftTokenId)\n\n  // Fetch on first load when profile fetch is resolved\n  const shouldFetch =\n    account &&\n    userNftsInitializationState === UserNftInitializationState.UNINITIALIZED &&\n    isProfileInitialized &&\n    !isProfileLoading\n\n  // Fetch on account / profile change, once profile fetch is resolved\n  const hasAccountSwitched = previousProfileNftTokenId !== profileNftTokenId && !isProfileLoading && account\n\n  useEffect(() => {\n    if ((shouldFetch || hasAccountSwitched) && !isEmpty(collections)) {\n      dispatch(fetchUserNfts({ account, collections, profileNftWithCollectionAddress }))\n    }\n  }, [\n    dispatch,\n    account,\n    shouldFetch,\n    hasAccountSwitched,\n    profileNftTokenId,\n    collections,\n    profileNftWithCollectionAddress,\n  ])\n}\n\nexport default useFetchUserNfts\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, Radio } from '@pancakeswap/uikit'\n\ninterface SelectionCardProps {\n  name: string\n  value: string | number\n  isChecked?: boolean\n  onChange: (val: any) => void\n  image: string\n  disabled?: boolean\n}\n\nconst Label = styled.label<{ isDisabled: boolean }>`\n  cursor: ${({ isDisabled }) => (isDisabled ? 'not-allowed' : 'pointer')};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  opacity: ${({ isDisabled }) => (isDisabled ? '0.6' : '1')};\n`\n\nconst Body = styled.div`\n  align-items: center;\n  display: flex;\n  flex-grow: 1;\n  height: 80px;\n  padding: 8px 16px;\n`\n\nconst Children = styled.div`\n  margin-left: 16px;\n`\n\nconst StyledBackgroundImage = styled.div<{ src: string }>`\n  align-self: stretch;\n  background-image: url('${({ src }) => src}');\n  background-size: contain;\n  background-position: center;\n  background-repeat: no-repeat;\n  flex: none;\n  width: 80px;\n`\n\nconst SelectionCard: React.FC<SelectionCardProps> = ({\n  name,\n  value,\n  isChecked = false,\n  image,\n  onChange,\n  disabled,\n  children,\n  ...props\n}) => {\n  return (\n    <Card isSuccess={isChecked} isDisabled={disabled} mb=\"16px\" {...props}>\n      <Label isDisabled={disabled}>\n        <Body>\n          <Radio\n            name={name}\n            checked={isChecked}\n            value={value}\n            onChange={(e) => onChange(e.target.value)}\n            disabled={disabled}\n            style={{ flex: 'none' }}\n          />\n          <Children>{children}</Children>\n        </Body>\n        <StyledBackgroundImage src={image} />\n      </Label>\n    </Card>\n  )\n}\n\nexport default SelectionCard\n","import styled from 'styled-components'\n\nexport const PageButtons = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 16px;\n  margin-bottom: 16px;\n`\n\nexport const Arrow = styled.div`\n  color: ${({ theme }) => theme.colors.primary};\n  padding: 0 20px;\n  :hover {\n    cursor: pointer;\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex, BunnyPlaceholderIcon, Skeleton, Text } from '@pancakeswap/uikit'\nimport truncateHash from 'utils/truncateHash'\nimport { FetchStatus } from 'config/constants/types'\nimport { useGetProfileAvatar } from 'state/profile/hooks'\nimport { Link } from 'react-router-dom'\nimport { nftsBaseUrl } from '../constants'\n\nconst Avatar = styled.img`\n  margin-right: 4px;\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    margin-right: 12px;\n  }\n`\n\nconst StyledFlex = styled(Flex)`\n  align-items: center;\n  transition: opacity 200ms ease-in;\n\n  &:hover {\n    opacity: 0.5;\n  }\n`\n\nconst ProfileCell: React.FC<{ accountAddress: string }> = ({ accountAddress }) => {\n  const { username, nft: profileNft, usernameFetchStatus, avatarFetchStatus } = useGetProfileAvatar(accountAddress)\n  const profileName = username || '-'\n\n  let sellerProfilePicComponent = <Skeleton width=\"32px\" height=\"32px\" mr={['4px', null, '12px']} />\n  if (avatarFetchStatus === FetchStatus.Fetched) {\n    if (profileNft?.image?.thumbnail) {\n      sellerProfilePicComponent = <Avatar src={profileNft?.image?.thumbnail} />\n    } else {\n      sellerProfilePicComponent = <BunnyPlaceholderIcon width=\"32px\" height=\"32px\" mr={['4px', null, '12px']} />\n    }\n  }\n\n  return (\n    <Link to={`${nftsBaseUrl}/profile/${accountAddress}`}>\n      <StyledFlex>\n        {sellerProfilePicComponent}\n        <Box display=\"inline\">\n          <Text lineHeight=\"1.25\">{truncateHash(accountAddress)}</Text>\n          {usernameFetchStatus !== FetchStatus.Fetched ? <Skeleton /> : <Text lineHeight=\"1.25\">{profileName}</Text>}\n        </Box>\n      </StyledFlex>\n    </Link>\n  )\n}\n\nexport default ProfileCell\n","import { useReducer } from 'react'\n\nexport enum Views {\n  START = 'start',\n  CHANGE = 'change',\n  REMOVE = 'remove',\n  APPROVE = 'approve',\n}\n\nexport type Actions =\n  | {\n      type: 'set_view'\n      view: Views\n    }\n  | {\n      type: 'go_previous'\n    }\n\nexport interface State {\n  currentView: Views\n  previousView: Views | null\n}\n\nconst reducer = (state: State, action: Actions): State => {\n  switch (action.type) {\n    case 'set_view':\n      return {\n        ...state,\n        currentView: action.view,\n        previousView: state.currentView,\n      }\n    case 'go_previous':\n      return {\n        ...state,\n        currentView: state.previousView,\n        previousView: state.currentView,\n      }\n    default:\n      return state\n  }\n}\n\nexport interface UseEditProfileResponse extends State {\n  goToStart: () => void\n  goToChange: () => void\n  goToApprove: () => void\n  goToRemove: () => void\n  goPrevious: () => void\n}\n\nconst useEditProfile = (): UseEditProfileResponse => {\n  const [state, dispatch] = useReducer(reducer, {\n    currentView: Views.START,\n    previousView: null,\n  })\n\n  const goToStart = () => dispatch({ type: 'set_view', view: Views.START })\n  const goToChange = () => dispatch({ type: 'set_view', view: Views.CHANGE })\n  const goToRemove = () => dispatch({ type: 'set_view', view: Views.REMOVE })\n  const goToApprove = () => dispatch({ type: 'set_view', view: Views.APPROVE })\n  const goPrevious = () => dispatch({ type: 'go_previous' })\n\n  return { ...state, goToStart, goToChange, goToRemove, goToApprove, goPrevious }\n}\n\nexport default useEditProfile\n","import { useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport { useTranslation } from 'contexts/Localization'\nimport { multicallv2 } from 'utils/multicall'\nimport profileABI from 'config/abi/gladiatorProfile.json'\nimport { getGladiatorProfileAddress } from 'utils/addressHelpers'\nimport useToast from 'hooks/useToast'\n\nconst useGetProfileCosts = () => {\n  const { t } = useTranslation()\n  const [isLoading, setIsLoading] = useState(true)\n  const [costs, setCosts] = useState({\n    numberNrtToReactivate: ethers.BigNumber.from(0),\n    numberNrtToRegister: ethers.BigNumber.from(0),\n    numberNrtToUpdate: ethers.BigNumber.from(0),\n  })\n  const { toastError } = useToast()\n\n  useEffect(() => {\n    const fetchCosts = async () => {\n      try {\n        const calls = ['numberNrtToReactivate', 'numberNrtToRegister', 'numberNrtToUpdate'].map((method) => ({\n          address: getGladiatorProfileAddress(),\n          name: method,\n        }))\n        const [[numberNrtToReactivate], [numberNrtToRegister], [numberNrtToUpdate]] = await multicallv2<\n          [[ethers.BigNumber], [ethers.BigNumber], [ethers.BigNumber]]\n        >(profileABI, calls)\n\n        setCosts({\n          numberNrtToReactivate,\n          numberNrtToRegister,\n          numberNrtToUpdate,\n        })\n        setIsLoading(false)\n      } catch (error) {\n        toastError(t('Error'), t('Could not retrieve NRT costs for profile'))\n      }\n    }\n\n    fetchCosts()\n  }, [setCosts, toastError, t])\n\n  return { costs, isLoading }\n}\n\nexport default useGetProfileCosts\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, Flex, Text, InjectedModalProps } from '@pancakeswap/uikit'\nimport { formatBigNumber } from 'utils/formatBalance'\nimport { getGladiatorProfileAddress } from 'utils/addressHelpers'\nimport { useNrt } from 'hooks/useContract'\nimport { useGetNrtBalance } from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport useGetProfileCosts from 'views/Nft/market/Profile/hooks/useGetProfileCosts'\nimport { FetchStatus } from 'config/constants/types'\nimport { useProfile } from 'state/profile/hooks'\nimport ProfileAvatarWithTeam from 'components/ProfileAvatarWithTeam'\nimport { UseEditProfileResponse } from './reducer'\n\ninterface StartPageProps extends InjectedModalProps {\n  goToChange: UseEditProfileResponse['goToChange']\n  goToRemove: UseEditProfileResponse['goToRemove']\n  goToApprove: UseEditProfileResponse['goToApprove']\n}\n\nconst DangerOutline = styled(Button).attrs({ variant: 'secondary' })`\n  border-color: ${({ theme }) => theme.colors.failure};\n  color: ${({ theme }) => theme.colors.failure};\n  margin-bottom: 24px;\n\n  &:hover:not(:disabled):not(.button--disabled):not(:active) {\n    border-color: ${({ theme }) => theme.colors.failure};\n    opacity: 0.8;\n  }\n`\n\nconst AvatarWrapper = styled.div`\n  height: 64px;\n  width: 64px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 128px;\n    width: 128px;\n  }\n`\n\nconst StartPage: React.FC<StartPageProps> = ({ goToApprove, goToChange, goToRemove, onDismiss }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const nrtContract = useNrt()\n  const { profile } = useProfile()\n  const { balance: nrtBalance, fetchStatus } = useGetNrtBalance()\n  const {\n    costs: { numberNrtToUpdate, numberNrtToReactivate },\n    isLoading: isProfileCostsLoading,\n  } = useGetProfileCosts()\n  const [needsApproval, setNeedsApproval] = useState(null)\n  const minimumNrtRequired = profile.isActive ? numberNrtToUpdate : numberNrtToReactivate\n  const hasMinimumCakeRequired = fetchStatus === FetchStatus.Fetched && nrtBalance.gte(minimumNrtRequired)\n\n  /**\n   * Check if the wallet has the required NRT allowance to change their profile pic or reactivate\n   * If they don't, we send them to the approval screen first\n   */\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      const response = await nrtContract.allowance(account, getGladiatorProfileAddress())\n      setNeedsApproval(response.lt(minimumNrtRequired))\n    }\n\n    if (account && !isProfileCostsLoading) {\n      checkApprovalStatus()\n    }\n  }, [account, minimumNrtRequired, setNeedsApproval, nrtContract, isProfileCostsLoading])\n\n  if (!profile) {\n    return null\n  }\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\n      <AvatarWrapper>\n        <ProfileAvatarWithTeam profile={profile} />\n      </AvatarWrapper>\n      <Flex alignItems=\"center\" style={{ height: '48px' }} justifyContent=\"center\">\n        <Text as=\"p\" color=\"failure\">\n          {!isProfileCostsLoading &&\n            !hasMinimumCakeRequired &&\n            t('%minimum% NRT required to change profile pic', { minimum: formatBigNumber(minimumNrtRequired) })}\n        </Text>\n      </Flex>\n      {profile.isActive ? (\n        <>\n          <Button\n            width=\"100%\"\n            mb=\"8px\"\n            onClick={needsApproval === true ? goToApprove : goToChange}\n            disabled={isProfileCostsLoading || !hasMinimumCakeRequired || needsApproval === null}\n          >\n            {t('Change Profile Pic')}\n          </Button>\n          <DangerOutline width=\"100%\" onClick={goToRemove}>\n            {t('Remove Profile Pic')}\n          </DangerOutline>\n        </>\n      ) : (\n        <Button\n          width=\"100%\"\n          mb=\"8px\"\n          onClick={needsApproval === true ? goToApprove : goToChange}\n          disabled={isProfileCostsLoading || !hasMinimumCakeRequired || needsApproval === null}\n        >\n          {t('Reactivate Profile')}\n        </Button>\n      )}\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss}>\n        {t('Close Window')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default StartPage\n","import React, { useState } from 'react'\nimport { AutoRenewIcon, Button, Checkbox, Flex, InjectedModalProps, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useGetProfileCosts from 'views/Nft/market/Profile/hooks/useGetProfileCosts'\nimport { useAppDispatch } from 'state'\nimport { useProfile } from 'state/profile/hooks'\nimport { fetchProfile } from 'state/profile'\nimport useToast from 'hooks/useToast'\nimport { formatBigNumber } from 'utils/formatBalance'\nimport { useProfileContract } from 'hooks/useContract'\nimport { useWeb3React } from '@web3-react/core'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { ToastDescriptionWithTx } from 'components/Toast'\n\ntype PauseProfilePageProps = InjectedModalProps\n\nconst PauseProfilePage: React.FC<PauseProfilePageProps> = ({ onDismiss }) => {\n  const [isAcknowledged, setIsAcknowledged] = useState(false)\n  const [isConfirming, setIsConfirming] = useState(false)\n  const { profile } = useProfile()\n  const {\n    costs: { numberNrtToReactivate },\n  } = useGetProfileCosts()\n  const { t } = useTranslation()\n  const pancakeProfileContract = useProfileContract()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const { account } = useWeb3React()\n  const { toastSuccess, toastError } = useToast()\n  const dispatch = useAppDispatch()\n\n  const handleChange = () => setIsAcknowledged(!isAcknowledged)\n\n  const handleDeactivateProfile = async () => {\n    const tx = await callWithGasPrice(pancakeProfileContract, 'pauseProfile')\n    toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\n    setIsConfirming(true)\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      // Re-fetch profile\n      await dispatch(fetchProfile(account))\n      toastSuccess(t('Profile Paused!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n      onDismiss()\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setIsConfirming(false)\n    }\n  }\n\n  if (!profile) {\n    return null\n  }\n\n  return (\n    <>\n      <Text as=\"p\" color=\"failure\" mb=\"24px\">\n        {t('This will suspend your profile and send your Collectible back to your wallet')}\n      </Text>\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n        {t(\n          \"While your profile is suspended, you won't be able to earn points, but your achievements and points will stay associated with your profile\",\n        )}\n      </Text>\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n        {t('Cost to reactivate in the future: %cost% NRT', { cost: formatBigNumber(numberNrtToReactivate) })}\n      </Text>\n      <label htmlFor=\"acknowledgement\" style={{ cursor: 'pointer', display: 'block', marginBottom: '24px' }}>\n        <Flex alignItems=\"center\">\n          <Checkbox id=\"acknowledgement\" checked={isAcknowledged} onChange={handleChange} scale=\"sm\" />\n          <Text ml=\"8px\">{t('I understand')}</Text>\n        </Flex>\n      </label>\n      <Button\n        width=\"100%\"\n        isLoading={isConfirming}\n        endIcon={isConfirming ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        disabled={!isAcknowledged || isConfirming}\n        onClick={handleDeactivateProfile}\n        mb=\"8px\"\n      >\n        {t('Confirm')}\n      </Button>\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss}>\n        {t('Close Window')}\n      </Button>\n    </>\n  )\n}\n\nexport default PauseProfilePage\n","import React, { useState } from 'react'\nimport { Button, Box, InjectedModalProps, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { useProfile } from 'state/profile/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { fetchProfile } from 'state/profile'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { getErc721Contract } from 'utils/contractHelpers'\nimport { useProfileContract } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { getGladiatorProfileAddress } from 'utils/addressHelpers'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport ApproveConfirmButtons from 'components/ApproveConfirmButtons'\nimport SelectionCard from 'views/ProfileCreation/SelectionCard'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport { NftLocation } from 'state/nftMarket/types'\n\ntype ChangeProfilePicPageProps = InjectedModalProps\n\nconst ChangeProfilePicPage: React.FC<ChangeProfilePicPageProps> = ({ onDismiss }) => {\n  const [selectedNft, setSelectedNft] = useState({\n    tokenId: null,\n    collectionAddress: null,\n  })\n  const { t } = useTranslation()\n  const { nfts } = useUserNfts()\n  const dispatch = useAppDispatch()\n  const { profile } = useProfile()\n  const profileContract = useProfileContract()\n  const { account, library } = useWeb3React()\n  const { toastSuccess } = useToast()\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  const nftsInWallet = nfts.filter((nft) => nft.location === NftLocation.WALLET)\n\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\n    useApproveConfirmTransaction({\n      onApprove: () => {\n        const contract = getErc721Contract(selectedNft.collectionAddress, library.getSigner())\n        return callWithGasPrice(contract, 'approve', [getGladiatorProfileAddress(), selectedNft.tokenId])\n      },\n      onConfirm: () => {\n        if (!profile.isActive) {\n          return callWithGasPrice(profileContract, 'reactivateProfile', [\n            selectedNft.collectionAddress,\n            selectedNft.tokenId,\n          ])\n        }\n\n        return callWithGasPrice(profileContract, 'updateProfile', [selectedNft.collectionAddress, selectedNft.tokenId])\n      },\n      onSuccess: async ({ receipt }) => {\n        // Re-fetch profile\n        await dispatch(fetchProfile(account))\n        toastSuccess(t('Profile Updated!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n\n        onDismiss()\n      },\n    })\n\n  return (\n    <>\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n        {t('Choose a new Collectible to use as your profile pic.')}\n      </Text>\n      <Box maxHeight=\"300px\" overflowY=\"scroll\">\n        {nftsInWallet.map((walletNft) => {\n          const handleChange = () => {\n            setSelectedNft({\n              tokenId: walletNft.tokenId,\n              collectionAddress: walletNft.collectionAddress,\n            })\n          }\n          return (\n            <SelectionCard\n              name=\"profilePicture\"\n              key={`${walletNft.collectionAddress}#${walletNft.tokenId}`}\n              value={walletNft.tokenId}\n              image={walletNft.image.thumbnail}\n              isChecked={walletNft.tokenId === selectedNft.tokenId}\n              onChange={handleChange}\n              disabled={isApproving || isConfirming || isConfirmed}\n            >\n              <Text bold>{walletNft.name}</Text>\n            </SelectionCard>\n          )\n        })}\n      </Box>\n      {nfts.length === 0 && (\n        <>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"16px\">\n            {t('Sorry! You don’t have any eligible Collectibles in your wallet to use!')}\n          </Text>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t('Make sure you have a Pancake Collectible in your wallet and try again!')}\n          </Text>\n        </>\n      )}\n      <ApproveConfirmButtons\n        isApproveDisabled={isConfirmed || isConfirming || isApproved || selectedNft.tokenId === null}\n        isApproving={isApproving}\n        isConfirmDisabled={!isApproved || isConfirmed || selectedNft.tokenId === null}\n        isConfirming={isConfirming}\n        onApprove={handleApprove}\n        onConfirm={handleConfirm}\n      />\n      <Button mt=\"8px\" variant=\"text\" width=\"100%\" onClick={onDismiss} disabled={isApproving || isConfirming}>\n        {t('Close Window')}\n      </Button>\n    </>\n  )\n}\n\nexport default ChangeProfilePicPage\n","import React, { useState } from 'react'\nimport { AutoRenewIcon, Button, Flex, InjectedModalProps, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useNrt } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport { useProfile } from 'state/profile/hooks'\nimport { getGladiatorProfileAddress } from 'utils/addressHelpers'\nimport { formatBigNumber } from 'utils/formatBalance'\nimport useGetProfileCosts from 'views/Nft/market/Profile/hooks/useGetProfileCosts'\nimport { UseEditProfileResponse } from './reducer'\n\ninterface ApproveNrtPageProps extends InjectedModalProps {\n  goToChange: UseEditProfileResponse['goToChange']\n}\n\nconst ApproveNrtPage: React.FC<ApproveNrtPageProps> = ({ goToChange, onDismiss }) => {\n  const [isApproving, setIsApproving] = useState(false)\n  const { profile } = useProfile()\n  const { t } = useTranslation()\n  const {\n    costs: { numberNrtToUpdate, numberNrtToReactivate },\n  } = useGetProfileCosts()\n  const nrtContract = useNrt()\n  const { toastError } = useToast()\n  const cost = profile.isActive ? numberNrtToUpdate : numberNrtToReactivate\n\n  const handleApprove = async () => {\n    const tx = await nrtContract.approve(getGladiatorProfileAddress(), cost.mul(2).toString())\n    setIsApproving(true)\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      goToChange()\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setIsApproving(false)\n    }\n  }\n\n  if (!profile) {\n    return null\n  }\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\n        <Text>{profile.isActive ? t('Cost to update:') : t('Cost to reactivate:')}</Text>\n        <Text>{formatBigNumber(cost)} CAKE</Text>\n      </Flex>\n      <Button\n        disabled={isApproving}\n        isLoading={isApproving}\n        endIcon={isApproving ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        width=\"100%\"\n        mb=\"8px\"\n        onClick={handleApprove}\n      >\n        {t('Enable')}\n      </Button>\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss} disabled={isApproving}>\n        {t('Close Window')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default ApproveNrtPage\n","import React from 'react'\nimport { InjectedModalProps, Modal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { ContextApi } from 'contexts/Localization/types'\nimport useEditProfile, { Views } from './reducer'\nimport StartView from './StartView'\nimport PauseProfileView from './PauseProfileView'\nimport ChangeProfilePicView from './ChangeProfilePicView'\nimport ApproveNrtView from './ApproveNrtView'\n\ntype EditProfileModalProps = InjectedModalProps\n\nconst viewTitle = (t: ContextApi['t'], currentView: Views) => {\n  switch (currentView) {\n    case Views.START:\n      return t('Edit Profile')\n    case Views.CHANGE:\n      return t('Change Profile Pic')\n    case Views.REMOVE:\n      return t('Remove Profile Pic')\n    case Views.APPROVE:\n      return t('Enable NRT')\n    default:\n      return ''\n  }\n}\n\nconst EditProfileModal: React.FC<EditProfileModalProps> = ({ onDismiss }) => {\n  const { currentView, goToChange, goToRemove, goToApprove, goPrevious } = useEditProfile()\n  const { t } = useTranslation()\n\n  const isStartView = currentView === Views.START\n  const handleBack = isStartView ? null : () => goPrevious()\n\n  return (\n    <Modal title={viewTitle(t, currentView)} onBack={handleBack} onDismiss={onDismiss} hideCloseButton={!isStartView}>\n      <div style={{ maxWidth: '400px' }}>\n        {currentView === Views.START && (\n          <StartView goToApprove={goToApprove} goToChange={goToChange} goToRemove={goToRemove} onDismiss={onDismiss} />\n        )}\n        {currentView === Views.REMOVE && <PauseProfileView onDismiss={onDismiss} />}\n        {currentView === Views.CHANGE && <ChangeProfilePicView onDismiss={onDismiss} />}\n        {currentView === Views.APPROVE && <ApproveNrtView goToChange={goToChange} onDismiss={onDismiss} />}\n      </div>\n    </Modal>\n  )\n}\n\nexport default EditProfileModal\n","import React from 'react'\nimport { NoProfileAvatarIcon } from '@pancakeswap/uikit'\nimport { Profile } from 'state/types'\nimport styled from 'styled-components'\n\nexport interface ProfileAvatarProps {\n  profile: Profile\n}\n\nconst TeamAvatar = styled.img`\n  border: 1px solid ${({ theme }) => theme.card.background};\n  border-radius: 50%;\n  bottom: 0px;\n  position: absolute;\n  right: 0px;\n  min-width: 20px;\n  min-height: 20px;\n  width: 37.5%;\n  height: 37.5%;\n  z-index: 5;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    border-width: 2px;\n  }\n`\n\nconst AvatarWrapper = styled.div<{ bg: string }>`\n  background: url('${({ bg }) => bg}');\n  background-repeat: no-repeat;\n  background-size: cover;\n  border-radius: 50%;\n  position: relative;\n  width: 100%;\n  height: 100%;\n\n  & > img {\n    border-radius: 50%;\n  }\n`\n// TODO: replace with no profile avatar icon\nconst AvatarInactive = styled(NoProfileAvatarIcon)`\n  width: 100%;\n  height: 100%;\n`\n\nconst ProfileAvatarWithTeam: React.FC<ProfileAvatarProps> = ({ profile }) => {\n  return (\n    <AvatarWrapper bg={profile?.nft?.image.thumbnail}>\n      {!profile?.isActive && <AvatarInactive />}\n      <TeamAvatar src={`/images/teams/${profile?.team?.images?.alt}`} alt={profile?.team?.name} />\n    </AvatarWrapper>\n  )\n}\n\nexport default ProfileAvatarWithTeam\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Skeleton, Td, useMatchBreakpoints } from '@pancakeswap/uikit'\n\nconst GridItem = styled(Flex)`\n  align-items: center;\n`\n\nconst LoadingRow: React.FC = () => {\n  const { isXs, isSm } = useMatchBreakpoints()\n\n  return (\n    <tr>\n      <Td>\n        <GridItem>\n          <Skeleton height={[162, null, 64]} width={[80, null, 200]} />\n        </GridItem>\n      </Td>\n      <Td>\n        <GridItem justifyContent=\"flex-end\">\n          <Skeleton height={[66, null, 24]} width={64} />\n        </GridItem>\n      </Td>\n      {isXs || isSm ? null : (\n        <>\n          <Td>\n            <GridItem justifyContent=\"flex-end\">\n              <Skeleton height={42} width={64} />\n            </GridItem>\n          </Td>\n          <Td>\n            <GridItem justifyContent=\"flex-end\">\n              <Skeleton height={48} width={124} />\n            </GridItem>\n          </Td>\n        </>\n      )}\n      <Td>\n        <GridItem justifyContent=\"center\">\n          <Skeleton height={[36, null, 24]} width={[80, null, 120]} />\n        </GridItem>\n      </Td>\n    </tr>\n  )\n}\n\nconst TableLoader: React.FC = () => (\n  <>\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n  </>\n)\n\nexport default TableLoader\n","import React from 'react'\nimport { Text, TextProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { MarketEvent } from '../../../../../state/nftMarket/types'\n\ninterface ActivityEventTextProps extends TextProps {\n  marketEvent: MarketEvent\n}\n\nconst ActivityEventText: React.FC<ActivityEventTextProps> = ({ marketEvent, ...props }) => {\n  const { t } = useTranslation()\n\n  const events = {\n    [MarketEvent.NEW]: {\n      text: t('Listed'),\n      color: 'textSubtle',\n    },\n    [MarketEvent.CANCEL]: {\n      text: t('Delisted'),\n      color: 'textSubtle',\n    },\n    [MarketEvent.MODIFY]: {\n      text: t('Modified'),\n      color: 'textSubtle',\n    },\n    [MarketEvent.BUY]: {\n      text: t('Bought'),\n      color: 'success',\n    },\n    [MarketEvent.SELL]: {\n      text: t('Sold'),\n      color: 'failure',\n    },\n  }\n\n  return (\n    <Text {...props} color={events[marketEvent].color}>\n      {events[marketEvent].text}\n    </Text>\n  )\n}\n\nexport default ActivityEventText\n","import React from 'react'\nimport { InjectedModalProps, Modal, Flex, Text, Button, Link, BinanceIcon, Box } from '@pancakeswap/uikit'\nimport { Price } from '@pancakeswap/sdk'\nimport useTheme from 'hooks/useTheme'\nimport { Activity, NftToken } from 'state/nftMarket/types'\nimport { LightGreyCard } from 'components/Card'\nimport { useTranslation } from 'contexts/Localization'\nimport truncateHash from 'utils/truncateHash'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { getBscScanLink } from 'utils'\nimport ActivityEventText from './ActivityEventText'\nimport NFTMedia from '../NFTMedia'\n\ninterface MobileModalProps extends InjectedModalProps {\n  activity: Activity\n  nft: NftToken\n  bnbBusdPrice: Price\n  localeTimestamp: string\n  isUserActivity?: boolean\n}\n\nconst MobileModal: React.FC<MobileModalProps> = ({\n  nft,\n  activity,\n  bnbBusdPrice,\n  localeTimestamp,\n  onDismiss,\n  isUserActivity = false,\n}) => {\n  const { chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const priceAsFloat = parseFloat(activity.price)\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, priceAsFloat)\n\n  return (\n    <Modal title={t('Transaction Details')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\n      <Flex flexDirection=\"column\" maxWidth=\"350px\">\n        <Flex alignItems=\"center\" mb=\"16px\" justifyContent=\"space-between\">\n          <Box width={68} mr=\"16px\">\n            <NFTMedia nft={nft} width={68} height={68} />\n          </Box>\n          <Flex flexDirection=\"column\">\n            <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n              {nft.collectionName}\n            </Text>\n            <Text bold textAlign=\"right\">\n              {nft.name}\n            </Text>\n          </Flex>\n        </Flex>\n        <LightGreyCard p=\"16px\">\n          <Flex mb=\"24px\" justifyContent=\"space-between\">\n            <ActivityEventText fontSize=\"14px\" marketEvent={activity.marketEvent} />\n            {priceAsFloat ? (\n              <Flex justifyContent=\"flex-end\" alignItems=\"center\">\n                <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\n                <Text mr=\"4px\" bold>\n                  {priceAsFloat}\n                </Text>\n                <Text color=\"textSubtle\">\n                  {`(~$${priceInUsd.toLocaleString(undefined, {\n                    minimumFractionDigits: 2,\n                    maximumFractionDigits: 2,\n                  })})`}\n                </Text>\n              </Flex>\n            ) : (\n              '-'\n            )}\n          </Flex>\n          {isUserActivity ? (\n            <Flex mb=\"24px\" justifyContent=\"space-between\">\n              <Text fontSize=\"14px\" color=\"textSubtle\">\n                {t('From/To')}\n              </Text>\n              <Text>{activity.otherParty ? truncateHash(activity.otherParty) : '-'}</Text>\n            </Flex>\n          ) : (\n            <>\n              <Flex mb=\"24px\" justifyContent=\"space-between\">\n                <Text fontSize=\"14px\" color=\"textSubtle\">\n                  {t('From')}\n                </Text>\n                <Text>{activity.seller ? truncateHash(activity.seller) : '-'}</Text>\n              </Flex>\n              <Flex mb=\"24px\" justifyContent=\"space-between\">\n                <Text fontSize=\"14px\" color=\"textSubtle\">\n                  {t('To')}\n                </Text>\n                <Text>{activity.buyer ? truncateHash(activity.buyer) : '-'}</Text>\n              </Flex>\n            </>\n          )}\n          <Flex justifyContent=\"space-between\">\n            <Text fontSize=\"14px\" color=\"textSubtle\">\n              {t('Date')}\n            </Text>\n            <Text>{localeTimestamp}</Text>\n          </Flex>\n        </LightGreyCard>\n        <Flex flexDirection=\"column\" pt=\"16px\" alignItems=\"center\">\n          <Button as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\n                {t('View on Pulse chain')}\n          </Button>\n        </Flex>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default MobileModal\n","import React from 'react'\nimport { Flex, BinanceIcon, Text, Skeleton } from '@pancakeswap/uikit'\nimport { multiplyPriceByAmount } from 'utils/prices'\n\nconst ActivityPrice = ({ bnbBusdPrice, price }) => {\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, price)\n\n  return (\n    <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n      {price ? (\n        <>\n          <Flex justifySelf=\"flex-start\" alignItems=\"center\">\n            <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\n            <Text maxWidth=\"80px\" bold>\n              {price.toLocaleString(undefined, {\n                minimumFractionDigits: 0,\n                maximumFractionDigits: 5,\n              })}\n            </Text>\n          </Flex>\n          {priceInUsd ? (\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`(~$${priceInUsd.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2,\n              })})`}\n            </Text>\n          ) : (\n            <Skeleton height=\"18px\" width=\"42px\" />\n          )}\n        </>\n      ) : (\n        '-'\n      )}\n    </Flex>\n  )\n}\n\nexport default ActivityPrice\n","import React from 'react'\nimport { Flex, Text, Td, IconButton, Link, OpenNewIcon, useMatchBreakpoints, useModal, Box } from '@pancakeswap/uikit'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { Activity, NftToken } from 'state/nftMarket/types'\nimport { Price } from '@pancakeswap/sdk'\nimport { getBscScanLink } from 'utils'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport ProfileCell from 'views/Nft/market/components/ProfileCell'\nimport MobileModal from './MobileModal'\nimport ActivityPrice from './ActivityPrice'\nimport ActivityEventText from './ActivityEventText'\nimport { nftsBaseUrl, gladiatorCollectiblesAddress } from '../../constants'\nimport NFTMedia from '../NFTMedia'\n\ninterface ActivityRowProps {\n  activity: Activity\n  nft: NftToken\n  bnbBusdPrice: Price\n  isUserActivity?: boolean\n  isNftActivity?: boolean\n}\n\nconst ActivityRow: React.FC<ActivityRowProps> = ({\n  activity,\n  bnbBusdPrice,\n  nft,\n  isUserActivity = false,\n  isNftActivity = false,\n}) => {\n  const { chainId } = useActiveWeb3React()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const priceAsFloat = parseFloat(activity.price)\n  const timestampAsMs = parseFloat(activity.timestamp) * 1000\n  const localeTimestamp = new Date(timestampAsMs).toLocaleString(undefined, {\n    year: 'numeric',\n    month: 'numeric',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n  })\n  const [onPresentMobileModal] = useModal(\n    <MobileModal\n      nft={nft}\n      activity={activity}\n      localeTimestamp={localeTimestamp}\n      bnbBusdPrice={bnbBusdPrice}\n      isUserActivity={isUserActivity}\n    />,\n  )\n  const isPBCollection = nft ? nft.collectionAddress.toLowerCase() === gladiatorCollectiblesAddress.toLowerCase() : false\n  const tokenId =\n    nft && isPBCollection\n      ? nft.attributes.find((attribute) => attribute.traitType === 'bunnyId')?.value\n      : nft\n      ? nft.tokenId\n      : null\n\n  return (\n    <tr {...((isXs || isSm) && { onClick: onPresentMobileModal })} data-test=\"nft-activity-row\">\n      {!isNftActivity ? (\n        <Td\n          {...((isXs || isSm) && {\n            onClick: (event) => {\n              event.stopPropagation()\n            },\n          })}\n        >\n          <Flex justifyContent=\"flex-start\" alignItems=\"center\" flexDirection={['column', null, 'row']}>\n            <Box width={64} height={64} mr={[0, null, '16px']} mb={['8px', null, 0]}>\n              <RouterLink to={nft ? `${nftsBaseUrl}/collections/${nft.collectionAddress}/${tokenId}` : ``}>\n                <NFTMedia nft={nft} width={64} height={64} />\n              </RouterLink>\n            </Box>\n            <Flex flexDirection=\"column\">\n              <Text\n                as={RouterLink}\n                to={nft ? `${nftsBaseUrl}/collections/${nft.collectionAddress}` : ``}\n                textAlign={['center', null, 'left']}\n                color=\"textSubtle\"\n                fontSize=\"14px\"\n              >\n                {nft?.collectionName}\n              </Text>\n              <Text\n                as={RouterLink}\n                to={nft ? `${nftsBaseUrl}/collections/${nft.collectionAddress}/${tokenId}` : ``}\n                textAlign={['center', null, 'left']}\n                bold\n              >\n                {nft?.name}\n              </Text>\n            </Flex>\n          </Flex>\n        </Td>\n      ) : null}\n      <Td>\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n          <ActivityEventText marketEvent={activity.marketEvent} />\n        </Flex>\n        {isXs || isSm ? <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} /> : null}\n      </Td>\n      {isXs || isSm ? null : (\n        <>\n          <Td>\n            <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} />\n          </Td>\n          {isUserActivity ? (\n            <Td>\n              <Flex justifyContent=\"center\" alignItems=\"center\">\n                {activity.otherParty ? <ProfileCell accountAddress={activity.otherParty} /> : '-'}\n              </Flex>\n            </Td>\n          ) : (\n            <>\n              <Td>\n                <Flex justifyContent=\"center\" alignItems=\"center\">\n                  {activity.seller ? <ProfileCell accountAddress={activity.seller} /> : '-'}\n                </Flex>\n              </Td>\n              <Td>\n                <Flex justifyContent=\"center\" alignItems=\"center\">\n                  {activity.buyer ? <ProfileCell accountAddress={activity.buyer} /> : '-'}\n                </Flex>\n              </Td>\n            </>\n          )}\n        </>\n      )}\n      <Td>\n        <Flex justifyContent=\"center\">\n          <Text textAlign=\"center\" fontSize={isXs || isSm ? '12px' : '16px'}>\n            {localeTimestamp}\n          </Text>\n        </Flex>\n      </Td>\n      {isXs || isSm ? null : (\n        <Td>\n          <IconButton as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\n            <OpenNewIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </Td>\n      )}\n    </tr>\n  )\n}\n\nexport default ActivityRow\n","import React from 'react'\nimport { InjectedModalProps, Modal, Flex, Text, Button, useModal, Link, Grid, LinkExternal } from '@pancakeswap/uikit'\nimport useTheme from 'hooks/useTheme'\nimport styled from 'styled-components'\nimport { NftToken } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanLinkForNft } from 'utils'\nimport { HorizontalDivider, RoundedImage } from './BuySellModals/shared/styles'\nimport EditProfileModal from '../Profile/components/EditProfileModal'\nimport { nftsBaseUrl, gladiatorCollectiblesAddress } from '../constants'\n\nexport const StyledModal = styled(Modal)`\n  & > div:last-child {\n    padding: 0;\n  }\n`\n\nconst TextWrapper = styled(Flex)`\n  background-color: ${({ theme }) => theme.colors.dropdown};\n`\n\ninterface ProfileNftModalProps extends InjectedModalProps {\n  nft: NftToken\n}\n\nconst ProfileNftModal: React.FC<ProfileNftModalProps> = ({ nft, onDismiss }) => {\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  const itemPageUrlId = nft.collectionAddress === gladiatorCollectiblesAddress ? nft.attributes[0].value : nft.tokenId\n\n  return (\n    <StyledModal title={t('Details')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\n      <Flex flexDirection=\"column\" maxWidth=\"350px\">\n        <Flex p=\"16px\">\n          <RoundedImage src={nft.image.thumbnail} height={68} width={68} mr=\"16px\" />\n          <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\n            <Text bold>{nft.name}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n              {nft.collectionName}\n            </Text>\n            {/* TODO: Add lowestPrice when available */}\n          </Grid>\n        </Flex>\n        <Flex justifyContent=\"space-between\" px=\"16px\" mb=\"16px\">\n          <Flex flex=\"2\">\n            <Text small color=\"textSubtle\">\n              {t('Token ID: %id%', { id: nft.tokenId })}\n            </Text>\n          </Flex>\n          <Flex justifyContent=\"space-between\" flex=\"3\">\n            <Button\n              as={Link}\n              p=\"0px\"\n              height=\"16px\"\n              external\n              variant=\"text\"\n              href={`${nftsBaseUrl}/collections/${nft.collectionAddress}/${itemPageUrlId}`}\n            >\n              {t('View Item')}\n            </Button>\n            <HorizontalDivider />\n            <LinkExternal p=\"0px\" height=\"16px\" href={getBscScanLinkForNft(nft.collectionAddress, nft.tokenId)}>\n              BscScan\n            </LinkExternal>\n          </Flex>\n        </Flex>\n        <TextWrapper p=\"24px 16px\" flexDirection=\"column\">\n          <Text mb=\"16px\">{t(\"You're using this NFT as your Pancake Profile picture\")}</Text>\n          <Text color=\"textSubtle\" mb=\"16px\" fontSize=\"14px\">\n            {t(\n              'Removing it will suspend your profile, and you won’t be able to earn points, participate in team activities, or be eligible for new NFT drops.',\n            )}\n          </Text>\n          <Text color=\"textSubtle\" fontSize=\"14px\">\n            {t('Go to your profile page to continue.')}\n          </Text>\n        </TextWrapper>\n        <Flex flexDirection=\"column\" py=\"16px\" px=\"16px\">\n          <Button onClick={onEditProfileModal} width=\"100%\" variant=\"secondary\">\n            {t('Remove Profile Pic')}\n          </Button>\n        </Flex>\n      </Flex>\n    </StyledModal>\n  )\n}\n\nexport default ProfileNftModal\n","import React from 'react'\nimport { Flex, Text, Button, Spinner } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { StepIndicator } from './styles'\n\ninterface ApproveAndConfirmStageProps {\n  variant: 'buy' | 'sell'\n  isApproved: boolean\n  isApproving: boolean\n  isConfirming: boolean\n  handleApprove: () => void\n  handleConfirm: () => void\n}\n\n// Buy Flow:\n// Shown if user wants to pay with WBNB and contract isn't approved yet\n// Sell Flow:\n// Shown the first time user puts NFT for sale\nconst ApproveAndConfirmStage: React.FC<ApproveAndConfirmStageProps> = ({\n  variant,\n  isApproved,\n  isApproving,\n  isConfirming,\n  handleApprove,\n  handleConfirm,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Flex p=\"16px\" flexDirection=\"column\">\n      <Flex mb=\"8px\" alignItems=\"center\">\n        <Flex flexDirection=\"column\">\n          <Flex alignItems=\"center\">\n            <StepIndicator success={isApproved}>\n              <Text fontSize=\"20px\" bold color=\"invertedContrast\">\n                1\n              </Text>\n            </StepIndicator>\n            <Text fontSize=\"20px\" color={isApproved ? 'success' : 'secondary'} bold>\n              {isApproved ? t('Enabled') : t('Enable')}\n            </Text>\n          </Flex>\n          {!isApproved && (\n            <Text mt=\"8px\" maxWidth=\"275px\" small color=\"textSubtle\">\n              {variant === 'buy'\n                ? t('Please enable WBNB spending in your wallet')\n                : t('Please enable your NFT to be sent to the market')}\n            </Text>\n          )}\n        </Flex>\n        <Flex flex=\"0 0 64px\" width=\"64px\">\n          {isApproving && <Spinner size={64} />}\n        </Flex>\n      </Flex>\n      {!isApproved && (\n        <Button variant=\"secondary\" disabled={isApproving} onClick={handleApprove}>\n          {isApproving ? `${t('Enabling')}...` : t('Enable')}\n        </Button>\n      )}\n      <Flex alignItems=\"center\" mt=\"8px\">\n        <Flex flexDirection=\"column\">\n          <Flex alignItems=\"center\" mt=\"16px\">\n            <StepIndicator success={!!0} disabled={!isApproved}>\n              <Text fontSize=\"20px\" bold color={!isApproved ? 'textDisabled' : 'invertedContrast'}>\n                2\n              </Text>\n            </StepIndicator>\n            <Text fontSize=\"20px\" bold color={isApproved ? 'secondary' : 'textDisabled'}>\n              {t('Confirm')}\n            </Text>\n          </Flex>\n          <Text small color={isApproved ? 'textSubtle' : 'textDisabled'}>\n            {t('Please confirm the transaction in your wallet')}\n          </Text>\n        </Flex>\n        <Flex flex=\"0 0 64px\" width=\"64px\">\n          {isConfirming && <Spinner size={64} />}\n        </Flex>\n      </Flex>\n      <Button mt=\"16px\" disabled={!isApproved || isConfirming} onClick={handleConfirm} variant=\"secondary\">\n        {isConfirming ? t('Confirming') : t('Confirm')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default ApproveAndConfirmStage\n","import React from 'react'\nimport { Flex, Text, Button, ArrowUpIcon, LinkExternal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanLink } from 'utils'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { Divider } from './styles'\n\ninterface TransactionConfirmedProps {\n  txHash: string\n  onDismiss: () => void\n}\n\nconst TransactionConfirmed: React.FC<TransactionConfirmedProps> = ({ txHash, onDismiss }) => {\n  const { chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n  return (\n    <>\n      <Flex p=\"16px\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"space-between\" height=\"150px\">\n        <ArrowUpIcon width=\"64px\" height=\"64px\" color=\"primary\" />\n        <Text bold>{t('Transaction Confirmed')}</Text>\n        <LinkExternal href={getBscScanLink(txHash, 'transaction', chainId)}>{t('View on Pulse chain')}</LinkExternal>\n      </Flex>\n      <Divider />\n      <Flex px=\"16px\" pb=\"16px\" justifyContent=\"center\">\n        <Button onClick={onDismiss} variant=\"secondary\" width=\"100%\">\n          {t('Close')}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default TransactionConfirmed\n","import React from 'react'\nimport { Flex, Text, Button, Spinner } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ConfirmStageProps {\n  isConfirming: boolean\n  handleConfirm: () => void\n}\n\n// Buy Flow:\n// Shown in case user wants to pay with BNB\n// or if user wants to pay with WBNB and it is already approved\n// Sell Flow:\n// Shown if user adjusts the price or removes NFT from the market\nconst ConfirmStage: React.FC<ConfirmStageProps> = ({ isConfirming, handleConfirm }) => {\n  const { t } = useTranslation()\n  return (\n    <Flex p=\"16px\" flexDirection=\"column\">\n      <Flex alignItems=\"center\">\n        <Flex flexDirection=\"column\">\n          <Flex alignItems=\"center\">\n            <Text fontSize=\"20px\" bold color=\"secondary\">\n              {t('Confirm')}\n            </Text>\n          </Flex>\n          <Text small color=\"textSubtle\">\n            {t('Please confirm the transaction in your wallet')}\n          </Text>\n        </Flex>\n        <Flex flex=\"0 0 64px\" height=\"72px\" width=\"64px\">\n          {isConfirming && <Spinner size={64} />}\n        </Flex>\n      </Flex>\n      <Button mt=\"24px\" disabled={isConfirming} onClick={handleConfirm} variant=\"secondary\">\n        {isConfirming ? `${t('Confirming')}...` : t('Confirm')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default ConfirmStage\n","import { useEffect, useReducer, useRef } from 'react'\nimport { noop } from 'lodash'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers } from 'ethers'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\n\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\n\ntype Action =\n  | { type: 'requires_approval' }\n  | { type: 'approve_sending' }\n  | { type: 'approve_receipt' }\n  | { type: 'approve_error' }\n  | { type: 'confirm_sending' }\n  | { type: 'confirm_receipt' }\n  | { type: 'confirm_error' }\n\ninterface State {\n  approvalState: LoadingState\n  confirmState: LoadingState\n}\n\nconst initialState: State = {\n  approvalState: 'idle',\n  confirmState: 'idle',\n}\n\nconst reducer = (state: State, actions: Action): State => {\n  switch (actions.type) {\n    case 'requires_approval':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_sending':\n      return {\n        ...state,\n        approvalState: 'loading',\n      }\n    case 'approve_receipt':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_error':\n      return {\n        ...state,\n        approvalState: 'fail',\n      }\n    case 'confirm_sending':\n      return {\n        ...state,\n        confirmState: 'loading',\n      }\n    case 'confirm_receipt':\n      return {\n        ...state,\n        confirmState: 'success',\n      }\n    case 'confirm_error':\n      return {\n        ...state,\n        confirmState: 'fail',\n      }\n    default:\n      return state\n  }\n}\n\ninterface OnSuccessProps {\n  state: State\n  receipt: ethers.providers.TransactionReceipt\n}\n\ninterface ApproveConfirmTransaction {\n  onApprove: () => Promise<ethers.providers.TransactionResponse>\n  onConfirm: () => Promise<ethers.providers.TransactionResponse>\n  onRequiresApproval?: () => Promise<boolean>\n  onSuccess: ({ state, receipt }: OnSuccessProps) => void\n  onApproveSuccess?: ({ state, receipt }: OnSuccessProps) => void\n}\n\nconst useApproveConfirmTransaction = ({\n  onApprove,\n  onConfirm,\n  onRequiresApproval,\n  onSuccess = noop,\n  onApproveSuccess = noop,\n}: ApproveConfirmTransaction) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const handlePreApprove = useRef(onRequiresApproval)\n  const { toastError } = useToast()\n\n  // Check if approval is necessary, re-check if account changes\n  useEffect(() => {\n    if (account && handlePreApprove.current) {\n      handlePreApprove.current().then((result) => {\n        if (result) {\n          dispatch({ type: 'requires_approval' })\n        }\n      })\n    }\n  }, [account, handlePreApprove, dispatch])\n\n  return {\n    isApproving: state.approvalState === 'loading',\n    isApproved: state.approvalState === 'success',\n    isConfirming: state.confirmState === 'loading',\n    isConfirmed: state.confirmState === 'success',\n    handleApprove: async () => {\n      try {\n        const tx = await onApprove()\n        dispatch({ type: 'approve_sending' })\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          dispatch({ type: 'approve_receipt' })\n          onApproveSuccess({ state, receipt })\n        }\n      } catch (error) {\n        // console.log(\"eeerrrrrrroooooorrrrrrr\", error)\n        dispatch({ type: 'approve_error' })\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    },\n    handleConfirm: async () => {\n      dispatch({ type: 'confirm_sending' })\n      // console.log(\"hiiiiiiiiiii\")\n      try {\n        const tx = await onConfirm()\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          dispatch({ type: 'confirm_receipt' })\n          onSuccess({ state, receipt })\n        }\n      } catch (error: any) {\n        console.log(\"erorrrrrrrrrrrrrrrrrrrrrrr\", error)\n        dispatch({ type: 'confirm_error' })\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    },\n  }\n}\n\nexport default useApproveConfirmTransaction"],"sourceRoot":""}