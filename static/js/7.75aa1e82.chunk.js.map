{"version":3,"sources":["components/TableLoader.tsx","views/Nft/market/components/Activity/ActivityEventText.tsx","views/Nft/market/components/Activity/MobileModal.tsx","views/Nft/market/components/Activity/ActivityPrice.tsx","views/Nft/market/components/Activity/ActivityRow.tsx","views/Nft/market/components/ProfileNftModal.tsx","views/Nft/market/components/BuySellModals/shared/ApproveAndConfirmStage.tsx","views/Nft/market/components/BuySellModals/shared/TransactionConfirmed.tsx","views/Nft/market/components/BuySellModals/shared/ConfirmStage.tsx","hooks/useApproveConfirmTransaction.ts","components/ApproveConfirmButtons.tsx","views/Nft/market/components/BuySellModals/shared/styles.tsx","views/Nft/market/components/Activity/NoNftsImage.tsx","views/Nft/market/components/BuySellModals/SellModal/types.ts","views/Nft/market/components/BuySellModals/SellModal/SellStage.tsx","views/Nft/market/components/BuySellModals/SellModal/styles.tsx","views/Nft/market/components/BuySellModals/SellModal/SetPriceStage.tsx","views/Nft/market/components/BuySellModals/SellModal/EditStage.tsx","views/Nft/market/components/BuySellModals/SellModal/RemoveStage.tsx","views/Nft/market/components/BuySellModals/SellModal/TransferStage.tsx","views/Nft/market/components/BuySellModals/SellModal/index.tsx","components/ProfileAvatarWithTeam.tsx","views/Nft/market/Profile/hooks/useFetchUserNfts.tsx","views/ProfileCreation/SelectionCard.tsx","views/Nft/market/components/PaginationButtons.tsx","views/Nft/market/components/ProfileCell.tsx","views/Nft/market/Profile/components/EditProfileModal/reducer.ts","views/Nft/market/Profile/hooks/useGetProfileCosts.ts","views/Nft/market/Profile/components/EditProfileModal/StartView.tsx","views/Nft/market/Profile/components/EditProfileModal/PauseProfileView.tsx","views/Nft/market/Profile/components/EditProfileModal/ChangeProfilePicView.tsx","views/Nft/market/Profile/components/EditProfileModal/ApproveNrtView.tsx","views/Nft/market/Profile/components/EditProfileModal/index.tsx"],"names":["GridItem","styled","Flex","LoadingRow","useMatchBreakpoints","isXs","isSm","height","width","justifyContent","TableLoader","ActivityEventText","marketEvent","props","t","useTranslation","events","MarketEvent","NEW","text","color","CANCEL","MODIFY","BUY","SELL","MobileModal","nft","activity","bnbBusdPrice","localeTimestamp","onDismiss","isUserActivity","chainId","useActiveWeb3React","theme","useTheme","priceAsFloat","parseFloat","price","priceInUsd","multiplyPriceByAmount","title","headerBackground","colors","gradients","cardHeader","flexDirection","maxWidth","alignItems","mb","mr","NFTMedia","fontSize","textAlign","collectionName","bold","name","p","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","otherParty","truncateHash","seller","buyer","pt","as","Link","external","href","getBscScanLink","tx","ActivityPrice","justifySelf","ActivityRow","isNftActivity","timestampAsMs","timestamp","Date","year","month","day","hour","minute","useModal","onPresentMobileModal","isPBCollection","collectionAddress","toLowerCase","gladiatorCollectiblesAddress","tokenId","attributes","find","attribute","traitType","value","onClick","event","stopPropagation","to","nftsBaseUrl","RouterLink","ProfileCell","accountAddress","StyledModal","Modal","TextWrapper","dropdown","ProfileNftModal","onEditProfileModal","itemPageUrlId","src","image","thumbnail","flex","gridTemplateColumns","px","small","id","variant","getBscScanLinkForNft","py","ApproveAndConfirmStage","isApproved","isApproving","isConfirming","handleApprove","handleConfirm","success","mt","size","disabled","TransactionConfirmed","txHash","pb","ConfirmStage","initialState","approvalState","confirmState","reducer","state","actions","type","useApproveConfirmTransaction","onApprove","onConfirm","onRequiresApproval","onSuccess","noop","onApproveSuccess","account","useWeb3React","useReducer","dispatch","handlePreApprove","useRef","toastError","useToast","useEffect","current","then","result","isConfirmed","a","wait","receipt","status","console","log","ButtonArrangement","StyledApproveConfirmButtonRow","div","mediaQueries","md","Button","UIKitButton","iconAttrs","ChevronRight","ChevronRightIcon","attrs","ChevronBottom","ChevronDownIcon","spinnerIcon","spin","ApproveConfirmButtons","isApproveDisabled","isConfirmDisabled","buttonArrangement","ROW","confirmLabel","confirmId","confirmButtonText","endIcon","isLoading","RoundedImage","Image","radii","Divider","cardBorder","HorizontalDivider","StepIndicator","secondary","textDisabled","NoNftsImage","SellingStage","SellStage","nftToSell","lowestPrice","continueToNextStage","continueToTransferStage","hasProfile","useProfile","EditProfileModal","stagesWithBackButton","SET_PRICE","ADJUST_PRICE","APPROVE_AND_CONFIRM_SELL","CONFIRM_ADJUST_PRICE","REMOVE_FROM_MARKET","CONFIRM_REMOVE_FROM_MARKET","TRANSFER","CONFIRM_TRANSFER","stage","includes","textSubtle","GreyedOutContainer","Box","RightAlignedInput","Input","BnbAmountCell","bnbAmount","useBNBBusdPrice","usdAmount","FeeAmountCell","creatorFee","tradingFee","totalFee","feeAmount","SetPriceStage","currentPrice","setPrice","inputRef","adjustedPriceIsTheSame","priceIsValid","Number","isNaN","useGetCollection","creatorFeeAsNumber","tradingFeeAsNumber","bnbPrice","priceIsOutOfRange","useTooltip","percentage","placement","tooltip","tooltipVisible","targetRef","focus","textTransform","scale","inputMode","ref","isWarning","onChange","e","target","minPrice","maxPrice","alignSelf","EditStage","continueToAdjustPriceStage","continueToRemoveFromMarketStage","marketData","currentAskPrice","RemoveStage","TransferStage","transferAddress","setTransferAddress","isInvalidTransferAddress","transferAddressEqualsConnectedAddress","placeholder","length","modalTitles","EDIT","TX_CONFIRMED","getToastText","SellModal","useState","setStage","confirmedTxHash","setConfirmedTxHash","callWithGasPrice","useCallWithGasPrice","toastSuccess","collectionContract","useErc721CollectionContract","nftMarketContract","useNftMarketContract","useAppDispatch","isAddress","useGetLowestPriceFromNft","dispatchSuccessAction","updateUserNft","location","NftLocation","WALLET","removeUserNft","FORSALE","isApprovedForAll","address","approvedForContract","Toast","transactionHash","methodName","askPrice","parseUnits","showBackButton","onBack","TeamAvatar","img","card","background","sm","AvatarWrapper","bg","AvatarInactive","NoProfileAvatarIcon","ProfileAvatarWithTeam","profile","isActive","team","images","alt","useFetchUserNfts","isProfileInitialized","isInitialized","isProfileLoading","userNftsInitializationState","useUserNfts","collections","useGetCollections","hasProfileNft","profileNftTokenId","toString","profileNftCollectionAddress","profileNftWithCollectionAddress","useMemo","nftLocation","PROFILE","previousProfileNftTokenId","usePreviousValue","shouldFetch","UserNftInitializationState","UNINITIALIZED","hasAccountSwitched","isEmpty","fetchUserNfts","Label","label","isDisabled","Body","Children","StyledBackgroundImage","SelectionCard","isChecked","children","isSuccess","checked","style","PageButtons","Arrow","primary","Avatar","StyledFlex","useGetProfileAvatar","username","profileNft","usernameFetchStatus","avatarFetchStatus","profileName","sellerProfilePicComponent","FetchStatus","Fetched","display","lineHeight","Views","action","currentView","view","previousView","useEditProfile","START","goToStart","goToChange","CHANGE","goToRemove","REMOVE","goToApprove","APPROVE","goPrevious","useGetProfileCosts","setIsLoading","numberNrtToReactivate","ethers","BigNumber","from","numberNrtToRegister","numberNrtToUpdate","costs","setCosts","calls","map","method","getGladiatorProfileAddress","multicallv2","profileABI","fetchCosts","DangerOutline","failure","StartPage","nrtContract","useNrt","useGetNrtBalance","nrtBalance","balance","fetchStatus","isProfileCostsLoading","needsApproval","setNeedsApproval","minimumNrtRequired","hasMinimumCakeRequired","gte","allowance","response","lt","checkApprovalStatus","minimum","formatBigNumber","PauseProfilePage","isAcknowledged","setIsAcknowledged","setIsConfirming","pancakeProfileContract","useProfileContract","handleDeactivateProfile","hash","fetchProfile","cost","htmlFor","cursor","marginBottom","ml","ChangeProfilePicPage","selectedNft","setSelectedNft","nfts","profileContract","library","nftsInWallet","filter","contract","getErc721Contract","getSigner","maxHeight","overflowY","walletNft","ApproveNrtPage","setIsApproving","approve","mul","viewTitle","isStartView","handleBack","hideCloseButton","StartView","PauseProfileView","ChangeProfilePicView","ApproveNrtView"],"mappings":"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","file":"static/js/7.75aa1e82.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Skeleton, Td, useMatchBreakpoints } from '@pancakeswap/uikit'\n\nconst GridItem = styled(Flex)`\n  align-items: center;\n`\n\nconst LoadingRow: React.FC = () => {\n  const { isXs, isSm } = useMatchBreakpoints()\n\n  return (\n    <tr>\n      <Td>\n        <GridItem>\n          <Skeleton height={[162, null, 64]} width={[80, null, 200]} />\n        </GridItem>\n      </Td>\n      <Td>\n        <GridItem justifyContent=\"flex-end\">\n          <Skeleton height={[66, null, 24]} width={64} />\n        </GridItem>\n      </Td>\n      {isXs || isSm ? null : (\n        <>\n          <Td>\n            <GridItem justifyContent=\"flex-end\">\n              <Skeleton height={42} width={64} />\n            </GridItem>\n          </Td>\n          <Td>\n            <GridItem justifyContent=\"flex-end\">\n              <Skeleton height={48} width={124} />\n            </GridItem>\n          </Td>\n        </>\n      )}\n      <Td>\n        <GridItem justifyContent=\"center\">\n          <Skeleton height={[36, null, 24]} width={[80, null, 120]} />\n        </GridItem>\n      </Td>\n    </tr>\n  )\n}\n\nconst TableLoader: React.FC = () => (\n  <>\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n  </>\n)\n\nexport default TableLoader\n","import React from 'react'\nimport { Text, TextProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { MarketEvent } from '../../../../../state/nftMarket/types'\n\ninterface ActivityEventTextProps extends TextProps {\n  marketEvent: MarketEvent\n}\n\nconst ActivityEventText: React.FC<ActivityEventTextProps> = ({ marketEvent, ...props }) => {\n  const { t } = useTranslation()\n\n  const events = {\n    [MarketEvent.NEW]: {\n      text: t('Listed'),\n      color: 'textSubtle',\n    },\n    [MarketEvent.CANCEL]: {\n      text: t('Delisted'),\n      color: 'textSubtle',\n    },\n    [MarketEvent.MODIFY]: {\n      text: t('Modified'),\n      color: 'textSubtle',\n    },\n    [MarketEvent.BUY]: {\n      text: t('Bought'),\n      color: 'success',\n    },\n    [MarketEvent.SELL]: {\n      text: t('Sold'),\n      color: 'failure',\n    },\n  }\n\n  return (\n    <Text {...props} color={events[marketEvent].color}>\n      {events[marketEvent].text}\n    </Text>\n  )\n}\n\nexport default ActivityEventText\n","import React from 'react'\nimport { InjectedModalProps, Modal, Flex, Text, Button, Link, BinanceIcon, Box } from '@pancakeswap/uikit'\nimport { Price } from '@pancakeswap/sdk'\nimport useTheme from 'hooks/useTheme'\nimport { Activity, NftToken } from 'state/nftMarket/types'\nimport { LightGreyCard } from 'components/Card'\nimport { useTranslation } from 'contexts/Localization'\nimport truncateHash from 'utils/truncateHash'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { getBscScanLink } from 'utils'\nimport ActivityEventText from './ActivityEventText'\nimport NFTMedia from '../NFTMedia'\n\ninterface MobileModalProps extends InjectedModalProps {\n  activity: Activity\n  nft: NftToken\n  bnbBusdPrice: Price\n  localeTimestamp: string\n  isUserActivity?: boolean\n}\n\nconst MobileModal: React.FC<MobileModalProps> = ({\n  nft,\n  activity,\n  bnbBusdPrice,\n  localeTimestamp,\n  onDismiss,\n  isUserActivity = false,\n}) => {\n  const { chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const priceAsFloat = parseFloat(activity.price)\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, priceAsFloat)\n\n  return (\n    <Modal title={t('Transaction Details')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\n      <Flex flexDirection=\"column\" maxWidth=\"350px\">\n        <Flex alignItems=\"center\" mb=\"16px\" justifyContent=\"space-between\">\n          <Box width={68} mr=\"16px\">\n            <NFTMedia nft={nft} width={68} height={68} />\n          </Box>\n          <Flex flexDirection=\"column\">\n            <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n              {nft.collectionName}\n            </Text>\n            <Text bold textAlign=\"right\">\n              {nft.name}\n            </Text>\n          </Flex>\n        </Flex>\n        <LightGreyCard p=\"16px\">\n          <Flex mb=\"24px\" justifyContent=\"space-between\">\n            <ActivityEventText fontSize=\"14px\" marketEvent={activity.marketEvent} />\n            {priceAsFloat ? (\n              <Flex justifyContent=\"flex-end\" alignItems=\"center\">\n                <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\n                <Text mr=\"4px\" bold>\n                  {priceAsFloat}\n                </Text>\n                <Text color=\"textSubtle\">\n                  {`(~$${priceInUsd.toLocaleString(undefined, {\n                    minimumFractionDigits: 2,\n                    maximumFractionDigits: 2,\n                  })})`}\n                </Text>\n              </Flex>\n            ) : (\n              '-'\n            )}\n          </Flex>\n          {isUserActivity ? (\n            <Flex mb=\"24px\" justifyContent=\"space-between\">\n              <Text fontSize=\"14px\" color=\"textSubtle\">\n                {t('From/To')}\n              </Text>\n              <Text>{activity.otherParty ? truncateHash(activity.otherParty) : '-'}</Text>\n            </Flex>\n          ) : (\n            <>\n              <Flex mb=\"24px\" justifyContent=\"space-between\">\n                <Text fontSize=\"14px\" color=\"textSubtle\">\n                  {t('From')}\n                </Text>\n                <Text>{activity.seller ? truncateHash(activity.seller) : '-'}</Text>\n              </Flex>\n              <Flex mb=\"24px\" justifyContent=\"space-between\">\n                <Text fontSize=\"14px\" color=\"textSubtle\">\n                  {t('To')}\n                </Text>\n                <Text>{activity.buyer ? truncateHash(activity.buyer) : '-'}</Text>\n              </Flex>\n            </>\n          )}\n          <Flex justifyContent=\"space-between\">\n            <Text fontSize=\"14px\" color=\"textSubtle\">\n              {t('Date')}\n            </Text>\n            <Text>{localeTimestamp}</Text>\n          </Flex>\n        </LightGreyCard>\n        <Flex flexDirection=\"column\" pt=\"16px\" alignItems=\"center\">\n          <Button as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\n            {t('View on BscScan')}\n          </Button>\n        </Flex>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default MobileModal\n","import React from 'react'\nimport { Flex, BinanceIcon, Text, Skeleton } from '@pancakeswap/uikit'\nimport { multiplyPriceByAmount } from 'utils/prices'\n\nconst ActivityPrice = ({ bnbBusdPrice, price }) => {\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, price)\n\n  return (\n    <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n      {price ? (\n        <>\n          <Flex justifySelf=\"flex-start\" alignItems=\"center\">\n            <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\n            <Text maxWidth=\"80px\" bold>\n              {price.toLocaleString(undefined, {\n                minimumFractionDigits: 0,\n                maximumFractionDigits: 5,\n              })}\n            </Text>\n          </Flex>\n          {priceInUsd ? (\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`(~$${priceInUsd.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2,\n              })})`}\n            </Text>\n          ) : (\n            <Skeleton height=\"18px\" width=\"42px\" />\n          )}\n        </>\n      ) : (\n        '-'\n      )}\n    </Flex>\n  )\n}\n\nexport default ActivityPrice\n","import React from 'react'\nimport { Flex, Text, Td, IconButton, Link, OpenNewIcon, useMatchBreakpoints, useModal, Box } from '@pancakeswap/uikit'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { Activity, NftToken } from 'state/nftMarket/types'\nimport { Price } from '@pancakeswap/sdk'\nimport { getBscScanLink } from 'utils'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport ProfileCell from 'views/Nft/market/components/ProfileCell'\nimport MobileModal from './MobileModal'\nimport ActivityPrice from './ActivityPrice'\nimport ActivityEventText from './ActivityEventText'\nimport { nftsBaseUrl, gladiatorCollectiblesAddress } from '../../constants'\nimport NFTMedia from '../NFTMedia'\n\ninterface ActivityRowProps {\n  activity: Activity\n  nft: NftToken\n  bnbBusdPrice: Price\n  isUserActivity?: boolean\n  isNftActivity?: boolean\n}\n\nconst ActivityRow: React.FC<ActivityRowProps> = ({\n  activity,\n  bnbBusdPrice,\n  nft,\n  isUserActivity = false,\n  isNftActivity = false,\n}) => {\n  const { chainId } = useActiveWeb3React()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const priceAsFloat = parseFloat(activity.price)\n  const timestampAsMs = parseFloat(activity.timestamp) * 1000\n  const localeTimestamp = new Date(timestampAsMs).toLocaleString(undefined, {\n    year: 'numeric',\n    month: 'numeric',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n  })\n  const [onPresentMobileModal] = useModal(\n    <MobileModal\n      nft={nft}\n      activity={activity}\n      localeTimestamp={localeTimestamp}\n      bnbBusdPrice={bnbBusdPrice}\n      isUserActivity={isUserActivity}\n    />,\n  )\n  const isPBCollection = nft ? nft.collectionAddress.toLowerCase() === gladiatorCollectiblesAddress.toLowerCase() : false\n  const tokenId =\n    nft && isPBCollection\n      ? nft.attributes.find((attribute) => attribute.traitType === 'bunnyId')?.value\n      : nft\n      ? nft.tokenId\n      : null\n\n  return (\n    <tr {...((isXs || isSm) && { onClick: onPresentMobileModal })} data-test=\"nft-activity-row\">\n      {!isNftActivity ? (\n        <Td\n          {...((isXs || isSm) && {\n            onClick: (event) => {\n              event.stopPropagation()\n            },\n          })}\n        >\n          <Flex justifyContent=\"flex-start\" alignItems=\"center\" flexDirection={['column', null, 'row']}>\n            <Box width={64} height={64} mr={[0, null, '16px']} mb={['8px', null, 0]}>\n              <RouterLink to={nft ? `${nftsBaseUrl}/collections/${nft.collectionAddress}/${tokenId}` : ``}>\n                <NFTMedia nft={nft} width={64} height={64} />\n              </RouterLink>\n            </Box>\n            <Flex flexDirection=\"column\">\n              <Text\n                as={RouterLink}\n                to={nft ? `${nftsBaseUrl}/collections/${nft.collectionAddress}` : ``}\n                textAlign={['center', null, 'left']}\n                color=\"textSubtle\"\n                fontSize=\"14px\"\n              >\n                {nft?.collectionName}\n              </Text>\n              <Text\n                as={RouterLink}\n                to={nft ? `${nftsBaseUrl}/collections/${nft.collectionAddress}/${tokenId}` : ``}\n                textAlign={['center', null, 'left']}\n                bold\n              >\n                {nft?.name}\n              </Text>\n            </Flex>\n          </Flex>\n        </Td>\n      ) : null}\n      <Td>\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n          <ActivityEventText marketEvent={activity.marketEvent} />\n        </Flex>\n        {isXs || isSm ? <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} /> : null}\n      </Td>\n      {isXs || isSm ? null : (\n        <>\n          <Td>\n            <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} />\n          </Td>\n          {isUserActivity ? (\n            <Td>\n              <Flex justifyContent=\"center\" alignItems=\"center\">\n                {activity.otherParty ? <ProfileCell accountAddress={activity.otherParty} /> : '-'}\n              </Flex>\n            </Td>\n          ) : (\n            <>\n              <Td>\n                <Flex justifyContent=\"center\" alignItems=\"center\">\n                  {activity.seller ? <ProfileCell accountAddress={activity.seller} /> : '-'}\n                </Flex>\n              </Td>\n              <Td>\n                <Flex justifyContent=\"center\" alignItems=\"center\">\n                  {activity.buyer ? <ProfileCell accountAddress={activity.buyer} /> : '-'}\n                </Flex>\n              </Td>\n            </>\n          )}\n        </>\n      )}\n      <Td>\n        <Flex justifyContent=\"center\">\n          <Text textAlign=\"center\" fontSize={isXs || isSm ? '12px' : '16px'}>\n            {localeTimestamp}\n          </Text>\n        </Flex>\n      </Td>\n      {isXs || isSm ? null : (\n        <Td>\n          <IconButton as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\n            <OpenNewIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </Td>\n      )}\n    </tr>\n  )\n}\n\nexport default ActivityRow\n","import React from 'react'\nimport { InjectedModalProps, Modal, Flex, Text, Button, useModal, Link, Grid, LinkExternal } from '@pancakeswap/uikit'\nimport useTheme from 'hooks/useTheme'\nimport styled from 'styled-components'\nimport { NftToken } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanLinkForNft } from 'utils'\nimport { HorizontalDivider, RoundedImage } from './BuySellModals/shared/styles'\nimport EditProfileModal from '../Profile/components/EditProfileModal'\nimport { nftsBaseUrl, gladiatorCollectiblesAddress } from '../constants'\n\nexport const StyledModal = styled(Modal)`\n  & > div:last-child {\n    padding: 0;\n  }\n`\n\nconst TextWrapper = styled(Flex)`\n  background-color: ${({ theme }) => theme.colors.dropdown};\n`\n\ninterface ProfileNftModalProps extends InjectedModalProps {\n  nft: NftToken\n}\n\nconst ProfileNftModal: React.FC<ProfileNftModalProps> = ({ nft, onDismiss }) => {\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  const itemPageUrlId = nft.collectionAddress === gladiatorCollectiblesAddress ? nft.attributes[0].value : nft.tokenId\n\n  return (\n    <StyledModal title={t('Details')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\n      <Flex flexDirection=\"column\" maxWidth=\"350px\">\n        <Flex p=\"16px\">\n          <RoundedImage src={nft.image.thumbnail} height={68} width={68} mr=\"16px\" />\n          <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\n            <Text bold>{nft.name}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n              {nft.collectionName}\n            </Text>\n            {/* TODO: Add lowestPrice when available */}\n          </Grid>\n        </Flex>\n        <Flex justifyContent=\"space-between\" px=\"16px\" mb=\"16px\">\n          <Flex flex=\"2\">\n            <Text small color=\"textSubtle\">\n              {t('Token ID: %id%', { id: nft.tokenId })}\n            </Text>\n          </Flex>\n          <Flex justifyContent=\"space-between\" flex=\"3\">\n            <Button\n              as={Link}\n              p=\"0px\"\n              height=\"16px\"\n              external\n              variant=\"text\"\n              href={`${nftsBaseUrl}/collections/${nft.collectionAddress}/${itemPageUrlId}`}\n            >\n              {t('View Item')}\n            </Button>\n            <HorizontalDivider />\n            <LinkExternal p=\"0px\" height=\"16px\" href={getBscScanLinkForNft(nft.collectionAddress, nft.tokenId)}>\n              BscScan\n            </LinkExternal>\n          </Flex>\n        </Flex>\n        <TextWrapper p=\"24px 16px\" flexDirection=\"column\">\n          <Text mb=\"16px\">{t(\"You're using this NFT as your Pancake Profile picture\")}</Text>\n          <Text color=\"textSubtle\" mb=\"16px\" fontSize=\"14px\">\n            {t(\n              'Removing it will suspend your profile, and you won’t be able to earn points, participate in team activities, or be eligible for new NFT drops.',\n            )}\n          </Text>\n          <Text color=\"textSubtle\" fontSize=\"14px\">\n            {t('Go to your profile page to continue.')}\n          </Text>\n        </TextWrapper>\n        <Flex flexDirection=\"column\" py=\"16px\" px=\"16px\">\n          <Button onClick={onEditProfileModal} width=\"100%\" variant=\"secondary\">\n            {t('Remove Profile Pic')}\n          </Button>\n        </Flex>\n      </Flex>\n    </StyledModal>\n  )\n}\n\nexport default ProfileNftModal\n","import React from 'react'\nimport { Flex, Text, Button, Spinner } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { StepIndicator } from './styles'\n\ninterface ApproveAndConfirmStageProps {\n  variant: 'buy' | 'sell'\n  isApproved: boolean\n  isApproving: boolean\n  isConfirming: boolean\n  handleApprove: () => void\n  handleConfirm: () => void\n}\n\n// Buy Flow:\n// Shown if user wants to pay with WBNB and contract isn't approved yet\n// Sell Flow:\n// Shown the first time user puts NFT for sale\nconst ApproveAndConfirmStage: React.FC<ApproveAndConfirmStageProps> = ({\n  variant,\n  isApproved,\n  isApproving,\n  isConfirming,\n  handleApprove,\n  handleConfirm,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Flex p=\"16px\" flexDirection=\"column\">\n      <Flex mb=\"8px\" alignItems=\"center\">\n        <Flex flexDirection=\"column\">\n          <Flex alignItems=\"center\">\n            <StepIndicator success={isApproved}>\n              <Text fontSize=\"20px\" bold color=\"invertedContrast\">\n                1\n              </Text>\n            </StepIndicator>\n            <Text fontSize=\"20px\" color={isApproved ? 'success' : 'secondary'} bold>\n              {isApproved ? t('Enabled') : t('Enable')}\n            </Text>\n          </Flex>\n          {!isApproved && (\n            <Text mt=\"8px\" maxWidth=\"275px\" small color=\"textSubtle\">\n              {variant === 'buy'\n                ? t('Please enable WBNB spending in your wallet')\n                : t('Please enable your NFT to be sent to the market')}\n            </Text>\n          )}\n        </Flex>\n        <Flex flex=\"0 0 64px\" width=\"64px\">\n          {isApproving && <Spinner size={64} />}\n        </Flex>\n      </Flex>\n      {!isApproved && (\n        <Button variant=\"secondary\" disabled={isApproving} onClick={handleApprove}>\n          {isApproving ? `${t('Enabling')}...` : t('Enable')}\n        </Button>\n      )}\n      <Flex alignItems=\"center\" mt=\"8px\">\n        <Flex flexDirection=\"column\">\n          <Flex alignItems=\"center\" mt=\"16px\">\n            <StepIndicator success={!!0} disabled={!isApproved}>\n              <Text fontSize=\"20px\" bold color={!isApproved ? 'textDisabled' : 'invertedContrast'}>\n                2\n              </Text>\n            </StepIndicator>\n            <Text fontSize=\"20px\" bold color={isApproved ? 'secondary' : 'textDisabled'}>\n              {t('Confirm')}\n            </Text>\n          </Flex>\n          <Text small color={isApproved ? 'textSubtle' : 'textDisabled'}>\n            {t('Please confirm the transaction in your wallet')}\n          </Text>\n        </Flex>\n        <Flex flex=\"0 0 64px\" width=\"64px\">\n          {isConfirming && <Spinner size={64} />}\n        </Flex>\n      </Flex>\n      <Button mt=\"16px\" disabled={!isApproved || isConfirming} onClick={handleConfirm} variant=\"secondary\">\n        {isConfirming ? t('Confirming') : t('Confirm')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default ApproveAndConfirmStage\n","import React from 'react'\nimport { Flex, Text, Button, ArrowUpIcon, LinkExternal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanLink } from 'utils'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { Divider } from './styles'\n\ninterface TransactionConfirmedProps {\n  txHash: string\n  onDismiss: () => void\n}\n\nconst TransactionConfirmed: React.FC<TransactionConfirmedProps> = ({ txHash, onDismiss }) => {\n  const { chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n  return (\n    <>\n      <Flex p=\"16px\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"space-between\" height=\"150px\">\n        <ArrowUpIcon width=\"64px\" height=\"64px\" color=\"primary\" />\n        <Text bold>{t('Transaction Confirmed')}</Text>\n        <LinkExternal href={getBscScanLink(txHash, 'transaction', chainId)}>{t('View on BscScan')}</LinkExternal>\n      </Flex>\n      <Divider />\n      <Flex px=\"16px\" pb=\"16px\" justifyContent=\"center\">\n        <Button onClick={onDismiss} variant=\"secondary\" width=\"100%\">\n          {t('Close')}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default TransactionConfirmed\n","import React from 'react'\nimport { Flex, Text, Button, Spinner } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ConfirmStageProps {\n  isConfirming: boolean\n  handleConfirm: () => void\n}\n\n// Buy Flow:\n// Shown in case user wants to pay with BNB\n// or if user wants to pay with WBNB and it is already approved\n// Sell Flow:\n// Shown if user adjusts the price or removes NFT from the market\nconst ConfirmStage: React.FC<ConfirmStageProps> = ({ isConfirming, handleConfirm }) => {\n  const { t } = useTranslation()\n  return (\n    <Flex p=\"16px\" flexDirection=\"column\">\n      <Flex alignItems=\"center\">\n        <Flex flexDirection=\"column\">\n          <Flex alignItems=\"center\">\n            <Text fontSize=\"20px\" bold color=\"secondary\">\n              {t('Confirm')}\n            </Text>\n          </Flex>\n          <Text small color=\"textSubtle\">\n            {t('Please confirm the transaction in your wallet')}\n          </Text>\n        </Flex>\n        <Flex flex=\"0 0 64px\" height=\"72px\" width=\"64px\">\n          {isConfirming && <Spinner size={64} />}\n        </Flex>\n      </Flex>\n      <Button mt=\"24px\" disabled={isConfirming} onClick={handleConfirm} variant=\"secondary\">\n        {isConfirming ? `${t('Confirming')}...` : t('Confirm')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default ConfirmStage\n","import { useEffect, useReducer, useRef } from 'react'\nimport { noop } from 'lodash'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers } from 'ethers'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\n\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\n\ntype Action =\n  | { type: 'requires_approval' }\n  | { type: 'approve_sending' }\n  | { type: 'approve_receipt' }\n  | { type: 'approve_error' }\n  | { type: 'confirm_sending' }\n  | { type: 'confirm_receipt' }\n  | { type: 'confirm_error' }\n\ninterface State {\n  approvalState: LoadingState\n  confirmState: LoadingState\n}\n\nconst initialState: State = {\n  approvalState: 'idle',\n  confirmState: 'idle',\n}\n\nconst reducer = (state: State, actions: Action): State => {\n  switch (actions.type) {\n    case 'requires_approval':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_sending':\n      return {\n        ...state,\n        approvalState: 'loading',\n      }\n    case 'approve_receipt':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_error':\n      return {\n        ...state,\n        approvalState: 'fail',\n      }\n    case 'confirm_sending':\n      return {\n        ...state,\n        confirmState: 'loading',\n      }\n    case 'confirm_receipt':\n      return {\n        ...state,\n        confirmState: 'success',\n      }\n    case 'confirm_error':\n      return {\n        ...state,\n        confirmState: 'fail',\n      }\n    default:\n      return state\n  }\n}\n\ninterface OnSuccessProps {\n  state: State\n  receipt: ethers.providers.TransactionReceipt\n}\n\ninterface ApproveConfirmTransaction {\n  onApprove: () => Promise<ethers.providers.TransactionResponse>\n  onConfirm: () => Promise<ethers.providers.TransactionResponse>\n  onRequiresApproval?: () => Promise<boolean>\n  onSuccess: ({ state, receipt }: OnSuccessProps) => void\n  onApproveSuccess?: ({ state, receipt }: OnSuccessProps) => void\n}\n\nconst useApproveConfirmTransaction = ({\n  onApprove,\n  onConfirm,\n  onRequiresApproval,\n  onSuccess = noop,\n  onApproveSuccess = noop,\n}: ApproveConfirmTransaction) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const handlePreApprove = useRef(onRequiresApproval)\n  const { toastError } = useToast()\n\n  // Check if approval is necessary, re-check if account changes\n  useEffect(() => {\n    if (account && handlePreApprove.current) {\n      handlePreApprove.current().then((result) => {\n        if (result) {\n          dispatch({ type: 'requires_approval' })\n        }\n      })\n    }\n  }, [account, handlePreApprove, dispatch])\n\n  return {\n    isApproving: state.approvalState === 'loading',\n    isApproved: state.approvalState === 'success',\n    isConfirming: state.confirmState === 'loading',\n    isConfirmed: state.confirmState === 'success',\n    handleApprove: async () => {\n      try {\n        const tx = await onApprove()\n        dispatch({ type: 'approve_sending' })\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          dispatch({ type: 'approve_receipt' })\n          onApproveSuccess({ state, receipt })\n        }\n      } catch (error) {\n        // console.log(\"eeerrrrrrroooooorrrrrrr\", error)\n        dispatch({ type: 'approve_error' })\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    },\n    handleConfirm: async () => {\n      dispatch({ type: 'confirm_sending' })\n      // console.log(\"hiiiiiiiiiii\")\n      try {\n        const tx = await onConfirm()\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          dispatch({ type: 'confirm_receipt' })\n          onSuccess({ state, receipt })\n        }\n      } catch (error: any) {\n        console.log(\"erorrrrrrrrrrrrrrrrrrrrrrr\", error)\n        dispatch({ type: 'confirm_error' })\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    },\n  }\n}\n\nexport default useApproveConfirmTransaction","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronRightIcon, Button as UIKitButton, AutoRenewIcon, ChevronDownIcon, Box, Flex } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport enum ButtonArrangement {\n  ROW = 'row',\n  SEQUENTIAL = 'sequential',\n}\n\ninterface ApproveConfirmButtonsProps {\n  isApproveDisabled: boolean\n  isApproving: boolean\n  isConfirming: boolean\n  isConfirmDisabled: boolean\n  onApprove: () => void\n  onConfirm: () => void\n  buttonArrangement?: ButtonArrangement\n  confirmLabel?: string\n  confirmId?: string\n}\n\nconst StyledApproveConfirmButtonRow = styled.div`\n  align-items: center;\n  display: grid;\n  grid-template-columns: 1fr;\n  justify-content: center;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: 1fr 24px 1fr;\n  }\n`\n\nconst Button = styled(UIKitButton)`\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    min-width: 160px;\n  }\n`\n\nconst iconAttrs = { width: '24px', color: 'textDisabled' }\n\nconst ChevronRight = styled(ChevronRightIcon).attrs(iconAttrs)`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: block;\n  }\n`\n\nconst ChevronBottom = styled(ChevronDownIcon).attrs(iconAttrs)`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: none;\n  }\n`\n\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\n\nconst ApproveConfirmButtons: React.FC<ApproveConfirmButtonsProps> = ({\n  isApproveDisabled,\n  isApproving,\n  isConfirming,\n  isConfirmDisabled,\n  onApprove,\n  onConfirm,\n  buttonArrangement = ButtonArrangement.ROW,\n  confirmLabel,\n  confirmId,\n}) => {\n  const { t } = useTranslation()\n  const confirmButtonText = confirmLabel ?? t('Confirm')\n\n  const ApproveConfirmRow = () => {\n    return (\n      <StyledApproveConfirmButtonRow>\n        <Box>\n          <Button\n            disabled={isApproveDisabled}\n            onClick={onApprove}\n            endIcon={isApproving ? spinnerIcon : undefined}\n            isLoading={isApproving}\n          >\n            {isApproving ? t('Enabling') : t('Enable')}\n          </Button>\n        </Box>\n        <Flex justifyContent=\"center\">\n          <ChevronRight />\n          <ChevronBottom />\n        </Flex>\n        <Box>\n          <Button\n            id={confirmId}\n            onClick={onConfirm}\n            disabled={isConfirmDisabled}\n            isLoading={isConfirming}\n            endIcon={isConfirming ? spinnerIcon : undefined}\n          >\n            {isConfirming ? t('Confirming') : confirmButtonText}\n          </Button>\n        </Box>\n      </StyledApproveConfirmButtonRow>\n    )\n  }\n\n  const ApproveConfirmSequential = () => {\n    return (\n      <>\n        {isApproveDisabled ? (\n          <Box>\n            <Button\n              id={confirmId}\n              onClick={onConfirm}\n              disabled={isConfirmDisabled}\n              isLoading={isConfirming}\n              endIcon={isConfirming ? spinnerIcon : undefined}\n            >\n              {isConfirming ? t('Confirming') : confirmButtonText}\n            </Button>\n          </Box>\n        ) : (\n          <Box>\n            <Button onClick={onApprove} endIcon={isApproving ? spinnerIcon : undefined} isLoading={isApproving}>\n              {isApproving ? t('Enabling') : t('Enable')}\n            </Button>\n          </Box>\n        )}\n      </>\n    )\n  }\n\n  return buttonArrangement === ButtonArrangement.ROW ? ApproveConfirmRow() : ApproveConfirmSequential()\n}\n\nexport default ApproveConfirmButtons\n","import styled from 'styled-components'\nimport { Flex, Image } from '@pancakeswap/uikit'\n\nexport const RoundedImage = styled(Image)`\n  border-radius: ${({ theme }) => theme.radii.small};\n  overflow: hidden;\n`\n\nexport const Divider = styled.div`\n  margin: 16px 0;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nexport const HorizontalDivider = styled.div`\n  border-right: 1px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nexport const StepIndicator = styled(Flex)<{ success: boolean; disabled?: boolean }>`\n  border-radius: 50%;\n  background-color: ${({ theme, success, disabled }) => {\n    if (disabled) {\n      return 'none'\n    }\n    return success ? theme.colors.success : theme.colors.secondary\n  }};\n  border: ${({ theme, disabled }) => (disabled ? `1px solid ${theme.colors.textDisabled}` : 'none')};\n  height: 32px;\n  width: 32px;\n  justify-content: center;\n  align-items: center;\n  margin-right: 8px;\n`\n","import styled from 'styled-components'\n\nconst NoNftsImage = styled.div`\n  background: url('/images/nfts/no-profile-md.png');\n  background-repeat: no-repeat;\n  background-size: cover;\n  border-radius: 50%;\n  position: relative;\n  width: 96px;\n  height: 96px;\n\n  & > img {\n    border-radius: 50%;\n  }\n`\n\nexport default NoNftsImage\n","export enum SellingStage {\n  // Sell flow\n  SELL,\n  SET_PRICE,\n  APPROVE_AND_CONFIRM_SELL,\n  // Adjust price flow\n  EDIT,\n  ADJUST_PRICE,\n  CONFIRM_ADJUST_PRICE,\n  // Remove from market flow\n  REMOVE_FROM_MARKET,\n  CONFIRM_REMOVE_FROM_MARKET,\n  // Transfer flow\n  TRANSFER,\n  CONFIRM_TRANSFER,\n  // Common\n  TX_CONFIRMED,\n}\n","import React from 'react'\nimport { Flex, Grid, Text, Button, Link, BinanceIcon, LinkExternal, useModal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { nftsBaseUrl, gladiatorCollectiblesAddress } from 'views/Nft/market/constants'\nimport { NftToken } from 'state/nftMarket/types'\nimport { getBscScanLinkForNft } from 'utils'\nimport EditProfileModal from 'views/Nft/market/Profile/components/EditProfileModal'\nimport { useProfile } from 'state/profile/hooks'\nimport { Divider, HorizontalDivider, RoundedImage } from '../shared/styles'\n\ninterface SellStageProps {\n  nftToSell: NftToken\n  lowestPrice: number\n  continueToNextStage: () => void\n  continueToTransferStage: () => void\n}\n\n// Initial stage when user wants to put their NFT for sale or transfer to another wallet\nconst SellStage: React.FC<SellStageProps> = ({\n  nftToSell,\n  lowestPrice,\n  continueToNextStage,\n  continueToTransferStage,\n}) => {\n  const { t } = useTranslation()\n  const { hasProfile } = useProfile()\n  const itemPageUrlId = nftToSell.tokenId\n\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\n\n  return (\n    <>\n      <Flex p=\"16px\">\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\n          <Text bold>{nftToSell.name}</Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n            {nftToSell.collectionName}\n          </Text>\n          {lowestPrice && (\n            <>\n              <Text small color=\"textSubtle\">\n                {t('Lowest price')}\n              </Text>\n              <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n                <BinanceIcon width={16} height={16} mr=\"4px\" />\n                <Text small>\n                  {lowestPrice.toLocaleString(undefined, {\n                    minimumFractionDigits: 3,\n                    maximumFractionDigits: 3,\n                  })}\n                </Text>\n              </Flex>\n            </>\n          )}\n        </Grid>\n      </Flex>\n      <Flex justifyContent=\"space-between\" px=\"16px\" mt=\"8px\">\n        <Flex flex=\"2\">\n          <Text small color=\"textSubtle\">\n            {t('Token ID: %id%', { id: nftToSell.tokenId })}\n          </Text>\n        </Flex>\n        <Flex justifyContent=\"space-between\" flex=\"3\">\n          <Button\n            as={Link}\n            p=\"0px\"\n            height=\"16px\"\n            external\n            variant=\"text\"\n            href={`${nftsBaseUrl}/collections/${nftToSell.collectionAddress}/${itemPageUrlId}`}\n          >\n            {t('View Item')}\n          </Button>\n          <HorizontalDivider />\n          <LinkExternal\n            p=\"0px\"\n            height=\"16px\"\n            href={getBscScanLinkForNft(nftToSell.collectionAddress, nftToSell.tokenId)}\n          >\n            BscScan\n          </LinkExternal>\n        </Flex>\n      </Flex>\n      <Divider />\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\n        <Button mb=\"8px\" onClick={continueToNextStage}>\n          {t('Sell')}\n        </Button>\n        <Button mb=\"8px\" variant=\"secondary\" onClick={continueToTransferStage}>\n          {t('Transfer')}\n        </Button>\n        {hasProfile && (\n          <Button variant=\"secondary\" onClick={onEditProfileModal}>\n            {t('Set as Profile Pic')}\n          </Button>\n        )}\n      </Flex>\n    </>\n  )\n}\n\nexport default SellStage\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Modal, Box, Flex, Text, BinanceIcon, Input } from '@pancakeswap/uikit'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { SellingStage } from './types'\n\nexport const stagesWithBackButton = [\n  SellingStage.SET_PRICE,\n  SellingStage.ADJUST_PRICE,\n  SellingStage.APPROVE_AND_CONFIRM_SELL,\n  SellingStage.CONFIRM_ADJUST_PRICE,\n  SellingStage.REMOVE_FROM_MARKET,\n  SellingStage.CONFIRM_REMOVE_FROM_MARKET,\n  SellingStage.TRANSFER,\n  SellingStage.CONFIRM_TRANSFER,\n]\n\nexport const StyledModal = styled(Modal)<{ stage: SellingStage }>`\n  width: 360px;\n  & > div:last-child {\n    padding: 0;\n  }\n  & h2:first-of-type {\n    ${({ stage, theme }) => (stagesWithBackButton.includes(stage) ? `color: ${theme.colors.textSubtle}` : null)};\n  }\n  & svg:first-of-type {\n    ${({ stage, theme }) => (stagesWithBackButton.includes(stage) ? `fill: ${theme.colors.textSubtle}` : null)};\n  }\n`\n\nexport const GreyedOutContainer = styled(Box)`\n  background-color: ${({ theme }) => theme.colors.dropdown};\n  padding: 16px;\n`\n\nexport const RightAlignedInput = styled(Input)`\n  text-align: right;\n`\n\ninterface BnbAmountCellProps {\n  bnbAmount: number\n}\n\nexport const BnbAmountCell: React.FC<BnbAmountCellProps> = ({ bnbAmount }) => {\n  const bnbBusdPrice = useBNBBusdPrice()\n  if (!bnbAmount || bnbAmount === 0) {\n    return (\n      <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n        <BinanceIcon width={16} height={16} mr=\"4px\" />\n        <Text bold mr=\"4px\">\n          -\n        </Text>\n      </Flex>\n    )\n  }\n  const usdAmount = multiplyPriceByAmount(bnbBusdPrice, bnbAmount)\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n      <BinanceIcon width={16} height={16} mr=\"4px\" />\n      <Text bold mr=\"4px\">{`${bnbAmount.toLocaleString(undefined, {\n        minimumFractionDigits: 3,\n        maximumFractionDigits: 3,\n      })}`}</Text>\n      <Text small color=\"textSubtle\" textAlign=\"right\">\n        {`($${usdAmount.toLocaleString(undefined, {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2,\n        })})`}\n      </Text>\n    </Flex>\n  )\n}\n\ninterface FeeAmountCellProps {\n  bnbAmount: number\n  creatorFee: number\n  tradingFee: number\n}\n\nexport const FeeAmountCell: React.FC<FeeAmountCellProps> = ({ bnbAmount, creatorFee, tradingFee }) => {\n  if (!bnbAmount || bnbAmount === 0) {\n    return (\n      <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n        <BinanceIcon width={16} height={16} mr=\"4px\" />\n        <Text bold mr=\"4px\">\n          -\n        </Text>\n      </Flex>\n    )\n  }\n\n  const totalFee = creatorFee + tradingFee\n  const totalFeeAsDecimal = totalFee / 100\n  const feeAmount = bnbAmount * totalFeeAsDecimal\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n      <BinanceIcon width={16} height={16} mr=\"4px\" />\n      <Text bold mr=\"4px\">{`${feeAmount.toLocaleString(undefined, {\n        minimumFractionDigits: 3,\n        maximumFractionDigits: 6,\n      })}`}</Text>\n      <Text small color=\"textSubtle\" textAlign=\"right\">\n        ({totalFee}%)\n      </Text>\n    </Flex>\n  )\n}\n","import React, { useEffect, useRef } from 'react'\nimport { Flex, Grid, Box, Text, Button, BinanceIcon, ErrorIcon, useTooltip } from '@pancakeswap/uikit'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport { useTranslation } from 'contexts/Localization'\nimport { NftToken } from 'state/nftMarket/types'\nimport { useGetCollection } from 'state/nftMarket/hooks'\nimport { Divider } from '../shared/styles'\nimport { GreyedOutContainer, BnbAmountCell, RightAlignedInput, FeeAmountCell } from './styles'\n\ninterface SetPriceStageProps {\n  nftToSell: NftToken\n  variant: 'set' | 'adjust'\n  currentPrice?: string\n  lowestPrice?: number\n  price: string\n  setPrice: React.Dispatch<React.SetStateAction<string>>\n  continueToNextStage: () => void\n}\n\nconst MIN_PRICE = 0.005\nconst MAX_PRICE = 10000\n\n// Stage where user puts price for NFT they're about to put on sale\n// Also shown when user wants to adjust the price of already listed NFT\nconst SetPriceStage: React.FC<SetPriceStageProps> = ({\n  nftToSell,\n  variant,\n  lowestPrice,\n  currentPrice,\n  price,\n  setPrice,\n  continueToNextStage,\n}) => {\n  const { t } = useTranslation()\n  const inputRef = useRef<HTMLInputElement>()\n  const adjustedPriceIsTheSame = variant === 'adjust' && parseFloat(currentPrice) === parseFloat(price)\n  const priceIsValid = !price || Number.isNaN(parseFloat(price)) || parseFloat(price) <= 0\n\n  const { creatorFee, tradingFee } = useGetCollection(nftToSell.collectionAddress)\n  const creatorFeeAsNumber = parseFloat(creatorFee)\n  const tradingFeeAsNumber = parseFloat(tradingFee)\n  const bnbPrice = useBNBBusdPrice()\n  const priceAsFloat = parseFloat(price)\n  const priceInUsd = multiplyPriceByAmount(bnbPrice, priceAsFloat)\n\n  const priceIsOutOfRange = priceAsFloat > MAX_PRICE || priceAsFloat < MIN_PRICE\n\n  const { tooltip, tooltipVisible, targetRef } = useTooltip(\n    <>\n      <Text>\n        {t(\n          'When selling NFTs from this collection, a portion of the BNB paid will be diverted before reaching the seller:',\n        )}\n      </Text>\n      {creatorFeeAsNumber > 0 && (\n        <Text>{t('%percentage%% royalties to the collection owner', { percentage: creatorFee })}</Text>\n      )}\n      <Text>{t('%percentage%% trading fee will be used to buy & burn CAKE', { percentage: tradingFee })}</Text>\n    </>,\n    { placement: 'auto' },\n  )\n\n  useEffect(() => {\n    if (inputRef && inputRef.current) {\n      inputRef.current.focus()\n    }\n  }, [inputRef])\n\n  const getButtonText = () => {\n    if (variant === 'adjust') {\n      if (adjustedPriceIsTheSame || priceIsValid) {\n        return t('Input New Sale Price')\n      }\n      return t('Confirm')\n    }\n    return t('Enable Listing')\n  }\n  return (\n    <>\n      <Text fontSize=\"24px\" bold p=\"16px\">\n        {variant === 'set' ? t('Set Price') : t('Adjust Sale Price')}\n      </Text>\n      <GreyedOutContainer>\n        <Text fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" bold>\n          {t('Set Price')}\n        </Text>\n        <Flex>\n          <Flex flex=\"1\" alignItems=\"center\">\n            <BinanceIcon width={24} height={24} mr=\"4px\" />\n            <Text bold>WBNB</Text>\n          </Flex>\n          <Flex flex=\"2\">\n            <RightAlignedInput\n              scale=\"sm\"\n              type=\"number\"\n              inputMode=\"decimal\"\n              value={price}\n              ref={inputRef}\n              isWarning={priceIsOutOfRange}\n              onChange={(e) => setPrice(e.target.value)}\n            />\n          </Flex>\n        </Flex>\n        <Flex alignItems=\"center\" height=\"21px\" justifyContent=\"flex-end\">\n          {!Number.isNaN(priceInUsd) && (\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`$${priceInUsd.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`}\n            </Text>\n          )}\n        </Flex>\n        {priceIsOutOfRange && (\n          <Text fontSize=\"12px\" color=\"failure\">\n            {t('Allowed price range is between %minPrice% and %maxPrice% WBNB', {\n              minPrice: MIN_PRICE,\n              maxPrice: MAX_PRICE,\n            })}\n          </Text>\n        )}\n        <Flex mt=\"8px\">\n          <Text small color=\"textSubtle\" mr=\"8px\">\n            {t('Seller pays %percentage%% platform fee on sale', {\n              percentage: creatorFeeAsNumber + tradingFeeAsNumber,\n            })}\n          </Text>\n          <span ref={targetRef}>\n            <ErrorIcon />\n          </span>\n          {tooltipVisible && tooltip}\n        </Flex>\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mt=\"16px\">\n          <Text small color=\"textSubtle\">\n            {t('Platform fee if sold')}\n          </Text>\n          <FeeAmountCell bnbAmount={priceAsFloat} creatorFee={creatorFeeAsNumber} tradingFee={tradingFeeAsNumber} />\n        </Flex>\n        {lowestPrice && (\n          <Flex justifyContent=\"space-between\" alignItems=\"center\" mt=\"16px\">\n            <Text small color=\"textSubtle\">\n              {t('Lowest price on market')}\n            </Text>\n            <BnbAmountCell bnbAmount={lowestPrice} />\n          </Flex>\n        )}\n      </GreyedOutContainer>\n      <Grid gridTemplateColumns=\"32px 1fr\" p=\"16px\" maxWidth=\"360px\">\n        <Flex alignSelf=\"flex-start\">\n          <ErrorIcon width={24} height={24} color=\"textSubtle\" />\n        </Flex>\n        <Box>\n          <Text small color=\"textSubtle\">\n            {t('The NFT will be removed from your wallet and put on sale at this price.')}\n          </Text>\n          <Text small color=\"textSubtle\">\n            {t('Sales are in WBNB. You can swap WBNB to BNB 1:1 for free with PancakeSwap.')}\n          </Text>\n        </Box>\n      </Grid>\n      <Divider />\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\n        <Button\n          mb=\"8px\"\n          onClick={continueToNextStage}\n          disabled={priceIsValid || adjustedPriceIsTheSame || priceIsOutOfRange}\n        >\n          {getButtonText()}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default SetPriceStage\n","import React from 'react'\nimport { Flex, Grid, Text, Button, Link, LinkExternal, BinanceIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { nftsBaseUrl, gladiatorCollectiblesAddress } from 'views/Nft/market/constants'\nimport { NftToken } from 'state/nftMarket/types'\nimport { getBscScanLinkForNft } from 'utils'\nimport { Divider, HorizontalDivider, RoundedImage } from '../shared/styles'\n\ninterface EditStageProps {\n  nftToSell: NftToken\n  lowestPrice: number\n  continueToAdjustPriceStage: () => void\n  continueToRemoveFromMarketStage: () => void\n}\n\n// Initial stage when user wants to edit already listed NFT (i.e. adjust price or remove from sale)\nconst EditStage: React.FC<EditStageProps> = ({\n  nftToSell,\n  lowestPrice,\n  continueToAdjustPriceStage,\n  continueToRemoveFromMarketStage,\n}) => {\n  const { t } = useTranslation()\n  const itemPageUrlId =\n    nftToSell.collectionAddress.toLowerCase() === gladiatorCollectiblesAddress.toLowerCase()\n      ? nftToSell.attributes[0].value\n      : nftToSell.tokenId\n\n  return (\n    <>\n      <Flex p=\"16px\">\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\n          <Text bold>{nftToSell.name}</Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n            {nftToSell.collectionName}\n          </Text>\n          {lowestPrice && (\n            <>\n              <Text small color=\"textSubtle\">\n                {t('Lowest price')}\n              </Text>\n\n              <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n                <BinanceIcon width={16} height={16} mr=\"4px\" />\n                <Text small>{lowestPrice}</Text>\n              </Flex>\n            </>\n          )}\n          <Text small color=\"textSubtle\">\n            {t('Your price')}\n          </Text>\n          <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n            <BinanceIcon width={16} height={16} mr=\"4px\" />\n            <Text small>{nftToSell.marketData.currentAskPrice}</Text>\n          </Flex>\n        </Grid>\n      </Flex>\n      <Flex justifyContent=\"space-between\" px=\"16px\" mt=\"8px\">\n        <Flex flex=\"2\">\n          <Text small color=\"textSubtle\">\n            {t('Token ID: %id%', { id: nftToSell.tokenId })}\n          </Text>\n        </Flex>\n        <Flex justifyContent=\"space-between\" flex=\"3\">\n          <Button\n            as={Link}\n            p=\"0px\"\n            height=\"16px\"\n            external\n            variant=\"text\"\n            href={`${nftsBaseUrl}/collections/${nftToSell.collectionAddress}/${itemPageUrlId}`}\n          >\n            {t('View Item')}\n          </Button>\n          <HorizontalDivider />\n          <LinkExternal\n            p=\"0px\"\n            height=\"16px\"\n            href={getBscScanLinkForNft(nftToSell.collectionAddress, nftToSell.tokenId)}\n          >\n            BscScan\n          </LinkExternal>\n        </Flex>\n      </Flex>\n      <Divider />\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\n        <Button mb=\"8px\" onClick={continueToAdjustPriceStage}>\n          {t('Adjust Sale Price')}\n        </Button>\n        <Button variant=\"danger\" onClick={continueToRemoveFromMarketStage}>\n          {t('Remove from Market')}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default EditStage\n","import React from 'react'\nimport { Flex, Box, Text, Button } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Divider } from '../shared/styles'\n\ninterface RemoveStageProps {\n  continueToNextStage: () => void\n}\n\nconst RemoveStage: React.FC<RemoveStageProps> = ({ continueToNextStage }) => {\n  const { t } = useTranslation()\n  return (\n    <>\n      <Box p=\"16px\" maxWidth=\"360px\">\n        <Text fontSize=\"24px\" bold>\n          {t('Remove from Market')}\n        </Text>\n        <Text mt=\"24px\" color=\"textSubtle\">\n          {t('Removing this NFT from the marketplace will return it to your wallet.')}\n        </Text>\n        <Text mt=\"16px\" color=\"textSubtle\">\n          {t('Continue?')}\n        </Text>\n      </Box>\n      <Divider />\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\n        <Button mb=\"8px\" onClick={continueToNextStage}>\n          {t('Confirm')}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default RemoveStage\n","import React from 'react'\nimport { Flex, Grid, Text, Button, Input, BinanceIcon, ErrorIcon } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { NftToken } from 'state/nftMarket/types'\nimport { Divider, RoundedImage } from '../shared/styles'\nimport { GreyedOutContainer } from './styles'\n\ninterface TransferStageProps {\n  nftToSell: NftToken\n  lowestPrice: number\n  transferAddress: string\n  setTransferAddress: React.Dispatch<React.SetStateAction<string>>\n  isInvalidTransferAddress: boolean\n  continueToNextStage: () => void\n}\n\nconst TransferStage: React.FC<TransferStageProps> = ({\n  nftToSell,\n  lowestPrice,\n  transferAddress,\n  setTransferAddress,\n  isInvalidTransferAddress,\n  continueToNextStage,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const transferAddressEqualsConnectedAddress = transferAddress.toLowerCase() === account.toLowerCase()\n  const getErrorText = () => {\n    if (isInvalidTransferAddress) {\n      return t('That’s not a Binance Smart Chain wallet address.')\n    }\n    if (transferAddressEqualsConnectedAddress) {\n      return t('This address is the one that is currently connected')\n    }\n    return null\n  }\n  return (\n    <>\n      <Text fontSize=\"24px\" bold px=\"16px\" pt=\"16px\">\n        {t('Transfer to New Wallet')}\n      </Text>\n      <Flex p=\"16px\">\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\n          <Text bold>{nftToSell.name}</Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n            {nftToSell.collectionName}\n          </Text>\n          {lowestPrice && (\n            <>\n              <Text small color=\"textSubtle\">\n                {t('Lowest price')}\n              </Text>\n              <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n                <BinanceIcon width={16} height={16} mr=\"4px\" />\n                <Text small>{lowestPrice}</Text>\n              </Flex>\n            </>\n          )}\n        </Grid>\n      </Flex>\n      <GreyedOutContainer>\n        <Text fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" bold>\n          {t('Receiving address')}\n        </Text>\n        <Input\n          scale=\"sm\"\n          isWarning={isInvalidTransferAddress || transferAddressEqualsConnectedAddress}\n          placeholder={t('Paste BSC address')}\n          value={transferAddress}\n          onChange={(e) => setTransferAddress(e.target.value)}\n        />\n        {isInvalidTransferAddress ||\n          (transferAddressEqualsConnectedAddress && (\n            <Text fontSize=\"12px\" color=\"failure\" mt=\"4px\">\n              {getErrorText()}\n            </Text>\n          ))}\n      </GreyedOutContainer>\n      <Grid gridTemplateColumns=\"32px 1fr\" p=\"16px\" maxWidth=\"360px\">\n        <Flex alignSelf=\"flex-start\">\n          <ErrorIcon width={24} height={24} color=\"textSubtle\" />\n        </Flex>\n        <Text small color=\"textSubtle\">\n          {t('This action will send your NFT to the address you have indicated above. Make sure it’s the correct')}\n        </Text>\n      </Grid>\n      <Divider />\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\n        <Button\n          mb=\"8px\"\n          onClick={continueToNextStage}\n          disabled={isInvalidTransferAddress || transferAddress.length === 0 || transferAddressEqualsConnectedAddress}\n        >\n          {t('Confirm')}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default TransferStage\n","import React, { useState } from 'react'\nimport { InjectedModalProps } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { parseUnits } from 'ethers/lib/utils'\nimport useTheme from 'hooks/useTheme'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport useToast from 'hooks/useToast'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { useTranslation } from 'contexts/Localization'\nimport { ContextApi } from 'contexts/Localization/types'\nimport { isAddress } from 'utils'\nimport { useErc721CollectionContract, useNftMarketContract } from 'hooks/useContract'\nimport { useAppDispatch } from 'state'\nimport { removeUserNft, updateUserNft } from 'state/nftMarket/reducer'\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\nimport { useGetLowestPriceFromNft } from 'views/Nft/market/hooks/useGetLowestPrice'\nimport SellStage from './SellStage'\nimport SetPriceStage from './SetPriceStage'\nimport EditStage from './EditStage'\nimport ApproveAndConfirmStage from '../shared/ApproveAndConfirmStage'\nimport TransactionConfirmed from '../shared/TransactionConfirmed'\nimport { StyledModal, stagesWithBackButton } from './styles'\nimport { SellingStage } from './types'\nimport ConfirmStage from '../shared/ConfirmStage'\nimport RemoveStage from './RemoveStage'\nimport TransferStage from './TransferStage'\n\nexport const modalTitles = (stage: SellingStage, t: ContextApi['t']) => {\n  switch (stage) {\n    // Sell flow\n    case SellingStage.SELL:\n      return t('Details')\n    case SellingStage.SET_PRICE:\n    case SellingStage.APPROVE_AND_CONFIRM_SELL:\n      return t('Back')\n    // Adjust price flow\n    case SellingStage.EDIT:\n      return t('Details')\n    case SellingStage.ADJUST_PRICE:\n      return t('Back')\n    case SellingStage.CONFIRM_ADJUST_PRICE:\n      return t('Confirm transaction')\n    // Remove from market flow\n    case SellingStage.REMOVE_FROM_MARKET:\n      return t('Back')\n    case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\n      return t('Confirm transaction')\n    // Transfer flow\n    case SellingStage.TRANSFER:\n      return t('Back')\n    case SellingStage.CONFIRM_TRANSFER:\n      return t('Confirm transaction')\n    // Common\n    case SellingStage.TX_CONFIRMED:\n      return t('Transaction Confirmed')\n    default:\n      return ''\n  }\n}\n\nconst getToastText = (variant: string, stage: SellingStage, t: ContextApi['t']) => {\n  if (stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET) {\n    return t('Your NFT has been returned to your wallet')\n  }\n  if (stage === SellingStage.CONFIRM_TRANSFER) {\n    return t('Your NFT has been transferred to another wallet')\n  }\n  if (variant === 'sell') {\n    return t('Your NFT has been listed for sale!')\n  }\n  return t('Your NFT listing has been changed.')\n}\n\ninterface SellModalProps extends InjectedModalProps {\n  variant: 'sell' | 'edit'\n  nftToSell: NftToken\n}\n\nconst SellModal: React.FC<SellModalProps> = ({ variant, nftToSell, onDismiss }) => {\n  const [stage, setStage] = useState(variant === 'sell' ? SellingStage.SELL : SellingStage.EDIT)\n  const [price, setPrice] = useState(variant === 'sell' ? '' : nftToSell.marketData.currentAskPrice)\n  const [transferAddress, setTransferAddress] = useState('')\n  const [confirmedTxHash, setConfirmedTxHash] = useState('')\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { account } = useWeb3React()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const { toastSuccess } = useToast()\n  const collectionContract = useErc721CollectionContract(nftToSell.collectionAddress)\n  const nftMarketContract = useNftMarketContract()\n  const dispatch = useAppDispatch()\n\n  const isInvalidTransferAddress = transferAddress.length > 0 && !isAddress(transferAddress)\n\n  const { lowestPrice } = useGetLowestPriceFromNft(nftToSell)\n\n  const goBack = () => {\n    switch (stage) {\n      case SellingStage.SET_PRICE:\n        setStage(SellingStage.SELL)\n        break\n      case SellingStage.APPROVE_AND_CONFIRM_SELL:\n        setStage(SellingStage.SET_PRICE)\n        break\n      case SellingStage.ADJUST_PRICE:\n        setPrice(nftToSell.marketData.currentAskPrice)\n        setStage(SellingStage.EDIT)\n        break\n      case SellingStage.CONFIRM_ADJUST_PRICE:\n        setStage(SellingStage.ADJUST_PRICE)\n        break\n      case SellingStage.REMOVE_FROM_MARKET:\n        setStage(SellingStage.EDIT)\n        break\n      case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\n        setStage(SellingStage.REMOVE_FROM_MARKET)\n        break\n      case SellingStage.TRANSFER:\n        setStage(SellingStage.SELL)\n        break\n      case SellingStage.CONFIRM_TRANSFER:\n        setStage(SellingStage.TRANSFER)\n        break\n      default:\n        break\n    }\n  }\n\n  const continueToNextStage = () => {\n    switch (stage) {\n      case SellingStage.SELL:\n        setStage(SellingStage.SET_PRICE)\n        break\n      case SellingStage.SET_PRICE:\n        setStage(SellingStage.APPROVE_AND_CONFIRM_SELL)\n        break\n      case SellingStage.EDIT:\n        setStage(SellingStage.ADJUST_PRICE)\n        break\n      case SellingStage.ADJUST_PRICE:\n        setStage(SellingStage.CONFIRM_ADJUST_PRICE)\n        break\n      case SellingStage.REMOVE_FROM_MARKET:\n        setStage(SellingStage.CONFIRM_REMOVE_FROM_MARKET)\n        break\n      case SellingStage.TRANSFER:\n        setStage(SellingStage.CONFIRM_TRANSFER)\n        break\n      default:\n        break\n    }\n  }\n\n  const continueToRemoveFromMarketStage = () => {\n    setStage(SellingStage.REMOVE_FROM_MARKET)\n  }\n\n  const continueToTransferStage = () => {\n    setStage(SellingStage.TRANSFER)\n  }\n\n  const dispatchSuccessAction = () => {\n    switch (stage) {\n      // Remove from sale\n      case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\n        dispatch(\n          updateUserNft({\n            tokenId: nftToSell.tokenId,\n            collectionAddress: nftToSell.collectionAddress,\n            location: NftLocation.WALLET,\n          }),\n        )\n        break\n      // Transfer NFT\n      case SellingStage.CONFIRM_TRANSFER:\n        dispatch(\n          removeUserNft({\n            tokenId: nftToSell.tokenId,\n          }),\n        )\n        break\n      default:\n        // Modify listing OR list for sale\n        dispatch(\n          updateUserNft({\n            tokenId: nftToSell.tokenId,\n            collectionAddress: nftToSell.collectionAddress,\n            location: NftLocation.FORSALE,\n          }),\n        )\n        break\n    }\n  }\n\n  const { isApproving, isApproved, isConfirming, handleApprove, handleConfirm } = useApproveConfirmTransaction({\n    onRequiresApproval: async () => {\n      try {\n        const approvedForContract = await collectionContract.isApprovedForAll(account, nftMarketContract.address)\n        return approvedForContract\n      } catch (error) {\n        return false\n      }\n    },\n    onApprove: () => {\n      return callWithGasPrice(collectionContract, 'setApprovalForAll', [nftMarketContract.address, true])\n    },\n    onApproveSuccess: async ({ receipt }) => {\n      toastSuccess(\n        t('Contract approved - you can now put your NFT for sale!'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\n      )\n    },\n    onConfirm: () => {\n      if (stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET) {\n        return callWithGasPrice(nftMarketContract, 'cancelAskOrder', [nftToSell.collectionAddress, nftToSell.tokenId])\n      }\n      if (stage === SellingStage.CONFIRM_TRANSFER) {\n        return callWithGasPrice(collectionContract, 'safeTransferFrom(address,address,uint256)', [\n          account,\n          transferAddress,\n          nftToSell.tokenId,\n        ])\n      }\n      const methodName = variant === 'sell' ? 'createAskOrder' : 'modifyAskOrder'\n      const askPrice = parseUnits(price)\n      return callWithGasPrice(nftMarketContract, methodName, [nftToSell.collectionAddress, nftToSell.tokenId, askPrice])\n    },\n    onSuccess: async ({ receipt }) => {\n      toastSuccess(getToastText(variant, stage, t), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n      dispatchSuccessAction()\n      setConfirmedTxHash(receipt.transactionHash)\n      setStage(SellingStage.TX_CONFIRMED)\n    },\n  })\n\n  const showBackButton = stagesWithBackButton.includes(stage) && !isConfirming && !isApproving\n\n  return (\n    <StyledModal\n      title={modalTitles(stage, t)}\n      stage={stage}\n      onDismiss={onDismiss}\n      onBack={showBackButton ? goBack : null}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      {stage === SellingStage.SELL && (\n        <SellStage\n          nftToSell={nftToSell}\n          lowestPrice={lowestPrice}\n          continueToNextStage={continueToNextStage}\n          continueToTransferStage={continueToTransferStage}\n        />\n      )}\n      {stage === SellingStage.SET_PRICE && (\n        <SetPriceStage\n          nftToSell={nftToSell}\n          variant=\"set\"\n          continueToNextStage={continueToNextStage}\n          lowestPrice={lowestPrice}\n          price={price}\n          setPrice={setPrice}\n        />\n      )}\n      {stage === SellingStage.APPROVE_AND_CONFIRM_SELL && (\n        <ApproveAndConfirmStage\n          variant=\"sell\"\n          isApproved={isApproved}\n          isApproving={isApproving}\n          isConfirming={isConfirming}\n          handleApprove={handleApprove}\n          handleConfirm={handleConfirm}\n        />\n      )}\n      {stage === SellingStage.TX_CONFIRMED && <TransactionConfirmed txHash={confirmedTxHash} onDismiss={onDismiss} />}\n      {stage === SellingStage.EDIT && (\n        <EditStage\n          nftToSell={nftToSell}\n          lowestPrice={lowestPrice}\n          continueToAdjustPriceStage={continueToNextStage}\n          continueToRemoveFromMarketStage={continueToRemoveFromMarketStage}\n        />\n      )}\n      {stage === SellingStage.ADJUST_PRICE && (\n        <SetPriceStage\n          nftToSell={nftToSell}\n          variant=\"adjust\"\n          continueToNextStage={continueToNextStage}\n          currentPrice={nftToSell.marketData.currentAskPrice}\n          lowestPrice={lowestPrice}\n          price={price}\n          setPrice={setPrice}\n        />\n      )}\n      {stage === SellingStage.CONFIRM_ADJUST_PRICE && (\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\n      )}\n      {stage === SellingStage.REMOVE_FROM_MARKET && <RemoveStage continueToNextStage={continueToNextStage} />}\n      {stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET && (\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\n      )}\n      {stage === SellingStage.TRANSFER && (\n        <TransferStage\n          nftToSell={nftToSell}\n          lowestPrice={lowestPrice}\n          continueToNextStage={continueToNextStage}\n          transferAddress={transferAddress}\n          setTransferAddress={setTransferAddress}\n          isInvalidTransferAddress={isInvalidTransferAddress}\n        />\n      )}\n      {stage === SellingStage.CONFIRM_TRANSFER && (\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\n      )}\n    </StyledModal>\n  )\n}\n\nexport default SellModal\n","import React from 'react'\nimport { NoProfileAvatarIcon } from '@pancakeswap/uikit'\nimport { Profile } from 'state/types'\nimport styled from 'styled-components'\n\nexport interface ProfileAvatarProps {\n  profile: Profile\n}\n\nconst TeamAvatar = styled.img`\n  border: 1px solid ${({ theme }) => theme.card.background};\n  border-radius: 50%;\n  bottom: 0px;\n  position: absolute;\n  right: 0px;\n  min-width: 20px;\n  min-height: 20px;\n  width: 37.5%;\n  height: 37.5%;\n  z-index: 5;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    border-width: 2px;\n  }\n`\n\nconst AvatarWrapper = styled.div<{ bg: string }>`\n  background: url('${({ bg }) => bg}');\n  background-repeat: no-repeat;\n  background-size: cover;\n  border-radius: 50%;\n  position: relative;\n  width: 100%;\n  height: 100%;\n\n  & > img {\n    border-radius: 50%;\n  }\n`\n// TODO: replace with no profile avatar icon\nconst AvatarInactive = styled(NoProfileAvatarIcon)`\n  width: 100%;\n  height: 100%;\n`\n\nconst ProfileAvatarWithTeam: React.FC<ProfileAvatarProps> = ({ profile }) => {\n  return (\n    <AvatarWrapper bg={profile?.nft?.image.thumbnail}>\n      {!profile?.isActive && <AvatarInactive />}\n      <TeamAvatar src={`/images/teams/${profile?.team?.images?.alt}`} alt={profile?.team?.name} />\n    </AvatarWrapper>\n  )\n}\n\nexport default ProfileAvatarWithTeam\n","import { useEffect, useMemo } from 'react'\nimport isEmpty from 'lodash/isEmpty'\nimport { useAppDispatch } from 'state'\nimport { fetchUserNfts } from 'state/nftMarket/reducer'\nimport { useGetCollections, useUserNfts } from 'state/nftMarket/hooks'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport { useProfile } from 'state/profile/hooks'\nimport { NftLocation, UserNftInitializationState } from 'state/nftMarket/types'\nimport { useWeb3React } from '@web3-react/core'\n\nconst useFetchUserNfts = () => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const { profile, isInitialized: isProfileInitialized, isLoading: isProfileLoading } = useProfile()\n  const { userNftsInitializationState } = useUserNfts()\n  const collections = useGetCollections()\n\n  const hasProfileNft = profile?.tokenId\n  const profileNftTokenId = profile?.tokenId?.toString()\n  const profileNftCollectionAddress = profile?.collectionAddress\n\n  const profileNftWithCollectionAddress = useMemo(() => {\n    if (hasProfileNft) {\n      return {\n        tokenId: profileNftTokenId,\n        collectionAddress: profileNftCollectionAddress,\n        nftLocation: NftLocation.PROFILE,\n      }\n    }\n    return null\n  }, [profileNftTokenId, profileNftCollectionAddress, hasProfileNft])\n\n  const previousProfileNftTokenId = usePreviousValue(profileNftTokenId)\n\n  // Fetch on first load when profile fetch is resolved\n  const shouldFetch =\n    account &&\n    userNftsInitializationState === UserNftInitializationState.UNINITIALIZED &&\n    isProfileInitialized &&\n    !isProfileLoading\n\n  // Fetch on account / profile change, once profile fetch is resolved\n  const hasAccountSwitched = previousProfileNftTokenId !== profileNftTokenId && !isProfileLoading && account\n\n  useEffect(() => {\n    if ((shouldFetch || hasAccountSwitched) && !isEmpty(collections)) {\n      dispatch(fetchUserNfts({ account, collections, profileNftWithCollectionAddress }))\n    }\n  }, [\n    dispatch,\n    account,\n    shouldFetch,\n    hasAccountSwitched,\n    profileNftTokenId,\n    collections,\n    profileNftWithCollectionAddress,\n  ])\n}\n\nexport default useFetchUserNfts\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, Radio } from '@pancakeswap/uikit'\n\ninterface SelectionCardProps {\n  name: string\n  value: string | number\n  isChecked?: boolean\n  onChange: (val: any) => void\n  image: string\n  disabled?: boolean\n}\n\nconst Label = styled.label<{ isDisabled: boolean }>`\n  cursor: ${({ isDisabled }) => (isDisabled ? 'not-allowed' : 'pointer')};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  opacity: ${({ isDisabled }) => (isDisabled ? '0.6' : '1')};\n`\n\nconst Body = styled.div`\n  align-items: center;\n  display: flex;\n  flex-grow: 1;\n  height: 80px;\n  padding: 8px 16px;\n`\n\nconst Children = styled.div`\n  margin-left: 16px;\n`\n\nconst StyledBackgroundImage = styled.div<{ src: string }>`\n  align-self: stretch;\n  background-image: url('${({ src }) => src}');\n  background-size: contain;\n  background-position: center;\n  background-repeat: no-repeat;\n  flex: none;\n  width: 80px;\n`\n\nconst SelectionCard: React.FC<SelectionCardProps> = ({\n  name,\n  value,\n  isChecked = false,\n  image,\n  onChange,\n  disabled,\n  children,\n  ...props\n}) => {\n  return (\n    <Card isSuccess={isChecked} isDisabled={disabled} mb=\"16px\" {...props}>\n      <Label isDisabled={disabled}>\n        <Body>\n          <Radio\n            name={name}\n            checked={isChecked}\n            value={value}\n            onChange={(e) => onChange(e.target.value)}\n            disabled={disabled}\n            style={{ flex: 'none' }}\n          />\n          <Children>{children}</Children>\n        </Body>\n        <StyledBackgroundImage src={image} />\n      </Label>\n    </Card>\n  )\n}\n\nexport default SelectionCard\n","import styled from 'styled-components'\n\nexport const PageButtons = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 16px;\n  margin-bottom: 16px;\n`\n\nexport const Arrow = styled.div`\n  color: ${({ theme }) => theme.colors.primary};\n  padding: 0 20px;\n  :hover {\n    cursor: pointer;\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex, BunnyPlaceholderIcon, Skeleton, Text } from '@pancakeswap/uikit'\nimport truncateHash from 'utils/truncateHash'\nimport { FetchStatus } from 'config/constants/types'\nimport { useGetProfileAvatar } from 'state/profile/hooks'\nimport { Link } from 'react-router-dom'\nimport { nftsBaseUrl } from '../constants'\n\nconst Avatar = styled.img`\n  margin-right: 4px;\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    margin-right: 12px;\n  }\n`\n\nconst StyledFlex = styled(Flex)`\n  align-items: center;\n  transition: opacity 200ms ease-in;\n\n  &:hover {\n    opacity: 0.5;\n  }\n`\n\nconst ProfileCell: React.FC<{ accountAddress: string }> = ({ accountAddress }) => {\n  const { username, nft: profileNft, usernameFetchStatus, avatarFetchStatus } = useGetProfileAvatar(accountAddress)\n  const profileName = username || '-'\n\n  let sellerProfilePicComponent = <Skeleton width=\"32px\" height=\"32px\" mr={['4px', null, '12px']} />\n  if (avatarFetchStatus === FetchStatus.Fetched) {\n    if (profileNft?.image?.thumbnail) {\n      sellerProfilePicComponent = <Avatar src={profileNft?.image?.thumbnail} />\n    } else {\n      sellerProfilePicComponent = <BunnyPlaceholderIcon width=\"32px\" height=\"32px\" mr={['4px', null, '12px']} />\n    }\n  }\n\n  return (\n    <Link to={`${nftsBaseUrl}/profile/${accountAddress}`}>\n      <StyledFlex>\n        {sellerProfilePicComponent}\n        <Box display=\"inline\">\n          <Text lineHeight=\"1.25\">{truncateHash(accountAddress)}</Text>\n          {usernameFetchStatus !== FetchStatus.Fetched ? <Skeleton /> : <Text lineHeight=\"1.25\">{profileName}</Text>}\n        </Box>\n      </StyledFlex>\n    </Link>\n  )\n}\n\nexport default ProfileCell\n","import { useReducer } from 'react'\n\nexport enum Views {\n  START = 'start',\n  CHANGE = 'change',\n  REMOVE = 'remove',\n  APPROVE = 'approve',\n}\n\nexport type Actions =\n  | {\n      type: 'set_view'\n      view: Views\n    }\n  | {\n      type: 'go_previous'\n    }\n\nexport interface State {\n  currentView: Views\n  previousView: Views | null\n}\n\nconst reducer = (state: State, action: Actions): State => {\n  switch (action.type) {\n    case 'set_view':\n      return {\n        ...state,\n        currentView: action.view,\n        previousView: state.currentView,\n      }\n    case 'go_previous':\n      return {\n        ...state,\n        currentView: state.previousView,\n        previousView: state.currentView,\n      }\n    default:\n      return state\n  }\n}\n\nexport interface UseEditProfileResponse extends State {\n  goToStart: () => void\n  goToChange: () => void\n  goToApprove: () => void\n  goToRemove: () => void\n  goPrevious: () => void\n}\n\nconst useEditProfile = (): UseEditProfileResponse => {\n  const [state, dispatch] = useReducer(reducer, {\n    currentView: Views.START,\n    previousView: null,\n  })\n\n  const goToStart = () => dispatch({ type: 'set_view', view: Views.START })\n  const goToChange = () => dispatch({ type: 'set_view', view: Views.CHANGE })\n  const goToRemove = () => dispatch({ type: 'set_view', view: Views.REMOVE })\n  const goToApprove = () => dispatch({ type: 'set_view', view: Views.APPROVE })\n  const goPrevious = () => dispatch({ type: 'go_previous' })\n\n  return { ...state, goToStart, goToChange, goToRemove, goToApprove, goPrevious }\n}\n\nexport default useEditProfile\n","import { useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport { useTranslation } from 'contexts/Localization'\nimport { multicallv2 } from 'utils/multicall'\nimport profileABI from 'config/abi/gladiatorProfile.json'\nimport { getGladiatorProfileAddress } from 'utils/addressHelpers'\nimport useToast from 'hooks/useToast'\n\nconst useGetProfileCosts = () => {\n  const { t } = useTranslation()\n  const [isLoading, setIsLoading] = useState(true)\n  const [costs, setCosts] = useState({\n    numberNrtToReactivate: ethers.BigNumber.from(0),\n    numberNrtToRegister: ethers.BigNumber.from(0),\n    numberNrtToUpdate: ethers.BigNumber.from(0),\n  })\n  const { toastError } = useToast()\n\n  useEffect(() => {\n    const fetchCosts = async () => {\n      try {\n        const calls = ['numberNrtToReactivate', 'numberNrtToRegister', 'numberNrtToUpdate'].map((method) => ({\n          address: getGladiatorProfileAddress(),\n          name: method,\n        }))\n        const [[numberNrtToReactivate], [numberNrtToRegister], [numberNrtToUpdate]] = await multicallv2<\n          [[ethers.BigNumber], [ethers.BigNumber], [ethers.BigNumber]]\n        >(profileABI, calls)\n\n        setCosts({\n          numberNrtToReactivate,\n          numberNrtToRegister,\n          numberNrtToUpdate,\n        })\n        setIsLoading(false)\n      } catch (error) {\n        toastError(t('Error'), t('Could not retrieve NRT costs for profile'))\n      }\n    }\n\n    fetchCosts()\n  }, [setCosts, toastError, t])\n\n  return { costs, isLoading }\n}\n\nexport default useGetProfileCosts\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, Flex, Text, InjectedModalProps } from '@pancakeswap/uikit'\nimport { formatBigNumber } from 'utils/formatBalance'\nimport { getGladiatorProfileAddress } from 'utils/addressHelpers'\nimport { useNrt } from 'hooks/useContract'\nimport { useGetNrtBalance } from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport useGetProfileCosts from 'views/Nft/market/Profile/hooks/useGetProfileCosts'\nimport { FetchStatus } from 'config/constants/types'\nimport { useProfile } from 'state/profile/hooks'\nimport ProfileAvatarWithTeam from 'components/ProfileAvatarWithTeam'\nimport { UseEditProfileResponse } from './reducer'\n\ninterface StartPageProps extends InjectedModalProps {\n  goToChange: UseEditProfileResponse['goToChange']\n  goToRemove: UseEditProfileResponse['goToRemove']\n  goToApprove: UseEditProfileResponse['goToApprove']\n}\n\nconst DangerOutline = styled(Button).attrs({ variant: 'secondary' })`\n  border-color: ${({ theme }) => theme.colors.failure};\n  color: ${({ theme }) => theme.colors.failure};\n  margin-bottom: 24px;\n\n  &:hover:not(:disabled):not(.button--disabled):not(:active) {\n    border-color: ${({ theme }) => theme.colors.failure};\n    opacity: 0.8;\n  }\n`\n\nconst AvatarWrapper = styled.div`\n  height: 64px;\n  width: 64px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 128px;\n    width: 128px;\n  }\n`\n\nconst StartPage: React.FC<StartPageProps> = ({ goToApprove, goToChange, goToRemove, onDismiss }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const nrtContract = useNrt()\n  const { profile } = useProfile()\n  const { balance: nrtBalance, fetchStatus } = useGetNrtBalance()\n  const {\n    costs: { numberNrtToUpdate, numberNrtToReactivate },\n    isLoading: isProfileCostsLoading,\n  } = useGetProfileCosts()\n  const [needsApproval, setNeedsApproval] = useState(null)\n  const minimumNrtRequired = profile.isActive ? numberNrtToUpdate : numberNrtToReactivate\n  const hasMinimumCakeRequired = fetchStatus === FetchStatus.Fetched && nrtBalance.gte(minimumNrtRequired)\n\n  /**\n   * Check if the wallet has the required NRT allowance to change their profile pic or reactivate\n   * If they don't, we send them to the approval screen first\n   */\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      const response = await nrtContract.allowance(account, getGladiatorProfileAddress())\n      setNeedsApproval(response.lt(minimumNrtRequired))\n    }\n\n    if (account && !isProfileCostsLoading) {\n      checkApprovalStatus()\n    }\n  }, [account, minimumNrtRequired, setNeedsApproval, nrtContract, isProfileCostsLoading])\n\n  if (!profile) {\n    return null\n  }\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\n      <AvatarWrapper>\n        <ProfileAvatarWithTeam profile={profile} />\n      </AvatarWrapper>\n      <Flex alignItems=\"center\" style={{ height: '48px' }} justifyContent=\"center\">\n        <Text as=\"p\" color=\"failure\">\n          {!isProfileCostsLoading &&\n            !hasMinimumCakeRequired &&\n            t('%minimum% NRT required to change profile pic', { minimum: formatBigNumber(minimumNrtRequired) })}\n        </Text>\n      </Flex>\n      {profile.isActive ? (\n        <>\n          <Button\n            width=\"100%\"\n            mb=\"8px\"\n            onClick={needsApproval === true ? goToApprove : goToChange}\n            disabled={isProfileCostsLoading || !hasMinimumCakeRequired || needsApproval === null}\n          >\n            {t('Change Profile Pic')}\n          </Button>\n          <DangerOutline width=\"100%\" onClick={goToRemove}>\n            {t('Remove Profile Pic')}\n          </DangerOutline>\n        </>\n      ) : (\n        <Button\n          width=\"100%\"\n          mb=\"8px\"\n          onClick={needsApproval === true ? goToApprove : goToChange}\n          disabled={isProfileCostsLoading || !hasMinimumCakeRequired || needsApproval === null}\n        >\n          {t('Reactivate Profile')}\n        </Button>\n      )}\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss}>\n        {t('Close Window')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default StartPage\n","import React, { useState } from 'react'\nimport { AutoRenewIcon, Button, Checkbox, Flex, InjectedModalProps, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useGetProfileCosts from 'views/Nft/market/Profile/hooks/useGetProfileCosts'\nimport { useAppDispatch } from 'state'\nimport { useProfile } from 'state/profile/hooks'\nimport { fetchProfile } from 'state/profile'\nimport useToast from 'hooks/useToast'\nimport { formatBigNumber } from 'utils/formatBalance'\nimport { useProfileContract } from 'hooks/useContract'\nimport { useWeb3React } from '@web3-react/core'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { ToastDescriptionWithTx } from 'components/Toast'\n\ntype PauseProfilePageProps = InjectedModalProps\n\nconst PauseProfilePage: React.FC<PauseProfilePageProps> = ({ onDismiss }) => {\n  const [isAcknowledged, setIsAcknowledged] = useState(false)\n  const [isConfirming, setIsConfirming] = useState(false)\n  const { profile } = useProfile()\n  const {\n    costs: { numberNrtToReactivate },\n  } = useGetProfileCosts()\n  const { t } = useTranslation()\n  const pancakeProfileContract = useProfileContract()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const { account } = useWeb3React()\n  const { toastSuccess, toastError } = useToast()\n  const dispatch = useAppDispatch()\n\n  const handleChange = () => setIsAcknowledged(!isAcknowledged)\n\n  const handleDeactivateProfile = async () => {\n    const tx = await callWithGasPrice(pancakeProfileContract, 'pauseProfile')\n    toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\n    setIsConfirming(true)\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      // Re-fetch profile\n      await dispatch(fetchProfile(account))\n      toastSuccess(t('Profile Paused!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n      onDismiss()\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setIsConfirming(false)\n    }\n  }\n\n  if (!profile) {\n    return null\n  }\n\n  return (\n    <>\n      <Text as=\"p\" color=\"failure\" mb=\"24px\">\n        {t('This will suspend your profile and send your Collectible back to your wallet')}\n      </Text>\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n        {t(\n          \"While your profile is suspended, you won't be able to earn points, but your achievements and points will stay associated with your profile\",\n        )}\n      </Text>\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n        {t('Cost to reactivate in the future: %cost% NRT', { cost: formatBigNumber(numberNrtToReactivate) })}\n      </Text>\n      <label htmlFor=\"acknowledgement\" style={{ cursor: 'pointer', display: 'block', marginBottom: '24px' }}>\n        <Flex alignItems=\"center\">\n          <Checkbox id=\"acknowledgement\" checked={isAcknowledged} onChange={handleChange} scale=\"sm\" />\n          <Text ml=\"8px\">{t('I understand')}</Text>\n        </Flex>\n      </label>\n      <Button\n        width=\"100%\"\n        isLoading={isConfirming}\n        endIcon={isConfirming ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        disabled={!isAcknowledged || isConfirming}\n        onClick={handleDeactivateProfile}\n        mb=\"8px\"\n      >\n        {t('Confirm')}\n      </Button>\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss}>\n        {t('Close Window')}\n      </Button>\n    </>\n  )\n}\n\nexport default PauseProfilePage\n","import React, { useState } from 'react'\nimport { Button, Box, InjectedModalProps, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { useProfile } from 'state/profile/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { fetchProfile } from 'state/profile'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { getErc721Contract } from 'utils/contractHelpers'\nimport { useProfileContract } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { getGladiatorProfileAddress } from 'utils/addressHelpers'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport ApproveConfirmButtons from 'components/ApproveConfirmButtons'\nimport SelectionCard from 'views/ProfileCreation/SelectionCard'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport { NftLocation } from 'state/nftMarket/types'\n\ntype ChangeProfilePicPageProps = InjectedModalProps\n\nconst ChangeProfilePicPage: React.FC<ChangeProfilePicPageProps> = ({ onDismiss }) => {\n  const [selectedNft, setSelectedNft] = useState({\n    tokenId: null,\n    collectionAddress: null,\n  })\n  const { t } = useTranslation()\n  const { nfts } = useUserNfts()\n  const dispatch = useAppDispatch()\n  const { profile } = useProfile()\n  const profileContract = useProfileContract()\n  const { account, library } = useWeb3React()\n  const { toastSuccess } = useToast()\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  const nftsInWallet = nfts.filter((nft) => nft.location === NftLocation.WALLET)\n\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\n    useApproveConfirmTransaction({\n      onApprove: () => {\n        const contract = getErc721Contract(selectedNft.collectionAddress, library.getSigner())\n        return callWithGasPrice(contract, 'approve', [getGladiatorProfileAddress(), selectedNft.tokenId])\n      },\n      onConfirm: () => {\n        if (!profile.isActive) {\n          return callWithGasPrice(profileContract, 'reactivateProfile', [\n            selectedNft.collectionAddress,\n            selectedNft.tokenId,\n          ])\n        }\n\n        return callWithGasPrice(profileContract, 'updateProfile', [selectedNft.collectionAddress, selectedNft.tokenId])\n      },\n      onSuccess: async ({ receipt }) => {\n        // Re-fetch profile\n        await dispatch(fetchProfile(account))\n        toastSuccess(t('Profile Updated!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n\n        onDismiss()\n      },\n    })\n\n  return (\n    <>\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n        {t('Choose a new Collectible to use as your profile pic.')}\n      </Text>\n      <Box maxHeight=\"300px\" overflowY=\"scroll\">\n        {nftsInWallet.map((walletNft) => {\n          const handleChange = () => {\n            setSelectedNft({\n              tokenId: walletNft.tokenId,\n              collectionAddress: walletNft.collectionAddress,\n            })\n          }\n          return (\n            <SelectionCard\n              name=\"profilePicture\"\n              key={`${walletNft.collectionAddress}#${walletNft.tokenId}`}\n              value={walletNft.tokenId}\n              image={walletNft.image.thumbnail}\n              isChecked={walletNft.tokenId === selectedNft.tokenId}\n              onChange={handleChange}\n              disabled={isApproving || isConfirming || isConfirmed}\n            >\n              <Text bold>{walletNft.name}</Text>\n            </SelectionCard>\n          )\n        })}\n      </Box>\n      {nfts.length === 0 && (\n        <>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"16px\">\n            {t('Sorry! You don’t have any eligible Collectibles in your wallet to use!')}\n          </Text>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t('Make sure you have a Pancake Collectible in your wallet and try again!')}\n          </Text>\n        </>\n      )}\n      <ApproveConfirmButtons\n        isApproveDisabled={isConfirmed || isConfirming || isApproved || selectedNft.tokenId === null}\n        isApproving={isApproving}\n        isConfirmDisabled={!isApproved || isConfirmed || selectedNft.tokenId === null}\n        isConfirming={isConfirming}\n        onApprove={handleApprove}\n        onConfirm={handleConfirm}\n      />\n      <Button mt=\"8px\" variant=\"text\" width=\"100%\" onClick={onDismiss} disabled={isApproving || isConfirming}>\n        {t('Close Window')}\n      </Button>\n    </>\n  )\n}\n\nexport default ChangeProfilePicPage\n","import React, { useState } from 'react'\nimport { AutoRenewIcon, Button, Flex, InjectedModalProps, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useNrt } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport { useProfile } from 'state/profile/hooks'\nimport { getGladiatorProfileAddress } from 'utils/addressHelpers'\nimport { formatBigNumber } from 'utils/formatBalance'\nimport useGetProfileCosts from 'views/Nft/market/Profile/hooks/useGetProfileCosts'\nimport { UseEditProfileResponse } from './reducer'\n\ninterface ApproveNrtPageProps extends InjectedModalProps {\n  goToChange: UseEditProfileResponse['goToChange']\n}\n\nconst ApproveNrtPage: React.FC<ApproveNrtPageProps> = ({ goToChange, onDismiss }) => {\n  const [isApproving, setIsApproving] = useState(false)\n  const { profile } = useProfile()\n  const { t } = useTranslation()\n  const {\n    costs: { numberNrtToUpdate, numberNrtToReactivate },\n  } = useGetProfileCosts()\n  const nrtContract = useNrt()\n  const { toastError } = useToast()\n  const cost = profile.isActive ? numberNrtToUpdate : numberNrtToReactivate\n\n  const handleApprove = async () => {\n    const tx = await nrtContract.approve(getGladiatorProfileAddress(), cost.mul(2).toString())\n    setIsApproving(true)\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      goToChange()\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setIsApproving(false)\n    }\n  }\n\n  if (!profile) {\n    return null\n  }\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\n        <Text>{profile.isActive ? t('Cost to update:') : t('Cost to reactivate:')}</Text>\n        <Text>{formatBigNumber(cost)} CAKE</Text>\n      </Flex>\n      <Button\n        disabled={isApproving}\n        isLoading={isApproving}\n        endIcon={isApproving ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        width=\"100%\"\n        mb=\"8px\"\n        onClick={handleApprove}\n      >\n        {t('Enable')}\n      </Button>\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss} disabled={isApproving}>\n        {t('Close Window')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default ApproveNrtPage\n","import React from 'react'\nimport { InjectedModalProps, Modal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { ContextApi } from 'contexts/Localization/types'\nimport useEditProfile, { Views } from './reducer'\nimport StartView from './StartView'\nimport PauseProfileView from './PauseProfileView'\nimport ChangeProfilePicView from './ChangeProfilePicView'\nimport ApproveNrtView from './ApproveNrtView'\n\ntype EditProfileModalProps = InjectedModalProps\n\nconst viewTitle = (t: ContextApi['t'], currentView: Views) => {\n  switch (currentView) {\n    case Views.START:\n      return t('Edit Profile')\n    case Views.CHANGE:\n      return t('Change Profile Pic')\n    case Views.REMOVE:\n      return t('Remove Profile Pic')\n    case Views.APPROVE:\n      return t('Enable NRT')\n    default:\n      return ''\n  }\n}\n\nconst EditProfileModal: React.FC<EditProfileModalProps> = ({ onDismiss }) => {\n  const { currentView, goToChange, goToRemove, goToApprove, goPrevious } = useEditProfile()\n  const { t } = useTranslation()\n\n  const isStartView = currentView === Views.START\n  const handleBack = isStartView ? null : () => goPrevious()\n\n  return (\n    <Modal title={viewTitle(t, currentView)} onBack={handleBack} onDismiss={onDismiss} hideCloseButton={!isStartView}>\n      <div style={{ maxWidth: '400px' }}>\n        {currentView === Views.START && (\n          <StartView goToApprove={goToApprove} goToChange={goToChange} goToRemove={goToRemove} onDismiss={onDismiss} />\n        )}\n        {currentView === Views.REMOVE && <PauseProfileView onDismiss={onDismiss} />}\n        {currentView === Views.CHANGE && <ChangeProfilePicView onDismiss={onDismiss} />}\n        {currentView === Views.APPROVE && <ApproveNrtView goToChange={goToChange} onDismiss={onDismiss} />}\n      </div>\n    </Modal>\n  )\n}\n\nexport default EditProfileModal\n"],"sourceRoot":""}