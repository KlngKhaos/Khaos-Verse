{"version":3,"sources":["views/Nft/market/components/GridPlaceholder.tsx","views/Nft/market/components/MarketPageHeader.tsx","views/Nft/market/components/StatBox.tsx","views/Nft/market/components/BannerHeader/AvatarImage.tsx","views/Nft/market/components/MarketPageTitle.tsx","views/Nft/market/components/BaseSubMenu.tsx","views/Nft/market/components/BannerHeader/BannerImage.tsx","views/Nft/market/components/BannerHeader/index.tsx","views/Teams/components/IconStatBox.tsx","utils/sentry.ts","views/Nft/market/ActivityHistory/utils/fetchActivityNftMetadata.tsx","views/Nft/market/Profile/components/EditProfileAvatar.tsx","views/Nft/market/Profile/components/ProfileHeader.tsx","views/Nft/market/Profile/components/TabMenu.tsx","views/Nft/market/Profile/components/Achievements/AchievementAvatar.tsx","views/Nft/market/Profile/components/Achievements/AchievementTitle.tsx","views/Nft/market/Profile/components/Achievements/AchievementDescription.tsx","views/Nft/market/Profile/components/Achievements/AchievementCard.tsx","views/Nft/market/Profile/components/Achievements/AchievementsList.tsx","views/Nft/market/Profile/components/Achievements/AchievementRow/PointsLabel.tsx","views/Nft/market/Profile/components/Achievements/AchievementRow/index.tsx","views/Nft/market/Profile/components/Achievements/ClaimPointsCallout.tsx","views/Nft/market/Profile/components/Achievements/index.tsx","views/Nft/market/Profile/utils/sortUserActivity.tsx","views/Nft/market/Profile/components/ActivityHistory/index.tsx","views/Nft/market/Profile/components/SubMenu.tsx","views/Nft/market/Profile/components/UserNfts.tsx","views/Nft/market/Profile/ConnectedProfile.tsx","state/achievements/hooks.ts","views/Nft/market/Profile/hooks/useNftsForAddress.tsx","views/Nft/market/Profile/components/UnconnectedProfileNfts.tsx","views/Nft/market/Profile/UnconnectedProfile.tsx","views/Nft/market/Profile/index.tsx"],"names":["GridPlaceholderItem","props","height","mb","width","GridPlaceholder","numItems","gridGap","gridTemplateColumns","times","map","itemKey","Background","styled","PageHeader","MarketPageHeader","StatBoxItem","title","stat","fontSize","color","textAlign","mx","fontWeight","StatBox","Flex","theme","radii","card","AvatarImage","div","attrs","alt","src","borderColor","MarketPageTitle","description","children","alignItems","as","scale","BaseSubMenu","SubMenuItems","colors","cardBorder","StyledBannerImage","mediaQueries","sm","md","BannerHeader","bannerImage","bannerAlt","avatar","flexDirection","position","pb","BannerImage","bottom","left","SecondaryCard","Text","tertiary","defaultProps","p","IconStatBox","Icon","icon","subtitle","isDisabled","mr","textTransform","bold","logError","error","Error","Sentry","maybeError","message","String","stack","code","name","assignError","console","fetchActivityNftMetadata","activities","a","some","activity","nft","collection","id","toLowerCase","gladiatorCollectiblesAddress","getNftsFromCollectionApi","bunniesMetadata","pbNfts","filter","collectionName","data","otherId","tokenId","attributes","traitType","value","collectionAddress","activityNftTokenIds","uniqBy","getNftsFromDifferentCollectionsApi","nfts","concat","EditOverlay","StyledEditProfileAvatar","EditProfileAvatar","useModal","EditProfileModal","onEditProfileModal","onClick","StyledIconButton","IconButton","ProfileHeader","accountPath","profile","achievements","nftCollected","isAchievementsLoading","isNftLoading","isProfileLoading","t","useTranslation","account","useWeb3React","isConnectedAccount","numNftCollected","formatNumber","numPoints","points","numAchievements","length","avatarImage","image","thumbnail","imagePath","teamId","getBannerImage","display","target","href","getBscScanLink","username","truncateHash","external","mt","to","Tab","button","$active","secondary","textSubtle","TabMenu","accountAddress","useParams","pathname","useLocation","useState","includes","achievementsActive","setIsAchievementsActive","useEffect","RouterLink","nftsBaseUrl","NoBadgePlaceholder","BunnyPlaceholderIcon","StyledAchievementAvatar","img","AchievementAvatar","badge","AchievementTitle","key","Description","AchievementDescription","Details","AchievementCard","achievement","toLocaleString","Grid","AchievementsList","isLoading","isMobile","useMatchBreakpoints","justifyContent","style","PointsLabel","localePoints","num","ActionColumn","StyledAchievementRow","Body","AchievementRow","onCollectSuccess","isCollecting","setIsCollecting","pointCenterContract","usePointCenterIfoContract","useToast","toastError","toastSuccess","callWithGasPrice","useCallWithGasPrice","handleCollectPoints","address","tx","Toast","txHash","hash","wait","receipt","status","transactionHash","px","endIcon","spin","disabled","variant","ClaimPointsCallout","claimableAchievements","setClaimableAchievement","dispatch","useAppDispatch","useProfile","getClaimableIfoData","ifoData","fetchIfoClaims","handleCollectSuccess","addAchievement","addPoints","prevClaimableAchievements","prevClaimableAchievement","isActive","totalPointsToCollect","sumBy","Achievements","PrizeIcon","sortUserActivity","userActivity","askOrderHistory","buyTradeHistory","sellTradeHistory","transformTransactions","transactions","transaction","userSeller","seller","marketEvent","MarketEvent","SELL","BUY","timestamp","price","askPrice","otherParty","buyer","allActivity","askOrder","orderType","AskOrderType","CANCEL","MODIFY","NEW","getAskOrderEvent","sort","activityItem1","activityItem2","timestamp1","ethers","BigNumber","from","sub","toNumber","ActivityHistory","useTheme","currentPage","setCurrentPage","maxPage","setMaxPages","activitiesSlice","setActivitiesSlice","nftMetadata","setNftMetadata","sortedUserActivities","setSortedUserActivities","setIsLoading","useUserNfts","bnbBusdPrice","useBNBBusdPrice","isXs","isSm","initializationState","UserNftInitializationState","INITIALIZED","isAddress","toLocaleLowerCase","fetchAddressActivity","getUserActivity","addressActivity","fetchUserActivity","fetchNftMetadata","max","Math","ceil","getMaxPages","slice","getActivitySlice","overflowX","TableLoader","nftMeta","find","metaNft","ActivityRow","isUserActivity","borderTop","pt","page","NoNftsImage","SubMenuComponent","ItemsConfig","label","items","activeItem","UserNfts","userNftsInitializationState","location","clickedProfileNft","setClickedProfileNft","clickedSellNft","setClickedSellNft","ProfileNftModal","onPresentProfileNftModal","SellModal","nftToSell","onPresentSellModal","marketData","isUserNft","NftLocation","PROFILE","WALLET","FORSALE","handleCollectibleClick","currentAskPrice","isTradable","parseFloat","nftLocation","TabMenuWrapper","Box","ConnectedProfile","useSelector","state","achievementFetchStatus","userNfts","fetchAchievements","useFetchAchievements","useFetchUserNfts","background","FetchStatus","Fetched","Page","minHeight","path","SubMenu","exact","useNftsForAddress","isProfileFetching","combinedNfts","setCombinedNfts","collections","useGetCollections","hasProfileNft","profileNftTokenId","toString","profileNftCollectionAddress","profileNftWithCollectionAddress","useMemo","getNfts","getCompleteAccountNftData","completeNftData","isEmpty","UnconnectedProfile","useProfileForAddress","profileHookState","isFetching","useAchievementsForAddress","isAchievementFetching","UnconnectedProfileNfts","NftProfile","isConnectedProfile","maxWidth"],"mappings":"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","file":"static/js/23.37c0b45f.chunk.js","sourcesContent":["import React from 'react'\nimport { Box, BoxProps, Grid, GridProps, Skeleton } from '@pancakeswap/uikit'\nimport times from 'lodash/times'\n\ninterface GridPlaceholderProps extends GridProps {\n  numItems?: number\n}\n\nexport const GridPlaceholderItem: React.FC<BoxProps> = (props) => (\n  <Box {...props}>\n    <Skeleton height=\"258px\" mb=\"8px\" />\n    <Skeleton width=\"30%\" mb=\"4px\" />\n    <Skeleton width=\"45%\" mb=\"16px\" />\n    <Skeleton />\n  </Box>\n)\n\nconst GridPlaceholder: React.FC<GridPlaceholderProps> = ({ numItems = 12, ...props }) => (\n  <Grid gridGap=\"16px\" gridTemplateColumns={['1fr', null, null, 'repeat(4, 1fr)']} {...props}>\n    {times(numItems).map((itemKey) => (\n      <GridPlaceholderItem key={itemKey} />\n    ))}\n  </Grid>\n)\n\nexport default GridPlaceholder\n","import React from 'react'\nimport styled from 'styled-components'\nimport PageHeader, { PageHeaderProps } from 'components/PageHeader'\n\nconst Background = styled(PageHeader)`\n  background-image: url(/images/decorations/BG.png);\n  background-position: center;\n  object-fit: cover;\n`\n\nconst MarketPageHeader: React.FC<PageHeaderProps> = (props) => {\n  return <Background {...props} />\n}\n\nexport default MarketPageHeader\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, BoxProps, Flex, Skeleton, Text } from '@pancakeswap/uikit'\n\nexport interface StatBoxItemProps extends BoxProps {\n  title: string\n  stat: string\n}\n\nexport const StatBoxItem: React.FC<StatBoxItemProps> = ({ title, stat, ...props }) => (\n  <Box {...props}>\n    <Text fontSize=\"12px\" color=\"#D9AB3A\" textAlign=\"center\">\n      {title}\n    </Text>\n    {stat === null ? (\n      <Skeleton height=\"24px\" width=\"50%\" mx=\"auto\" />\n    ) : (\n      <Text fontWeight=\"600\" textAlign=\"center\">\n        {stat}\n      </Text>\n    )}\n  </Box>\n)\n\nconst StatBox = styled(Flex)`\n  align-items: center;\n  background: #000;\n  border: 1px solid #D9AB3A;\n  border-radius: ${({ theme }) => theme.radii.card};\n  justify-content: space-around;\n  padding: 8px;\n  width: 100%;\n`\n\nexport default StatBox\n","import styled from 'styled-components'\n\ninterface AvatarImageProps {\n  src: string\n  borderColor?: string\n  alt?: string\n}\n\nconst AvatarImage = styled.div.attrs<AvatarImageProps>(({ alt }) => ({\n  alt,\n}))<AvatarImageProps>`\n  background: url('${({ src }) => src}');\n  background-repeat: no-repeat;\n  background-size: cover;\n  border-radius: 50%;\n  position: relative;\n  width: 96px;\n  height: 96px;\n  border: 4px ${({ borderColor }) => borderColor || '#f2ecf2'} solid;\n\n  & > img {\n    border-radius: 50%;\n  }\n`\n\nexport default AvatarImage\n","import React, { ReactNode } from 'react'\nimport { Box, Grid, GridProps, Heading } from '@pancakeswap/uikit'\n\ninterface MarketPageTitleProps extends GridProps {\n  title: string\n  description?: ReactNode\n}\n\nconst MarketPageTitle: React.FC<MarketPageTitleProps> = ({ title, description, children, ...props }) => (\n  <Grid gridGap=\"16px\" alignItems=\"center\" gridTemplateColumns={['1fr', null, null, null, 'repeat(2, 1fr)']} {...props}>\n    <Box>\n      <Heading as=\"h1\" scale=\"xl\" color=\"secondary\" mb=\"16px\">\n        {title}\n      </Heading>\n      {description}\n    </Box>\n    <Box>{children}</Box>\n  </Grid>\n)\n\nexport default MarketPageTitle\n","import { SubMenuItems } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst BaseSubMenu = styled(SubMenuItems)`\n  background-color: transparent;\n  border-bottom: 1px ${({ theme }) => theme.colors.cardBorder} solid;\n`\n\nexport default BaseSubMenu\n","import styled from 'styled-components'\n\ninterface StyledBannerImageProps {\n  src: string\n  alt?: string\n}\n\nconst StyledBannerImage = styled.div.attrs<StyledBannerImageProps>(({ alt }) => ({\n  alt,\n}))<StyledBannerImageProps>`\n  ${({ src, theme }) => (src ? `background-image: url('${src}')` : `background-color: ${theme.colors.cardBorder}`)};\n  background-image: url('${({ src }) => src}');\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  flex: none;\n  width: 100%;\n  border-radius: 32px;\n  height: 123px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 192px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    height: 256px;\n  }\n`\n\nexport default StyledBannerImage\n","import React, { ReactNode } from 'react'\nimport { Flex, Box, FlexProps } from '@pancakeswap/uikit'\nimport BannerImage from './BannerImage'\n\ninterface BannerHeaderProps extends FlexProps {\n  bannerImage: string\n  bannerAlt?: string\n  avatar?: ReactNode\n}\n\nconst BannerHeader: React.FC<BannerHeaderProps> = ({ bannerImage, bannerAlt, avatar, children, ...props }) => {\n  return (\n    <Flex flexDirection=\"column\" mb=\"24px\" {...props}>\n      <Box position=\"relative\" pb=\"56px\">\n        <BannerImage src={bannerImage} alt={bannerAlt} />\n        <Box position=\"absolute\" bottom={0} left={-4}>\n          <Flex alignItems=\"flex-end\">\n            {avatar}\n            {children}\n          </Flex>\n        </Box>\n      </Box>\n    </Flex>\n  )\n}\n\nexport default BannerHeader\n","import React, { ElementType, ReactNode } from 'react'\nimport { Flex, Heading, Text, TextProps } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst SecondaryCard = styled(Text)`\n  border: 2px solid ${({ theme }) => theme.colors.tertiary};\n  border-radius: 16px;\n`\n\nSecondaryCard.defaultProps = {\n  p: '24px',\n}\n\ninterface IconStatBoxProps extends TextProps {\n  icon: ElementType\n  title: ReactNode\n  subtitle: ReactNode\n  isDisabled?: boolean\n}\n\nconst IconStatBox: React.FC<IconStatBoxProps> = ({ icon: Icon, title, subtitle, isDisabled = false, ...props }) => {\n  return (\n    <SecondaryCard {...props}>\n      <Flex alignItems=\"start\">\n        <Icon width=\"44px\" mr=\"24px\" color={isDisabled ? 'textDisabled' : 'currentColor'} />\n        <div>\n          <Heading as=\"h3\" scale=\"xl\" color={isDisabled ? 'textDisabled' : 'text'}>\n            {title}\n          </Heading>\n          <Text textTransform=\"uppercase\" color={isDisabled ? 'textDisabled' : 'textSubtle'} fontSize=\"12px\" bold>\n            {subtitle}\n          </Text>\n        </div>\n      </Flex>\n    </SecondaryCard>\n  )\n}\n\nexport default IconStatBox\n","import * as Sentry from '@sentry/react'\n\nconst assignError = (maybeError: any) => {\n  if (typeof maybeError === 'string') {\n    return new Error(maybeError)\n  }\n  if (typeof maybeError === 'object') {\n    const error = new Error(maybeError?.message ?? String(maybeError))\n    if (maybeError?.stack) {\n      error.stack = maybeError.stack\n    }\n    if (maybeError?.code) {\n      error.name = maybeError.code\n    }\n    return error\n  }\n  return maybeError\n}\n\nexport const isUserRejected = (err) => {\n  // provider user rejected error code\n  return typeof err === 'object' && 'code' in err && err.code === 4001\n}\n\nexport const logError = (error: Error | unknown) => {\n  if (error instanceof Error) {\n    Sentry.captureException(error)\n  } else {\n    Sentry.captureException(assignError(error), error)\n  }\n  console.error(error)\n}\n","import { Activity, NftToken, TokenIdWithCollectionAddress } from 'state/nftMarket/types'\nimport { getNftsFromCollectionApi, getNftsFromDifferentCollectionsApi } from 'state/nftMarket/helpers'\nimport { uniqBy } from 'lodash'\nimport { gladiatorCollectiblesAddress } from '../../constants'\n\nexport const fetchActivityNftMetadata = async (activities: Activity[]): Promise<NftToken[]> => {\n  const hasPBCollections = activities.some(\n    (activity) => activity.nft.collection.id.toLowerCase() === gladiatorCollectiblesAddress.toLowerCase(),\n  )\n  let bunniesMetadata\n  if (hasPBCollections) {\n    bunniesMetadata = await getNftsFromCollectionApi(gladiatorCollectiblesAddress)\n  }\n\n  const pbNfts = activities\n    .filter((activity) => activity.nft.collection.id.toLowerCase() === gladiatorCollectiblesAddress.toLowerCase())\n    .map((activity) => {\n      const { name: collectionName } = bunniesMetadata.data[activity.nft.otherId].collection\n      return {\n        ...bunniesMetadata.data[activity.nft.otherId],\n        tokenId: activity.nft.tokenId,\n        attributes: [{ traitType: 'bunnyId', value: activity.nft.otherId }],\n        collectionAddress: activity.nft.collection.id,\n        collectionName,\n      }\n    })\n\n  const activityNftTokenIds = uniqBy(\n    activities\n      .filter((activity) => activity.nft.collection.id.toLowerCase() !== gladiatorCollectiblesAddress.toLowerCase())\n      .map((activity): TokenIdWithCollectionAddress => {\n        return { tokenId: activity.nft.tokenId, collectionAddress: activity.nft.collection.id }\n      }),\n    'tokenId',\n  )\n  const nfts = await getNftsFromDifferentCollectionsApi(activityNftTokenIds)\n  return nfts.concat(pbNfts)\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useModal } from '@pancakeswap/uikit'\nimport AvatarImage from 'views/Nft/market/components/BannerHeader/AvatarImage'\nimport EditProfileModal from './EditProfileModal'\n\nconst EditOverlay = styled.div`\n  background: rgba(0, 0, 0, 0.6) url('/images/camera.svg') no-repeat center center;\n  border-radius: 50%;\n  left: 0;\n  height: 100%;\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  transition: opacity 300ms;\n  width: 100%;\n  z-index: 1;\n`\n\nconst StyledEditProfileAvatar = styled.div`\n  position: relative;\n\n  &:hover {\n    cursor: pointer;\n\n    ${EditOverlay} {\n      opacity: 1;\n    }\n  }\n`\n\nconst EditProfileAvatar: React.FC<{ src: string; alt?: string }> = ({ src, alt }) => {\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\n\n  return (\n    <StyledEditProfileAvatar onClick={onEditProfileModal}>\n      <AvatarImage src={src} alt={alt} />\n      <EditOverlay />\n    </StyledEditProfileAvatar>\n  )\n}\n\nexport default EditProfileAvatar\n","import React from 'react'\nimport { Link as ReactRouterLink } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { BscScanIcon, Flex, IconButton, Link, Button, useModal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanLink } from 'utils'\nimport { formatNumber } from 'utils/formatBalance'\nimport truncateHash from 'utils/truncateHash'\nimport { Achievement, Profile } from 'state/types'\nimport { useWeb3React } from '@web3-react/core'\nimport EditProfileAvatar from './EditProfileAvatar'\nimport BannerHeader from '../../components/BannerHeader'\nimport StatBox, { StatBoxItem } from '../../components/StatBox'\nimport MarketPageTitle from '../../components/MarketPageTitle'\nimport EditProfileModal from './EditProfileModal'\nimport AvatarImage from '../../components/BannerHeader/AvatarImage'\n\ninterface HeaderProps {\n  accountPath: string\n  profile: Profile\n  achievements: Achievement[]\n  nftCollected: number\n  isAchievementsLoading: boolean\n  isNftLoading: boolean\n  isProfileLoading: boolean\n}\n\nconst StyledIconButton = styled(IconButton)`\n  width: fit-content;\n`\n\n// Account and profile passed down as the profile could be used to render _other_ users' profiles.\nconst ProfileHeader: React.FC<HeaderProps> = ({\n  accountPath,\n  profile,\n  achievements,\n  nftCollected,\n  isAchievementsLoading,\n  isNftLoading,\n  isProfileLoading,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\n\n  const isConnectedAccount = account?.toLowerCase() === accountPath?.toLowerCase()\n  const numNftCollected = !isNftLoading ? (nftCollected ? formatNumber(nftCollected, 0, 0) : '-') : null\n  const numPoints = !isProfileLoading ? (profile?.points ? formatNumber(profile.points, 0, 0) : '-') : null\n  const numAchievements = !isAchievementsLoading\n    ? achievements?.length\n      ? formatNumber(achievements.length, 0, 0)\n      : '-'\n    : null\n\n  const avatarImage = profile?.nft?.image?.thumbnail || '/images/nfts/no-profile-md.png'\n\n  const getBannerImage = () => {\n    const imagePath = '/images/teams'\n    if (profile) {\n      switch (profile.teamId) {\n        case 1:\n          return `${imagePath}/hermes-banner.png`\n        case 2:\n          return `${imagePath}/flamma-banner.png`\n        case 3:\n          return `${imagePath}/spartacus-banner.png`\n        default:\n          break\n      }\n    }\n    return `${imagePath}/no-team-banner.png`\n  }\n\n  const getAvatar = () => {\n    const getIconButtons = () => {\n      return (\n        // TODO: Share functionality once user profiles routed by ID\n        <Flex display=\"inline-flex\">\n          {accountPath && (\n            <StyledIconButton\n              target=\"_blank\"\n              as=\"a\"\n              href={getBscScanLink(accountPath, 'address')}\n              // alt={t('View BscScan for user address')}\n            >\n              <BscScanIcon width=\"20px\" color=\"primary\" />\n            </StyledIconButton>\n          )}\n        </Flex>\n      )\n    }\n\n    const getImage = () => {\n      return (\n        <>\n          {profile && accountPath && isConnectedAccount ? (\n            <EditProfileAvatar src={avatarImage} alt={t('User profile picture')} />\n          ) : (\n            <AvatarImage src={avatarImage} alt={t('User profile picture')} />\n          )}\n        </>\n      )\n    }\n    return (\n      <>\n        {getImage()}\n        {getIconButtons()}\n      </>\n    )\n  }\n\n  const getTitle = () => {\n    if (profile?.username) {\n      return `@${profile.username}`\n    }\n\n    if (accountPath) {\n      return truncateHash(accountPath, 5, 3)\n    }\n\n    return null\n  }\n\n  const renderDescription = () => {\n    const getActivateButton = () => {\n      if (!profile) {\n        return (\n          <ReactRouterLink to=\"/create-profile\">\n            <Button mt=\"16px\">{t('Activate Profile')}</Button>\n          </ReactRouterLink>\n        )\n      }\n      return (\n        <Button width=\"fit-content\" mt=\"16px\" onClick={onEditProfileModal}>\n          {t('Reactivate Profile')}\n        </Button>\n      )\n    }\n\n    return (\n      <Flex flexDirection=\"column\" mb={[16, null, 0]} mr={[0, null, 16]}>\n        {accountPath && profile?.username && (\n          <Link href={getBscScanLink(accountPath, 'address')} external bold color=\"primary\">\n            {truncateHash(accountPath)}\n          </Link>\n        )}\n        {accountPath && isConnectedAccount && (!profile || !profile?.nft) && getActivateButton()}\n      </Flex>\n    )\n  }\n\n  return (\n    <>\n      <BannerHeader bannerImage={getBannerImage()} bannerAlt={t('User team banner')} avatar={getAvatar()} />\n      <MarketPageTitle pb=\"48px\" title={getTitle()} description={renderDescription()}>\n        <StatBox>\n          <StatBoxItem title={t('NFT Collected')} stat={numNftCollected} />\n          <StatBoxItem title={t('Points')} stat={numPoints} />\n          <StatBoxItem title={t('Achievements')} stat={numAchievements} />\n        </StatBox>\n      </MarketPageTitle>\n    </>\n  )\n}\n\nexport default ProfileHeader\n","import React, { useState, useEffect } from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Link as RouterLink, useLocation, useParams } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { Flex } from '@pancakeswap/uikit'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\n\nconst Tab = styled.button<{ $active: boolean }>`\n  display: inline-flex;\n  justify-content: center;\n  cursor: pointer;\n  color: ${({ theme, $active }) => ($active ? theme.colors.secondary : theme.colors.textSubtle)};\n  border-width: ${({ $active }) => ($active ? '1px 1px 0 1px' : '0')};\n  border-style: solid solid none solid;\n  border-color: ${({ theme }) =>\n    `#D9AB3A #D9AB3A transparent #D9AB3A`};\n  outline: 0;\n  padding: 12px 16px;\n  border-radius: 16px 16px 0 0;\n  font-size: 16px;\n  font-weight: ${({ $active }) => ($active ? '600' : '400')};\n  background-color: ${({ theme, $active }) => ($active ? '#000' : 'transparent')};\n  transition: background-color 0.3s ease-out;\n`\n\nconst TabMenu = () => {\n  const { t } = useTranslation()\n  const { accountAddress } = useParams<{ accountAddress: string }>()\n  const { pathname } = useLocation()\n  const [achievementsActive, setIsAchievementsActive] = useState(pathname.includes('achievements'))\n\n  useEffect(() => {\n    setIsAchievementsActive(pathname.includes('achievements'))\n  }, [pathname])\n\n  return (\n    <Flex>\n      <Tab\n        onClick={() => setIsAchievementsActive(false)}\n        $active={!achievementsActive}\n        as={RouterLink}\n        to={`${nftsBaseUrl}/profile/${accountAddress}`}\n      >\n        NFTs\n      </Tab>\n      <Tab\n        onClick={() => setIsAchievementsActive(true)}\n        $active={achievementsActive}\n        as={RouterLink}\n        to={`${nftsBaseUrl}/profile/${accountAddress}/achievements`}\n      >\n        {t('Achievements')}\n      </Tab>\n    </Flex>\n  )\n}\n\nexport default TabMenu\n","import React, { ImgHTMLAttributes } from 'react'\nimport styled from 'styled-components'\nimport { BunnyPlaceholderIcon } from '@pancakeswap/uikit'\n\ninterface AchievementAvatarProps extends ImgHTMLAttributes<HTMLImageElement> {\n  badge?: string\n}\n\nconst NoBadgePlaceholder = styled(BunnyPlaceholderIcon)`\n  height: 48px;\n  width: 48px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 64px;\n    width: 64px;\n  }\n`\n\nconst StyledAchievementAvatar = styled.img`\n  height: 48px;\n  width: 48px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 64px;\n    width: 64px;\n  }\n`\n\nconst AchievementAvatar: React.FC<AchievementAvatarProps> = ({ badge, ...props }) => {\n  if (!badge) {\n    return <NoBadgePlaceholder />\n  }\n\n  return <StyledAchievementAvatar src={`/images/achievements/${badge}`} alt=\"achievement badge\" {...props} />\n}\n\nexport default AchievementAvatar\n","import React from 'react'\nimport { Text, TextProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { TranslatableText as AchievementTitleType } from 'config/constants/types'\n\ninterface AchievementTitleProps extends TextProps {\n  title: AchievementTitleType\n}\n\nconst AchievementTitle: React.FC<AchievementTitleProps> = ({ title, ...props }) => {\n  const { t } = useTranslation()\n\n  if (typeof title === 'string') {\n    return (\n      <Text bold {...props}>\n        {title}\n      </Text>\n    )\n  }\n\n  const { key, data = {} } = title\n\n  return (\n    <Text bold {...props}>\n      {t(key, data)}\n    </Text>\n  )\n}\n\nexport default AchievementTitle\n","import React from 'react'\nimport { Text, TextProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { TranslatableText as AchievementDescriptionType } from 'config/constants/types'\nimport styled from 'styled-components'\n\ninterface AchievementDescriptionProps extends TextProps {\n  description?: AchievementDescriptionType\n}\n\nconst Description = styled(Text).attrs({ as: 'p', fontSize: '14px' })`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: block;\n  }\n`\n\nconst AchievementDescription: React.FC<AchievementDescriptionProps> = ({ description, ...props }) => {\n  const { t } = useTranslation()\n\n  if (!description) {\n    return null\n  }\n\n  if (typeof description === 'string') {\n    return (\n      <Text as=\"p\" color=\"textSubtle\" fontSize=\"14px\" {...props}>\n        {description}\n      </Text>\n    )\n  }\n\n  const { key, data = {} } = description\n\n  return (\n    <Description color=\"textSubtle\" {...props}>\n      {t(key, data)}\n    </Description>\n  )\n}\n\nexport default AchievementDescription\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, PrizeIcon, Text } from '@pancakeswap/uikit'\nimport { Achievement } from 'state/types'\nimport AchievementAvatar from './AchievementAvatar'\nimport AchievementTitle from './AchievementTitle'\nimport AchievementDescription from './AchievementDescription'\n\ninterface AchievementCardProps {\n  achievement: Achievement\n}\n\nconst Details = styled(Flex)`\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  padding-left: 8px;\n  padding-right: 8px;\n`\n\nconst AchievementCard: React.FC<AchievementCardProps> = ({ achievement }) => {\n  return (\n    <Flex>\n      <AchievementAvatar badge={achievement.badge} />\n      <Details>\n        <AchievementTitle title={achievement.title} />\n        <AchievementDescription description={achievement.description} />\n      </Details>\n      <Flex alignItems=\"center\">\n        <PrizeIcon width=\"18px\" color=\"textSubtle\" mr=\"4px\" />\n        <Text color=\"textSubtle\">{achievement.points.toLocaleString()}</Text>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default AchievementCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Heading, Skeleton, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Achievement } from 'state/types'\nimport AchievementCard from './AchievementCard'\n\nconst Grid = styled.div`\n  display: grid;\n  grid-gap: 16px;\n  grid-template-columns: 1fr;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`\n\nconst AchievementsList: React.FC<{ achievements: Achievement[]; isLoading: boolean }> = ({\n  achievements,\n  isLoading,\n}) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n\n  if (isLoading) {\n    if (isMobile) {\n      return <Skeleton width=\"100%\" height=\"64px\" />\n    }\n    return <Skeleton width=\"540px\" height=\"64px\" />\n  }\n\n  return (\n    <>\n      <Grid>\n        {achievements.map((achievement) => (\n          <AchievementCard key={achievement.id} achievement={achievement} />\n        ))}\n      </Grid>\n      {achievements.length === 0 && (\n        <Flex alignItems=\"center\" justifyContent=\"center\" style={{ height: '64px' }}>\n          <Heading as=\"h5\" scale=\"md\" color=\"textDisabled\">\n            {t('No achievements yet!')}\n          </Heading>\n        </Flex>\n      )}\n    </>\n  )\n}\n\nexport default AchievementsList\n","import React from 'react'\nimport { Flex, FlexProps, PrizeIcon, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface PointsLabelProps extends FlexProps {\n  points: number\n}\n\nconst PointsLabel: React.FC<PointsLabelProps> = ({ points, ...props }) => {\n  const { t } = useTranslation()\n  const localePoints = points.toLocaleString()\n\n  return (\n    <Flex alignItems=\"center\" {...props}>\n      <PrizeIcon mr=\"4px\" color=\"textSubtle\" />\n      <Text color=\"textSubtle\">{t('%num% points', { num: localePoints })}</Text>\n    </Flex>\n  )\n}\n\nexport default PointsLabel\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { AutoRenewIcon, Button, Flex } from '@pancakeswap/uikit'\nimport { Achievement } from 'state/types'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePointCenterIfoContract } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport AchievementTitle from 'views/Nft/market/Profile/components/Achievements/AchievementTitle'\nimport AchievementAvatar from 'views/Nft/market/Profile/components/Achievements/AchievementAvatar'\nimport AchievementDescription from 'views/Nft/market/Profile/components/Achievements/AchievementDescription'\nimport { logError } from 'utils/sentry'\nimport PointsLabel from './PointsLabel'\n\ninterface AchievementRowProps {\n  achievement: Achievement\n  onCollectSuccess?: (achievement: Achievement) => void\n}\n\nconst ActionColumn = styled.div`\n  flex: none;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    max-width: 160px;\n\n    & > button {\n      width: 100%;\n    }\n  }\n`\n\nconst StyledAchievementRow = styled(Flex)`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  padding-bottom: 16px;\n  padding-top: 16px;\n`\n\nconst Details = styled.div`\n  flex: 1;\n`\n\nconst Body = styled(Flex)`\n  flex-direction: column;\n  flex: 1;\n  margin-left: 8px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    align-items: center;\n    flex-direction: row;\n  }\n`\n\nconst AchievementRow: React.FC<AchievementRowProps> = ({ achievement, onCollectSuccess }) => {\n  const [isCollecting, setIsCollecting] = useState(false)\n  const { t } = useTranslation()\n  const pointCenterContract = usePointCenterIfoContract()\n  const { toastError, toastSuccess } = useToast()\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  const handleCollectPoints = async () => {\n    try {\n      const tx = await callWithGasPrice(pointCenterContract, 'getPoints', [achievement.address])\n      toastSuccess(`${t('Transaction Submitted')}!`, <ToastDescriptionWithTx txHash={tx.hash} />)\n      setIsCollecting(true)\n      const receipt = await tx.wait()\n      if (receipt.status) {\n        onCollectSuccess(achievement)\n        toastSuccess(t('Points Collected!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n      } else {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    } catch (error) {\n      logError(error)\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n    } finally {\n      setIsCollecting(false)\n    }\n  }\n\n  return (\n    <StyledAchievementRow>\n      <AchievementAvatar badge={achievement.badge} />\n      <Body>\n        <Details>\n          <AchievementTitle title={achievement.title} />\n          <AchievementDescription description={achievement.description} />\n        </Details>\n        <PointsLabel points={achievement.points} px={[0, null, null, '32px']} mb={['16px', null, null, 0]} />\n        <ActionColumn>\n          <Button\n            onClick={handleCollectPoints}\n            isLoading={isCollecting}\n            endIcon={isCollecting ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n            disabled={isCollecting}\n            variant=\"secondary\"\n          >\n            {t('Collect')}\n          </Button>\n        </ActionColumn>\n      </Body>\n    </StyledAchievementRow>\n  )\n}\n\nexport default AchievementRow\n","import React, { useEffect, useState } from 'react'\nimport { sumBy } from 'lodash'\nimport { useAppDispatch } from 'state'\nimport { useWeb3React } from '@web3-react/core'\nimport { Card, CardBody, CardHeader, Flex, Heading, PrizeIcon } from '@pancakeswap/uikit'\nimport { useProfile } from 'state/profile/hooks'\nimport { Achievement } from 'state/types'\nimport { addPoints } from 'state/profile'\nimport { addAchievement } from 'state/achievements'\nimport { useTranslation } from 'contexts/Localization'\nimport { getClaimableIfoData } from 'utils/achievements'\nimport AchievementRow from './AchievementRow'\n\nconst ClaimPointsCallout = () => {\n  const [claimableAchievements, setClaimableAchievement] = useState<Achievement[]>([])\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { profile } = useProfile()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const fetchIfoClaims = async () => {\n      const ifoData = await getClaimableIfoData(account)\n      setClaimableAchievement(ifoData)\n    }\n\n    if (account) {\n      fetchIfoClaims()\n    }\n  }, [account, dispatch, setClaimableAchievement])\n\n  const handleCollectSuccess = (achievement: Achievement) => {\n    dispatch(addAchievement(achievement))\n    dispatch(addPoints(achievement.points))\n\n    setClaimableAchievement((prevClaimableAchievements) =>\n      prevClaimableAchievements.filter((prevClaimableAchievement) => prevClaimableAchievement.id !== achievement.id),\n    )\n  }\n\n  if (!profile?.isActive) {\n    return null\n  }\n\n  if (claimableAchievements.length === 0) {\n    return null\n  }\n\n  const totalPointsToCollect = sumBy(claimableAchievements, 'points')\n\n  return (\n    <Card isActive mb=\"32px\">\n      <CardHeader>\n        <Flex flexDirection={['column', null, 'row']} justifyContent={['start', null, 'space-between']}>\n          <Flex alignItems=\"center\" mb={['16px', null, 0]}>\n            <PrizeIcon width=\"32px\" mr=\"8px\" />\n            <Heading scale=\"lg\">{t('%num% Points to Collect', { num: totalPointsToCollect })}</Heading>\n          </Flex>\n        </Flex>\n      </CardHeader>\n      <CardBody>\n        {claimableAchievements.map((achievement) => (\n          <AchievementRow key={achievement.address} achievement={achievement} onCollectSuccess={handleCollectSuccess} />\n        ))}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default ClaimPointsCallout\n","import React from 'react'\nimport { Card, CardBody, Heading, PrizeIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport IconStatBox from 'views/Teams/components/IconStatBox'\nimport { Achievement } from 'state/types'\nimport AchievementsList from './AchievementsList'\nimport ClaimPointsCallout from './ClaimPointsCallout'\n\nconst Achievements: React.FC<{ achievements: Achievement[]; isLoading: boolean; points?: number }> = ({\n  achievements,\n  isLoading,\n  points = 0,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Card>\n      <CardBody>\n        <IconStatBox icon={PrizeIcon} title={points} subtitle={t('Points')} mb=\"24px\" />\n        <Heading as=\"h4\" scale=\"md\" mb=\"16px\">\n          {t('Achievements')}\n        </Heading>\n        <ClaimPointsCallout />\n        <AchievementsList achievements={achievements} isLoading={isLoading} />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default Achievements\n","import { ethers } from 'ethers'\nimport { Activity, AskOrder, AskOrderType, MarketEvent, Transaction } from 'state/nftMarket/types'\n\nexport const sortUserActivity = (\n  account: string,\n  userActivity: { askOrderHistory: AskOrder[]; buyTradeHistory: Transaction[]; sellTradeHistory: Transaction[] },\n): Activity[] => {\n  const { askOrderHistory, buyTradeHistory, sellTradeHistory } = userActivity\n\n  const getAskOrderEvent = (orderType: AskOrderType): MarketEvent => {\n    switch (orderType) {\n      case AskOrderType.CANCEL:\n        return MarketEvent.CANCEL\n      case AskOrderType.MODIFY:\n        return MarketEvent.MODIFY\n      case AskOrderType.NEW:\n        return MarketEvent.NEW\n      default:\n        return MarketEvent.MODIFY\n    }\n  }\n\n  const transformTransactions = (transactions: Transaction[]): Activity[] => {\n    const transformedTransactions = transactions.map((transaction) => {\n      const userSeller = transaction.seller.id === account.toLowerCase()\n      const marketEvent = userSeller ? MarketEvent.SELL : MarketEvent.BUY\n      const { timestamp, nft } = transaction\n      const price = transaction.askPrice\n      const otherParty = userSeller ? transaction.buyer.id : transaction.seller.id\n      const tx = transaction.id\n      return { marketEvent, price, otherParty, timestamp, nft, tx }\n    })\n\n    return transformedTransactions\n  }\n\n  const transformAskOrders = (askOrders: AskOrder[]): Activity[] => {\n    const transformedAskOrders = askOrders.map((askOrder) => {\n      const marketEvent = getAskOrderEvent(askOrder.orderType)\n      const { timestamp, nft } = askOrder\n      const price = askOrder.askPrice\n      const tx = askOrder.id\n      return { marketEvent, price, timestamp, nft, tx }\n    })\n\n    return transformedAskOrders\n  }\n\n  const allActivity = [\n    ...transformAskOrders(askOrderHistory),\n    ...transformTransactions(buyTradeHistory),\n    ...transformTransactions(sellTradeHistory),\n  ]\n  if (allActivity.length > 0) {\n    const sortedByMostRecent = allActivity.sort((activityItem1, activityItem2) => {\n      const timestamp1 = ethers.BigNumber.from(activityItem1.timestamp)\n      const timestamp2 = ethers.BigNumber.from(activityItem2.timestamp)\n      return timestamp2.sub(timestamp1).toNumber()\n    })\n\n    return sortedByMostRecent\n  }\n  return []\n}\n","import React, { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { isAddress } from 'utils'\nimport { fetchUserActivity } from 'state/nftMarket/reducer'\nimport { useAppDispatch } from 'state'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport { getUserActivity } from 'state/nftMarket/helpers'\nimport { ArrowBackIcon, ArrowForwardIcon, Card, Flex, Table, Text, Th, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { Activity, NftToken, UserNftInitializationState } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport TableLoader from 'components/TableLoader'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport useTheme from 'hooks/useTheme'\nimport { useParams } from 'react-router'\nimport { sortUserActivity } from '../../utils/sortUserActivity'\nimport NoNftsImage from '../../../components/Activity/NoNftsImage'\nimport { Arrow, PageButtons } from '../../../components/PaginationButtons'\nimport ActivityRow from '../../../components/Activity/ActivityRow'\nimport { fetchActivityNftMetadata } from '../../../ActivityHistory/utils/fetchActivityNftMetadata'\n\nconst MAX_PER_PAGE = 8\n\nconst ActivityHistory = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { accountAddress } = useParams<{ accountAddress: string }>()\n  const { theme } = useTheme()\n  const { t } = useTranslation()\n  const [currentPage, setCurrentPage] = useState(1)\n  const [maxPage, setMaxPages] = useState(1)\n  const [activitiesSlice, setActivitiesSlice] = useState<Activity[]>([])\n  const [nftMetadata, setNftMetadata] = useState<NftToken[]>([])\n  const [sortedUserActivities, setSortedUserActivities] = useState<Activity[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const { activity: userActivity } = useUserNfts()\n  const bnbBusdPrice = useBNBBusdPrice()\n  const { isXs, isSm } = useMatchBreakpoints()\n\n  useEffect(() => {\n    if (account && userActivity.initializationState === UserNftInitializationState.INITIALIZED) {\n      const differentAddress =\n        accountAddress && isAddress(accountAddress)\n          ? account.toLowerCase() !== accountAddress.toLocaleLowerCase()\n          : false\n      if (!differentAddress) {\n        setSortedUserActivities(sortUserActivity(account, userActivity))\n        setIsLoading(false)\n      }\n    }\n  }, [account, userActivity, accountAddress])\n\n  useEffect(() => {\n    const fetchAddressActivity = async () => {\n      try {\n        const addressActivity = await getUserActivity(accountAddress.toLocaleLowerCase())\n        setSortedUserActivities(sortUserActivity(accountAddress, addressActivity))\n        setIsLoading(false)\n      } catch (error) {\n        console.error('Failed to fetch address activity', error)\n      }\n    }\n\n    if (account) {\n      const differentAddress =\n        accountAddress && isAddress(accountAddress)\n          ? account.toLowerCase() !== accountAddress.toLocaleLowerCase()\n          : false\n      if (differentAddress) {\n        fetchAddressActivity()\n      } else {\n        dispatch(fetchUserActivity(account))\n      }\n    } else if (accountAddress && isAddress(accountAddress)) {\n      fetchAddressActivity()\n    }\n  }, [account, accountAddress, dispatch])\n\n  useEffect(() => {\n    const fetchNftMetadata = async () => {\n      const nfts = await fetchActivityNftMetadata(sortedUserActivities)\n      setNftMetadata(nfts)\n    }\n\n    const getMaxPages = () => {\n      const max = Math.ceil(sortedUserActivities.length / MAX_PER_PAGE)\n      setMaxPages(max)\n    }\n\n    if (sortedUserActivities.length > 0) {\n      getMaxPages()\n      fetchNftMetadata()\n    }\n\n    return () => {\n      setActivitiesSlice([])\n      setNftMetadata([])\n      setMaxPages(1)\n      setCurrentPage(1)\n    }\n  }, [sortedUserActivities])\n\n  useEffect(() => {\n    const getActivitySlice = () => {\n      const slice = sortedUserActivities.slice(MAX_PER_PAGE * (currentPage - 1), MAX_PER_PAGE * currentPage)\n      setActivitiesSlice(slice)\n    }\n    if (sortedUserActivities.length > 0) {\n      getActivitySlice()\n    }\n  }, [sortedUserActivities, currentPage])\n\n  return (\n    <Card style={{ overflowX: 'auto' }}>\n      {sortedUserActivities.length === 0 && nftMetadata.length === 0 && activitiesSlice.length === 0 && !isLoading ? (\n        <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n          <NoNftsImage />\n          <Text pt=\"8px\" bold>\n            {t('No NFT market history found')}\n          </Text>\n        </Flex>\n      ) : (\n        <>\n          <Table>\n            <thead>\n              <tr>\n                <Th textAlign={['center', null, 'left']}> {t('Item')}</Th>\n                <Th textAlign=\"right\"> {t('Event')}</Th>\n                {isXs || isSm ? null : (\n                  <>\n                    <Th textAlign=\"right\"> {t('Price')}</Th>\n                    <Th textAlign=\"center\"> {t('From/To')}</Th>\n                  </>\n                )}\n                <Th textAlign=\"center\"> {t('Date')}</Th>\n                {isXs || isSm ? null : <Th />}\n              </tr>\n            </thead>\n\n            <tbody>\n              {isLoading ? (\n                <TableLoader />\n              ) : (\n                activitiesSlice.map((activity) => {\n                  const nftMeta = nftMetadata.find((metaNft) => metaNft.tokenId === activity.nft.tokenId)\n                  return (\n                    <ActivityRow\n                      key={`${activity.nft.tokenId}${activity.timestamp}`}\n                      activity={activity}\n                      nft={nftMeta}\n                      bnbBusdPrice={bnbBusdPrice}\n                      isUserActivity\n                    />\n                  )\n                })\n              )}\n            </tbody>\n          </Table>\n          <Flex\n            borderTop={`1px ${theme.colors.cardBorder} solid`}\n            pt=\"24px\"\n            flexDirection=\"column\"\n            justifyContent=\"space-between\"\n            height=\"100%\"\n          >\n            <PageButtons>\n              <Arrow\n                onClick={() => {\n                  setCurrentPage(currentPage === 1 ? currentPage : currentPage - 1)\n                }}\n              >\n                <ArrowBackIcon color={currentPage === 1 ? 'textDisabled' : 'primary'} />\n              </Arrow>\n              <Text>{t('Page %page% of %maxPage%', { page: currentPage, maxPage })}</Text>\n              <Arrow\n                onClick={() => {\n                  setCurrentPage(currentPage === maxPage ? currentPage : currentPage + 1)\n                }}\n              >\n                <ArrowForwardIcon color={currentPage === maxPage ? 'textDisabled' : 'primary'} />\n              </Arrow>\n            </PageButtons>\n          </Flex>\n        </>\n      )}\n    </Card>\n  )\n}\n\nexport default ActivityHistory\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { useLocation, useParams } from 'react-router'\nimport BaseSubMenu from '../../components/BaseSubMenu'\nimport { nftsBaseUrl } from '../../constants'\n\nconst SubMenuComponent: React.FC = () => {\n  const { t } = useTranslation()\n  const { accountAddress } = useParams<{ accountAddress: string }>()\n  const { pathname } = useLocation()\n\n  const ItemsConfig = [\n    {\n      label: t('Items'),\n      href: `${nftsBaseUrl}/profile/${accountAddress}`,\n    },\n    {\n      label: t('Activity'),\n      href: `${nftsBaseUrl}/profile/${accountAddress}/activity`,\n    },\n  ]\n\n  return <BaseSubMenu items={ItemsConfig} activeItem={pathname} justifyContent=\"flex-start\" mb=\"60px\" />\n}\n\nexport default SubMenuComponent\n","import React, { useState, useEffect } from 'react'\nimport { Grid, useModal, Text, Flex } from '@pancakeswap/uikit'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport { NftLocation, UserNftInitializationState, NftToken } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { CollectibleActionCard } from '../../components/CollectibleCard'\nimport GridPlaceholder from '../../components/GridPlaceholder'\nimport ProfileNftModal from '../../components/ProfileNftModal'\nimport NoNftsImage from '../../components/Activity/NoNftsImage'\nimport SellModal from '../../components/BuySellModals/SellModal'\n\ninterface ProfileNftProps {\n  nft: NftToken\n  location: NftLocation\n}\n\ninterface SellNftProps {\n  nft: NftToken\n  location: NftLocation\n  variant: 'sell' | 'edit'\n}\n\nconst UserNfts = () => {\n  const { nfts, userNftsInitializationState } = useUserNfts()\n  const [clickedProfileNft, setClickedProfileNft] = useState<ProfileNftProps>({ nft: null, location: null })\n  const [clickedSellNft, setClickedSellNft] = useState<SellNftProps>({ nft: null, location: null, variant: null })\n  const [onPresentProfileNftModal] = useModal(<ProfileNftModal nft={clickedProfileNft.nft} />)\n  const [onPresentSellModal] = useModal(<SellModal variant={clickedSellNft.variant} nftToSell={clickedSellNft.nft} />)\n  const { t } = useTranslation()\n\n  const handleCollectibleClick = (nft: NftToken, location: NftLocation) => {\n    switch (location) {\n      case NftLocation.PROFILE:\n        setClickedProfileNft({ nft, location })\n        break\n      case NftLocation.WALLET:\n        setClickedSellNft({ nft, location, variant: 'sell' })\n        break\n      case NftLocation.FORSALE:\n        setClickedSellNft({ nft, location, variant: 'edit' })\n        break\n      default:\n        break\n    }\n  }\n\n  useEffect(() => {\n    if (clickedProfileNft.nft) {\n      onPresentProfileNftModal()\n    }\n    // exhaustive deps disabled as the useModal dep causes re-render loop\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickedProfileNft])\n\n  useEffect(() => {\n    if (clickedSellNft.nft) {\n      onPresentSellModal()\n    }\n    // exhaustive deps disabled as the useModal dep causes re-render loop\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickedSellNft])\n\n  return (\n    <>\n      {/* User has no NFTs */}\n      {nfts.length === 0 && userNftsInitializationState === UserNftInitializationState.INITIALIZED ? (\n        <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n          <NoNftsImage />\n          <Text pt=\"8px\" bold>\n            {t('No NFTs found')}\n          </Text>\n        </Flex>\n      ) : // User has NFTs and data has been fetched\n      nfts.length > 0 ? (\n        <Grid\n          gridGap=\"16px\"\n          gridTemplateColumns={['1fr', 'repeat(2, 1fr)', 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\n          alignItems=\"start\"\n        >\n          {nfts.map((nft) => {\n            const { marketData, location } = nft\n\n            return (\n              <CollectibleActionCard\n                isUserNft\n                onClick={() => handleCollectibleClick(nft, location)}\n                key={`${nft.tokenId}-${nft.collectionName}`}\n                nft={nft}\n                currentAskPrice={\n                  marketData?.currentAskPrice && marketData?.isTradable && parseFloat(marketData.currentAskPrice)\n                }\n                nftLocation={location}\n              />\n            )\n          })}\n        </Grid>\n      ) : (\n        // User NFT data hasn't been fetched\n        <GridPlaceholder />\n      )}\n    </>\n  )\n}\n\nexport default UserNfts\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useProfile } from 'state/profile/hooks'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box } from '@pancakeswap/uikit'\nimport Page from 'components/Layout/Page'\nimport { Route } from 'react-router'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\nimport { useAchievements, useFetchAchievements } from 'state/achievements/hooks'\nimport { UserNftInitializationState } from 'state/nftMarket/types'\nimport { FetchStatus } from 'config/constants/types'\nimport useFetchUserNfts from './hooks/useFetchUserNfts'\nimport MarketPageHeader from '../components/MarketPageHeader'\nimport ProfileHeader from './components/ProfileHeader'\nimport TabMenu from './components/TabMenu'\nimport Achievements from './components/Achievements'\nimport ActivityHistory from './components/ActivityHistory'\nimport SubMenu from './components/SubMenu'\nimport UserNfts from './components/UserNfts'\n\nconst TabMenuWrapper = styled(Box)`\n  position: absolute;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 0%);\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    left: auto;\n    transform: none;\n  }\n`\n\nconst ConnectedProfile = () => {\n  const { profile, isLoading: isProfileLoading } = useProfile()\n  const { achievements, achievementFetchStatus } = useAchievements()\n  const { account } = useWeb3React()\n  const { userNftsInitializationState, nfts: userNfts } = useUserNfts()\n\n  useFetchAchievements()\n  useFetchUserNfts()\n\n  return (\n    <Box style={{ background: 'linear-gradient(180deg,#000 0%,#080808 100%)' }}>\n      <MarketPageHeader position=\"relative\">\n        <ProfileHeader\n          accountPath={account}\n          profile={profile}\n          achievements={achievements}\n          nftCollected={userNfts.length}\n          isProfileLoading={isProfileLoading}\n          isNftLoading={userNftsInitializationState !== UserNftInitializationState.INITIALIZED}\n          isAchievementsLoading={achievementFetchStatus !== FetchStatus.Fetched}\n        />\n        <TabMenuWrapper>\n          <TabMenu />\n        </TabMenuWrapper>\n      </MarketPageHeader>\n      <Page style={{ minHeight: 'auto' }}>\n        <Route path={`${nftsBaseUrl}/profile/:accountAddress/achievements`}>\n          <Achievements\n            achievements={achievements}\n            isLoading={achievementFetchStatus !== FetchStatus.Fetched}\n            points={profile?.points}\n          />\n        </Route>\n        <Route path={`${nftsBaseUrl}/profile/:accountAddress/activity`}>\n          <SubMenu />\n          <ActivityHistory />\n        </Route>\n        <Route exact path={`${nftsBaseUrl}/profile/:accountAddress`}>\n          <SubMenu />\n          <UserNfts />\n        </Route>\n      </Page>\n    </Box>\n  )\n}\n\nexport default ConnectedProfile\n","import { useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { State, AchievementState } from '../types'\nimport { fetchAchievements } from '.'\n\nexport const useFetchAchievements = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchAchievements(account))\n    }\n  }, [account, dispatch])\n}\n\nexport const useAchievements = () => {\n  const achievements: AchievementState = useSelector((state: State) => state.achievements)\n  return achievements\n}\n","import { useEffect, useMemo, useState } from 'react'\nimport isEmpty from 'lodash/isEmpty'\nimport { useGetCollections } from 'state/nftMarket/hooks'\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\nimport { Profile } from 'state/types'\nimport { getCompleteAccountNftData } from 'state/nftMarket/helpers'\n\nconst useNftsForAddress = (account: string, profile: Profile, isProfileFetching: boolean) => {\n  const [combinedNfts, setCombinedNfts] = useState<NftToken[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const collections = useGetCollections()\n\n  const hasProfileNft = profile?.tokenId\n  const profileNftTokenId = profile?.tokenId?.toString()\n  const profileNftCollectionAddress = profile?.collectionAddress\n\n  const profileNftWithCollectionAddress = useMemo(() => {\n    if (hasProfileNft) {\n      return {\n        tokenId: profileNftTokenId,\n        collectionAddress: profileNftCollectionAddress,\n        nftLocation: NftLocation.PROFILE,\n      }\n    }\n    return null\n  }, [profileNftTokenId, profileNftCollectionAddress, hasProfileNft])\n\n  useEffect(() => {\n    const getNfts = async () => {\n      const completeNftData = await getCompleteAccountNftData(account, collections, profileNftWithCollectionAddress)\n      setCombinedNfts(completeNftData)\n      setIsLoading(false)\n    }\n\n    if (!isProfileFetching && !isEmpty(collections)) {\n      setIsLoading(true)\n      getNfts()\n    }\n  }, [account, collections, isProfileFetching, profileNftWithCollectionAddress])\n\n  return { nfts: combinedNfts, isLoading }\n}\n\nexport default useNftsForAddress\n","import React from 'react'\nimport { Grid, Text, Flex } from '@pancakeswap/uikit'\nimport { NftToken } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { CollectibleLinkCard } from '../../components/CollectibleCard'\nimport GridPlaceholder from '../../components/GridPlaceholder'\nimport NoNftsImage from '../../components/Activity/NoNftsImage'\n\nconst UserNfts: React.FC<{ nfts: NftToken[]; isLoading: boolean }> = ({ nfts, isLoading }) => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      {/* User has no NFTs */}\n      {nfts.length === 0 && !isLoading ? (\n        <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n          <NoNftsImage />\n          <Text pt=\"8px\" bold>\n            {t('No NFTs found')}\n          </Text>\n        </Flex>\n      ) : // User has NFTs and data has been fetched\n      nfts.length > 0 ? (\n        <Grid\n          gridGap=\"16px\"\n          gridTemplateColumns={['1fr', 'repeat(2, 1fr)', 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\n          alignItems=\"start\"\n        >\n          {nfts.map((nft) => {\n            const { marketData } = nft\n\n            return (\n              <CollectibleLinkCard\n                key={`${nft.tokenId}-${nft.collectionName}`}\n                nft={nft}\n                currentAskPrice={\n                  marketData?.currentAskPrice && marketData?.isTradable && parseFloat(marketData.currentAskPrice)\n                }\n              />\n            )\n          })}\n        </Grid>\n      ) : (\n        // User NFT data hasn't been fetched\n        <GridPlaceholder />\n      )}\n    </>\n  )\n}\n\nexport default UserNfts\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useAchievementsForAddress, useProfileForAddress } from 'state/profile/hooks'\nimport { Box } from '@pancakeswap/uikit'\nimport Page from 'components/Layout/Page'\nimport { Route, useParams } from 'react-router'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\nimport MarketPageHeader from '../components/MarketPageHeader'\nimport ProfileHeader from './components/ProfileHeader'\nimport TabMenu from './components/TabMenu'\nimport Achievements from './components/Achievements'\nimport ActivityHistory from './components/ActivityHistory'\nimport SubMenu from './components/SubMenu'\nimport useNftsForAddress from './hooks/useNftsForAddress'\nimport UnconnectedProfileNfts from './components/UnconnectedProfileNfts'\n\nconst TabMenuWrapper = styled(Box)`\n  position: absolute;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 0%);\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    left: auto;\n    transform: none;\n  }\n`\n\nconst UnconnectedProfile = () => {\n  const { accountAddress } = useParams<{ accountAddress: string }>()\n  const { profile: profileHookState, isFetching: isProfileFetching } = useProfileForAddress(accountAddress)\n  const { profile } = profileHookState || {}\n  const { achievements, isFetching: isAchievementFetching } = useAchievementsForAddress(accountAddress)\n  const { nfts, isLoading: isNftLoading } = useNftsForAddress(accountAddress, profile, isProfileFetching)\n\n  return (\n    <>\n      <MarketPageHeader position=\"relative\">\n        <ProfileHeader\n          accountPath={accountAddress}\n          profile={profile}\n          achievements={achievements}\n          nftCollected={nfts.length}\n          isProfileLoading={isProfileFetching}\n          isNftLoading={isNftLoading}\n          isAchievementsLoading={isAchievementFetching}\n        />\n        <TabMenuWrapper>\n          <TabMenu />\n        </TabMenuWrapper>\n      </MarketPageHeader>\n      <Page style={{ minHeight: 'auto' }}>\n        <Route path={`${nftsBaseUrl}/profile/:accountAddress/achievements`}>\n          <Achievements achievements={achievements} isLoading={isAchievementFetching} points={profile?.points} />\n        </Route>\n        <Route path={`${nftsBaseUrl}/profile/:accountAddress/activity`}>\n          <SubMenu />\n          <ActivityHistory />\n        </Route>\n        <Route exact path={`${nftsBaseUrl}/profile/:accountAddress`}>\n          <SubMenu />\n          <UnconnectedProfileNfts nfts={nfts} isLoading={isNftLoading} />\n        </Route>\n      </Page>\n    </>\n  )\n}\n\nexport default UnconnectedProfile\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useParams } from 'react-router'\nimport { isAddress } from 'utils'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport Page from 'components/Layout/Page'\nimport { useTranslation } from 'contexts/Localization'\nimport ConnectedProfile from './ConnectedProfile'\nimport UnconnectedProfile from './UnconnectedProfile'\nimport MarketPageHeader from '../components/MarketPageHeader'\nimport ProfileHeader from './components/ProfileHeader'\nimport NoNftsImage from '../components/Activity/NoNftsImage'\n\nconst NftProfile = () => {\n  const { account } = useWeb3React()\n  const { accountAddress } = useParams<{ accountAddress: string }>()\n  const { t } = useTranslation()\n\n  const isConnectedProfile = account?.toLowerCase() === accountAddress?.toLowerCase()\n  const invalidAddress = !accountAddress || isAddress(accountAddress) === false\n\n  if (invalidAddress) {\n    return (\n      <>\n        <MarketPageHeader position=\"relative\">\n          <ProfileHeader\n            accountPath={accountAddress}\n            profile={null}\n            achievements={null}\n            nftCollected={null}\n            isAchievementsLoading={false}\n            isNftLoading={false}\n            isProfileLoading={false}\n          />\n        </MarketPageHeader>\n        <Page style={{ minHeight: 'auto' }}>\n          <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n            <NoNftsImage />\n            <Text textAlign=\"center\" maxWidth=\"420px\" pt=\"8px\" bold>\n              {t('Please enter a valid address, or connect your wallet to view your profile')}\n            </Text>\n          </Flex>\n        </Page>\n      </>\n    )\n  }\n\n  return <>{isConnectedProfile ? <ConnectedProfile /> : <UnconnectedProfile />}</>\n}\n\nexport default NftProfile\n"],"sourceRoot":""}